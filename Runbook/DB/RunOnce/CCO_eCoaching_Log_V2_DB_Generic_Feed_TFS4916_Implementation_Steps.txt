/*

 TFS 4916- Automate book scans using Generic feed

Run in an SSMS window pointing to the eCoaching database in the respective environment.

Dev - eCoahingDev
Test - eCoachingTest
Prod - eCoaching



****************************************************************************
						Summary	


This Implementation has 3 Sections.

Section 1 - Stage SSIS package as described.

Section 2 - Table updates. 
1. Add additional fields to Generic Staging table
2. Add additional fields to Generic Rejected table
3. Add additional fields to Generic Fact table


Section 3 - Implement code changes by copying everything in section 3 into an
SSMS window pointing to the eCoaching database in the respective environment
and run with nothing selected.

Section 3 -	Functions									
1. Module ID from EmpID	

Section 3 -	Stored Procedures	
1.Insert into Coaching Generic
2.Select for contact


******************************************************************************
		   				
*************************DETAILS**********************************************
						
***********************SECTION 1 ********************************************

 Stage SSIS Package									
Download file Generic_Coaching.dtsx (change set 36238 )
From: \cms\eCoaching_V2\ETL\ in TFS source control

For Test
To: \\vrivfssdbt02\integrationservices\TestCoaching\Generic_Coaching\


For Production
To: \\vdenssdbp07\scorecard-ssis\Coaching
																	
*****************************************************************************
						


*************************SECTION 2*****************************************

                TABLE UPDATES
  Run each of the statements below one at a time.
  Note that these table update statements need to be run once only.
		
*****************************************************************************/



--1a. Add additional fields to Staging table

ALTER TABLE [EC].[Generic_Coaching_Stage]
ADD Module_ID int ,
Source_ID int,
isCSE bit,
Status_ID int,
Submitter_ID nvarchar(10),
CoachingReason_ID int,
SubCoachingReason_ID int,
Value nvarchar(30),
EmailSent bit
GO

--1b.

ALTER TABLE [EC].[Generic_Coaching_Stage]
ALTER COLUMN [TextDescription] nvarchar(4000)
GO

--1c.

ALTER TABLE [EC].[Generic_Coaching_Stage]
ALTER COLUMN CSR_EMPID nvarchar(10)
GO

--***********************

--2a.

ALTER TABLE [EC].[Generic_Coaching_Rejected]
ADD CSR_EMPID nvarchar(10),
Module_ID int ,
Source_ID int,
isCSE bit,
Status_ID int,
Submitter_ID nvarchar(10),
CoachingReason_ID int,
SubCoachingReason_ID int,
Value nvarchar(30)
GO

--2b.

ALTER TABLE [EC].[Generic_Coaching_Rejected]
ALTER COLUMN [TextDescription] nvarchar(4000)
GO

--***********************

--3a. 
ALTER TABLE [EC].[Generic_Coaching_Fact]
ADD CSR_EMPID nvarchar(10),
Module_ID int ,
Source_ID int,
isCSE bit,
Status_ID int,
Submitter_ID nvarchar(10),
CoachingReason_ID int,
SubCoachingReason_ID int,
Value nvarchar(30)
GO

--3b.

ALTER TABLE [EC].[Generic_Coaching_Fact]
ALTER COLUMN [TextDescription] nvarchar(4000)
GO

--***********************




/*************************SECTION 3*****************************************

COPY EVERYTHING FROM HERE ON TO AN SSMS WINDOW POINTING TO
ECOACHING DB AND RUN WITH NOTHING SELECTED.

****************************************************************************
					Start Here!!!		
*****************************************************************************
																	
					Functions										
*****************************************************************************/
PRINT ('  Starting Function(s) for this release...')

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[EC].[fn_intModuleIDFromempID]') AND type in (N'FN'))
DROP FUNCTION [EC].[fn_intModuleIDFromempID]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		Susmitha Palacherla
-- Create date:  12/12/2016
-- Description:	Given an Employee ID returns the Module ID for that user if iser belongs to one of the 5 Modules.
-- Last Modified By:
-- Revision History:
--  Created per TFS 4916- setup of ad-hoc generic load - 12/12/2016
-- =============================================
CREATE FUNCTION [EC].[fn_intModuleIDFromEmpID] 
(
	@strEmpID nvarchar(10) 
)
RETURNS int
AS
BEGIN
	DECLARE 
	@strEmpJobCode nvarchar(20),
	@intModuleID int
	
SET @strEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @strEmpID)

SET @intModuleID = (CASE
 WHEN (@strEmpJobCode IN ('WACS01', 'WACS02', 'WACS03')) THEN 1
 WHEN (@strEmpJobCode IN ('WACS40')) THEN 2
 WHEN (@strEmpJobCode IN ('WACQ02','WACQ03','WACQ12')) THEN 3
 WHEN (@strEmpJobCode IN ('WIHD01','WIHD02','WIHD03','WIHD04')) THEN 4
 WHEN (@strEmpJobCode IN ('WTID13','WTTI02','WTTR12','WTTR13')) THEN 5
 ELSE -1
 END)

 
  RETURN  @intModuleID
  
END --fn_intModuleIDFromempID


GO


PRINT (' END Function(s) for this release...')


/****************************************************************************
																	
					Stored Procedures

						
*****************************************************************************/
PRINT (' Starting Stored Procedures for this release...')


--1. [EC].[sp_InsertInto_Coaching_Log_Generic] 


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Generic' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        4/11/2016
--  Created per TFS 2470 to load the Generic feed(s)- 4/11/2016
-- Modified to accomodate Attendance feed for seasonal employees per TFS 3972 - 09/15/2016
-- Modified to support ad-hoc loads by adding more values to the file. TFS 4916 -12/9/2016
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
                        
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNULL(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   
      
-- Inserts records from the Generic_Coaching_Stage table to the Coaching_Log Table

  INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
           ,[isVerified]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
SELECT DISTINCT LOWER(cs.CSR_LANID)	[FormName],

CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  
 END [ProgramName],
 
 CASE 
		WHEN cs.[Report_Code] like 'SEA%'
        THEN [EC].[fn_intSourceIDFromSource](cs.[Form_Type],cs.[Source])
        ELSE cs.Source_ID 
  END  [SourceID],
  
  CASE
        WHEN cs.[Report_Code] like 'SEA%'
        THEN [EC].[fn_strStatusIDFromStatus](cs.Form_Status)
        ELSE cs.Status_ID 
  END   [StatusID],
  
        [EC].[fn_intGetSiteIDFromLanID](cs.CSR_LANID,@dtmDate)[SiteID],
        LOWER(cs.CSR_LANID)				[EmpLanID],
        cs.CSR_EMPID                    [EmpID],
        
  CASE
        WHEN cs.[Report_Code] like 'SEA%'
        THEN [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)
        ELSE cs.Submitter_ID
  END   [SubmitterID],
  
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		-- EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
  CASE 
		 WHEN cs.[Report_Code] like 'SEA%' 
		 THEN REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br /> <br />')
		 WHEN  cs.[Report_Code] like 'OTH%'
		 THEN REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br />')
		 ELSE REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '      '  ,'<br />') 
  END [Description],	-- CHAR(13) + CHAR(10)
  
         1                          [isVerified],
		 cs.Submitted_Date			[SubmittedDate],
		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN 0
		 ELSE cs.isCSE
  END                          [isCSE],
		 
  CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN 0
		 ELSE cs.EmailSent
  END	[EmailSent],
  
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 
CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN 1
		 ELSE  cs.Module_ID
 END		                      [ModuleID],
  
  
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 ISNULL(csr.[Mgr_ID],'999999') [MgrID]
	                   
from [EC].[Generic_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null


-- Updates the strFormID value

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
    
 CASE 
		 WHEN cf.strReportCode like 'SEA%'
		 THEN 3
		 ELSE cs.CoachingReason_ID	
 END [CoachingReasonID],
 
 CASE 
		 WHEN cf.strReportCode like 'SEA%'				
         THEN [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3))
         ELSE cs.SubCoachingReason_ID	
 END [SubCoachingReasonID],
 
  CASE 
		 WHEN cf.strReportCode like 'SEA%'		
         THEN  cs.[CoachReason_Current_Coaching_Initiatives]
         ELSE cs.Value 
 END [Value]
 
    FROM [EC].[Generic_Coaching_Stage] cs JOIN  [EC].[Coaching_Log] cf      
    ON cs.[Report_ID] = cf.[numReportID] AND  cs.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Generic



GO





--***************************************************************************
--2. [EC].[sp_SelectCoaching4Contact] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectCoaching4Contact' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Contact]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Jourdain Augustin
--	Create Date:	   6/10/2013
--	Description: 	   This procedure queries db for feed records to send out mail
-- Last Updated By: Susmitha Palacherla
-- last Modified date: 7/15/2016
-- Modified per TFS 644 to add extra attribute 'OMRARC' to support IAE, IAT Feeds -- 09/21/2015
-- Modified per TFS 2283 to add Source 210 for Training feed -- 3/22/2016
-- Modified per TFS 2268 to add Source 231 for CTC Quality Other feed - 6/15/2016
-- Modified per TFS 3179 & 3186 to add Source 218 for HFC & KUD Quality Other feeds - 7/15/2016
-- Modified to make allow more ad-hoc loads by adding more values to the file. TFS 4916 -12/9/2016
-- --	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Contact]
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(30),
@strFormStatus2 nvarchar(30),
@intSource1 int,
@intSource2 int,
@strFormType nvarchar(30),
@strFormMail nvarchar (30)

 --Set @strFormStatus1 = 'Completed'
 --Set @strFormStatus2 = 'Inactive'


 --Set @strFormType = 'Indirect'
--Set @strFormMail = 'jourdain.augustin@gdit.com'
 
SET @nvcSQL = 'SELECT   cl.CoachingID	numID	
		,cl.FormName	strFormID
		,s.Status		strFormStatus
		,eh.Emp_Email	strCSREmail
		,eh.Sup_Email	strCSRSupEmail
		,CASE WHEN cl.[strReportCode] like ''LCS%'' 
		 THEN [EC].[fn_strEmpEmailFromEmpID](cl.[MgrID])
		 ELSE eh.Mgr_Email END	strCSRMgrEmail
		,so.SubCoachingSource	strSource
		,eh.Emp_Name	strCSRName
		,so.CoachingSource	strFormType
		,cl.SubmittedDate	SubmittedDate
		,cl.CoachingDate	CoachingDate
		,cl.EmailSent	EmailSent
		,cl.sourceid
		,cl.isCSE
		,mo.Module
		,CASE WHEN SUBSTRING(cl.strReportCode,1,3)in (''IAT'',''IAE'')
		THEN 1 ELSE 0 END OMRARC	
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK)
ON eh.Emp_ID = cl.EMPID JOIN [EC].[DIM_Status] s 
ON s.StatusID = cl.StatusID JOIN [EC].[DIM_Source] so
ON so.SourceID = cl.SourceID JOIN [EC].[DIM_Module] mo
ON mo.ModuleID = cl.ModuleID 
WHERE S.Status not in (''Completed'',''Inactive'')
AND cl.strReportCode is not NULL
AND cl.EmailSent = ''False''
AND ((s.status =''Pending Acknowledgement'' and eh.Emp_Email is NOT NULL and eh.Sup_Email is NOT NULL and eh.Sup_Email <> ''Unknown'')
OR (s.Status =''Pending Supervisor Review'' and eh.Sup_Email is NOT NULL and eh.Sup_Email <> ''Unknown'')
OR ((s.Status =''Pending Manager Review'' OR s.Status =''Pending Sr. Manager Review'') and eh.Mgr_Email is NOT NULL and eh.Mgr_Email <> ''Unknown'')
OR (s.Status =''Pending Employee Review'' and eh.Emp_Email is NOT NULL and eh.Emp_Email <> ''Unknown''))
AND LEN(cl.FormName) > 10
Order By cl.SubmittedDate DESC'
--and [strCSREmail] = '''+@strFormMail+'''
EXEC (@nvcSQL)	
	    
--PRINT @nvcsql	    
	    
END --sp_SelectCoaching4Contact




GO




PRINT (' End Stored Procedures for this release...')

/****************************************************************************
																	
				
*****************************************************************************
																	
					Cleanup	
										
*****************************************************************************/

PRINT ('  No Special Cleanup this release...')

/*-----------------------------       All Done!     ----------------------------------------*/
PRINT ('  RunOnce Script has completed...')



