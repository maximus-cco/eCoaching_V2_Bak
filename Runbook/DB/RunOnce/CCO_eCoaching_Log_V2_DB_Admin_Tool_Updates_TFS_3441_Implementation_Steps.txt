
/*

TFS 3441  - Admin Tool Updates

Implement in eCoaching database in target environment.


Dev - eCoahingDev
Test - eCoachingTest
Prod - eCoaching



***************************************

PROCEDURES

1. [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 
2. [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]
3.[EC].[sp_AT_Select_ReassignFrom_Users] 
4.[EC].[sp_AT_Select_ReassignTo_Users] 
5.[EC].[sp_AT_Select_Logs_Reassign] 
6.[EC].[sp_InactivateCoachingLogsForTerms] 

OPEN FILE in SSMS WINDOW POINTING TO ECOACHING DB IN 
INSTALLATION ENVIRONMENT AND RUN WITH NOTHING SELECTED.

****************************************/


--1. [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Coaching_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO









--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Coaching logs for Inactivation or Reactivation.
--  Last Modified By: Susmitha Palacherla
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--  Updated to remove Mgr site restriction for non admins, TFS 3091 - 07/05/2016
--  Updated to add Employees in Leave status for Inactivation, TFS 3441 - 09/07/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@intRequesterSiteID int,
@strConditionalSite nvarchar(100),
@strATCoachAdminUser nvarchar(10),
@dtmDate datetime,
@nvcSQL nvarchar(max)

SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@strRequesterID)
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@strRequesterID) 

SET @strConditionalSite = ' '
IF @strATCoachAdminUser <> 'YES'

BEGIN
	SET @strConditionalSite = ' AND Fact.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+''' '
END	

IF @strActionin = N'Inactivate'

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID  
 WHERE Fact.StatusID NOT IN (1,2)
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active NOT IN  (''T'',''D'')'
 + @strConditionalSite 
 + ' AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'

ELSE 

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy]Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID JOIN (Select * FROM
 [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
 WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname
 WHERE Fact.StatusID = 2
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active = ''A''
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'
 
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Employees_Coaching_Inactivation_Reactivation




GO



--***************************************


--2. [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Warning_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Warning logs for Inactivation or Reactivation.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--  Updated to add Employees in Leave status for Inactivation, TFS 3441 - 09/07/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@strRequesterSiteID int,
@dtmDate datetime,
@nvcSQL nvarchar(max)

SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)



IF @strActionin = N'Inactivate'

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID  
 WHERE Fact.StatusID = 1
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active NOT IN  (''T'',''D'')
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'

ELSE 

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy]Emp JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID JOIN (Select * FROM
 [EC].[AT_Warning_Inactivate_Reactivate_Audit]
 WHERE LastKnownStatus = 1) Aud
 ON Aud.FormName = Fact.Formname
 WHERE Fact.StatusID = 2
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
  AND Emp.Active = ''A''
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'
 
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Employees_Warning_Inactivation_Reactivation

GO








--***************************************

--3.[EC].[sp_AT_Select_ReassignFrom_Users] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignFrom_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that currently have 
--  ecls assigned to them. Same module and site as the logged in user performing the reassign.
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
-- Updated to add Employees in Leave status for Reassignment and 
-- removed Active check for reassigned and review managers per TFS 3441 - 09/07/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users] 
@strRequesterin nvarchar(30), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
@intRequesterSiteID int,
@strATAdminUser nvarchar(10),
@strConditionalSelect nvarchar(100),
@strConditionalSite nvarchar(100),
@strConditionalRestrict nvarchar(100),
@dtmDate datetime

SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @strATAdminUser = EC.fn_strCheckIfATSysAdmin(@nvcRequesterID) 

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.SUP_ID UserID, eh.SUP_Name UserName '
SET @strConditionalRestrict = N'AND eh.SUP_ID <> '''+@nvcRequesterID+''' ' 
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.MGR_ID UserID, eh.MGR_Name UserName '
SET @strConditionalRestrict = N'AND eh.MGR_ID <> '''+@nvcRequesterID+''''
END
		
SET @strConditionalSite = ' '
IF @strATAdminUser <> 'YES'

BEGIN
	SET @strConditionalSite = ' AND cl.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+''' '
END			 

-- Non reassigned and Non LCS eCLs
-- UNION
-- Reassigned ecls
-- UNION
-- Non reassigned LCS ecls

SET @nvcSQL = @strConditionalSelect +
'FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ' +
' ON cl.EmpID = eh.Emp_ID 
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND CL.ReassignCount = 0
AND NOT (CL.statusid = 5 AND ISNULL(CL.strReportCode,'' '') like ''LCS%'')'
+ @strConditionalSite 
+ @strConditionalRestrict
+ 'AND (eh.SUP_Name is NOT NULL AND eh.MGR_Name is NOT NULL)
AND eh.Active NOT IN  (''T'',''D'')

UNION 


SELECT DISTINCT rm.Emp_ID UserID, rm.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] rm JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.ReassignedToID = rm.Emp_ID JOIN [EC].[Employee_Hierarchy] eh
ON eh.Emp_ID = cl.EmpID
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.ReassignedToID is not NULL 
AND (cl.ReassignCount < 2 and cl.ReassignCount <> 0)
AND (rm.Emp_Name is NOT NULL AND rm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND eh.Active NOT IN  (''T'',''D'')

UNION 

SELECT DISTINCT rm.Emp_ID UserID, rm.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] rm JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.MgrID = rm.Emp_ID JOIN [EC].[Employee_Hierarchy] eh
ON eh.Emp_ID = cl.EmpID
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.MgrID is not NULL
AND cl.strReportCode like ''LCS%''
AND CL.ReassignCount = 0
AND (rm.Emp_Name is NOT NULL AND rm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND eh.Active NOT IN  (''T'',''D'')
Order By UserName'

--PRINT @nvcSQL		
EXEC (@nvcSQL)


End --sp_AT_Select_ReassignFrom_Users

GO






--***************************************


--4.[EC].[sp_AT_Select_ReassignTo_Users] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignTo_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that an ECL
-- can be reassigned to. users at the same level and site as the original owner. 
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
-- Updated to add Employees in Leave status for Reassignment and 
-- added Active check for reassigned to supervisors and managers per TFS 3441 - 09/07/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users] 
@strRequesterin nvarchar(30),@strFromUserIdin nvarchar(10), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
--@nvcRequesterJobCode Nvarchar(30),
--@intModuleID INT,
@intRequesterSiteID int,
@intFromUserSiteID int,
@strSelect nvarchar(1000),
@dtmDate datetime

--cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
--SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @intFromUserSiteID = EC.fn_intSiteIDFromEmpID(@strFromUserIdin)

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))


BEGIN
SET @nvcSQL = N'SELECT DISTINCT sh.EMP_ID UserID, sh.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy]sh
ON eh.SUP_ID = sh.EMP_ID
WHERE cl.SiteID = '''+CONVERT(NVARCHAR,@intFromUserSiteID)+'''
AND (eh.SUP_Name is NOT NULL AND eh.SUP_Name <> ''Unknown'')
AND eh.SUP_ID <> '''+@strFromUserIdin+''' 
AND eh.Active NOT IN (''T'',''D'')
AND sh.Active = ''A''
Order By UserName'
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN

SET @nvcSQL = N'SELECT DISTINCT mh.EMP_ID UserID, mh.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy]mh
ON eh.MGR_ID = mh.EMP_ID
WHERE cl.SiteID = '''+CONVERT(NVARCHAR,@intFromUserSiteID)+'''
AND (eh.MGR_Name is NOT NULL AND eh.MGR_Name <> ''Unknown'')
AND eh.MGR_ID <> '''+@strFromUserIdin+'''
AND eh.Active NOT IN (''T'',''D'')
AND mh.Active = ''A''
Order By UserName'
END
			 

--PRINT @nvcSQL		
EXEC (@nvcSQL)


End --sp_AT_Select_ReassignTo_Users





GO




--***************************************


--5.[EC].[sp_AT_Select_Logs_Reassign] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Logs_Reassign' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Logs_Reassign]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Coaching or Warning logs 
--  in the appropriate Status for the Action for the selected Employee.
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--  Updated to add Employees in Leave status for Reassignment per TFS 3441 - 09/07/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Logs_Reassign] 
@istrOwnerin nvarchar(10), @intStatusIdin INT, @intModuleIdin INT
AS

BEGIN
DECLARE	
@strConditionalWhere nvarchar(100),
@nvcSQL nvarchar(max)


IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Sup_ID = '''+@istrOwnerin+''' '
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Mgr_ID = '''+@istrOwnerin+''' '
END

-- Check for 3 scenarios
--1. Original hierarchy owner
--2. Reassigned owner
--3. Review owner for LCS

SET @nvcSQL = 'SELECT cfact.CoachingID,  
        cfact.FormName strFormName,
		eh.Emp_Name	strEmpName,
		eh.Sup_Name	strSupName,
	    CASE
		 WHEN cfact.[strReportCode] like ''LCS%'' AND cfact.[MgrID] <> eh.[Mgr_ID]
		 THEN [EC].[fn_strEmpNameFromEmpID](cfact.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE eh.Mgr_Name END strMgrName,
		 sh.Emp_Name strSubmitter,
		s.Status,
		cfact.SubmittedDate strCreatedDate 
     FROM [EC].[Coaching_Log]cfact WITH(NOLOCK) JOIN 
     
     (SELECT fact.CoachingID
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] eh
	 ON [Fact].[EMPID] = [eh].[Emp_ID]
	 AND NOT(fact.statusid = 5 AND ISNULL(fact.strReportCode,'' '') LIKE ''LCS%'')'
	 + @strConditionalWhere +
	 'AND fact.ReassignCount = 0
	
	
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[ReassignedToID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND (fact.ReassignCount < 2 and fact.ReassignCount <> 0)
	 AND fact.ReassignedToID is not NULL
	 
	 
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[MgrID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND fact.strReportCode like ''LCS%''
	 AND fact.ReassignCount = 0
	 )Selected 
	 
	 ON Selected.CoachingID = cfact.CoachingID JOIN [EC].[Employee_Hierarchy] eh
	 ON [cfact].[EMPID] = [eh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] sh
	 ON [cfact].[SubmitterID] = [sh].[Emp_ID]JOIN [EC].[DIM_Status] s
	 ON [cfact].[StatusID] = [s].[StatusID]
	 
	WHERE cfact.StatusId = '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
	AND cfact.Moduleid = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
  	AND eh.Active NOT IN  (''T'',''D'') 
   ORDER BY cfact.FormName DESC'
   
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Logs_Reassign
GO






--***************************************

--6. [EC].[sp_InactivateCoachingLogsForTerms] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateCoachingLogsForTerms' 
)
   DROP PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    04/09/2014
-- Description:	Inactivate Coaching logs for Termed Employees.
-- Last Modified By: Susmitha Palacherla
-- Revision History:
-- Modified per TFS 549 - To Inactivate Surveys for termed Employees and Expired Surveys.
-- Surveys expire 5 days from Creation date - 09/04/2015
-- Admin tool setup per TFS 1709-  To log Inactivations in audit tables - 4/27/12016
-- Updated to not Inactivate Warning logs for termed Employees per TFS 3441 - 09/08/2016
-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms] 
AS
BEGIN

 DECLARE @EWFMSiteCount INT
 
 -- Inactivate Warnings logs for Termed Employees


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION

BEGIN TRY

-- Log records being inactivated to Audit table and 
-- Inactivate Warning logs for Termed Employees
BEGIN
INSERT INTO [EC].[AT_Warning_Inactivate_Reactivate_Audit]
           ([WarningID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT W.WarningID
		 ,W.FormName
		 ,W.StatusID
		 ,'Inactivate'
		 ,GetDate()
	 	 ,'999998'
		 ,'Employee Deceased'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpLanID] = H.[Emp_LanID]
AND W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] = 'D'
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2	 
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Warning_Log]
SET [StatusID] = 2
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpLanID] = H.[Emp_LanID]
AND W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] = 'D'
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Inactivate Surveys for Termed Employees

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Employee Not Active'
FROM [EC].[Survey_Response_Header]SH  JOIN [EC].[Employee_Hierarchy]H
ON SH.[EmpLanID] = H.[Emp_LanID]
AND SH.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND SH.[Status] = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


 -- Inactivate Expired Survey records (5 days after creation date)

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Survey Expired'
WHERE DATEDIFF(DAY, [CreatedDate],  GETDATE())>= 5
AND [Status]  = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



--Log records being inactivated to Audit table and 
--Inactivate Coaching logs for Termed Employees

BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee Inactive'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)	 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for Employees on Extended Absence


BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee on EA'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2) 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for CSRs and Sup Module eCLs for Employees not arriving in eWFM feed.


SET @EWFMSiteCount = (SELECT count(DISTINCT Emp_Site_Code) FROM [EC].[EmpID_To_SupID_Stage])
IF @EWFMSiteCount >= 14



BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee not in feed'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END
		 

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END


COMMIT TRANSACTION
END TRY

  BEGIN CATCH
  ROLLBACK TRANSACTION
  END CATCH

END  -- [EC].[sp_InactivateCoachingLogsForTerms]






GO






--***************************************