/*
sp_Dashboard_Director_Site_Completed(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Completed' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Completed]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Completed logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Completed] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] = 1 '


IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND cl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
   	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_Dashboard_Director_Site_Completed



GO





/*
sp_Dashboard_Director_Site_Completed_Count(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Completed_Count' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Completed_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Completed logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Completed_Count] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime

AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max)


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] = 1 '


IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND cl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
   	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
   ) x 
) SELECT count(strFormID) FROM TempMain';




EXEC (@nvcSQL)	
--PRINT @nvcSQL

    
END -- sp_Dashboard_Director_Site_Completed_Count


GO




/*
sp_Dashboard_Director_Site_Pending(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Pending' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Pending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Pending logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/28/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Pending] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@where nvarchar(max),
@nvcSQL nvarchar(max),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)

SET @NewLineChar = CHAR(13) + CHAR(10)

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] NOT IN (-1,1,2) '



IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND cl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
   	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_Dashboard_Director_Site_Pending


GO





/*
sp_Dashboard_Director_Site_Pending_Count(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Pending_Count' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Pending_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Pending logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/28/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Pending_Count] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10)


AS


BEGIN


SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@where nvarchar(max),
@nvcSQL nvarchar(max)

SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] NOT IN (-1,1,2) '


IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND cl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
   	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
   ) x 
) SELECT count(strFormID) FROM TempMain';




EXEC (@nvcSQL)	
--PRINT @nvcSQL

    
END -- sp_Dashboard_Director_Site_Pending_Count

GO



/*
sp_Dashboard_Director_Site_Warning(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Warning' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Warning]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Active Warning logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Warning] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [wl].[FormName] strFormID
      ,[wl].[WarningID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[wl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID 
	WHERE wl.StatusID = 1
	AND wl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND wl.Active = 1
	AND wl.siteID <> -1
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
	AND convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [wl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromWarningID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromWarningID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromWarningID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_Dashboard_Director_Site_Warning



GO





/*
sp_Dashboard_Director_Site_Warning_Count(01).sql
Last Modified Date: 05/28/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Site_Warning_Count' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Site_Warning_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Active Warning logs at a given site 
--  For Employees within the Director's Hierarchy.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/28/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Site_Warning_Count] 
@intSiteIdin int,
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime

AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(10),
@strEDate nvarchar(10)


SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [wl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID 
	WHERE wl.StatusID = 1
	AND wl.SiteID = '''+CONVERT(NVARCHAR,@intSiteIdin)+'''
	AND wl.Active = 1
	AND wl.siteID <> -1
	AND (eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl3_ID = '''+ @nvcUserIdin +''')
	AND convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [wl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
) SELECT count(strFormID) FROM TempMain';


EXEC (@nvcSQL)	
--PRINT @nvcSQL

	    
END -- sp_Dashboard_Director_Site_Warning_Count


GO





/*
sp_Dashboard_Director_Summary_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Summary_Count' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Summary_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--  Description: Retrieves Count of Pending, MTD Completed and Active Warning Logs to be displayed
--  on the Director Dashboard.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Summary_Count] 
@nvcEmpID nvarchar(10),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN
DECLARE	
@nvcEmpRole nvarchar(40),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSQL nvarchar(max)


SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcEmpID)

IF @nvcEmpRole <> 'Director' RETURN 1

SET @nvcSQL = '
	  --SELECT si.siteid, si.City, 
			--   COALESCE(b.PendingCount, 0 ) PendingCount,
			--   COALESCE(c.CompletedCount, 0 )CompletedCount,
			--   COALESCE(d.WarningCount, 0 ) WarningCount
	  -- FROM (SELECT DISTINCT City FROM EC.DIM_Site
	  -- WHERE isActive = 1 
	  -- AND SiteID  <> -1) si

	  	  SELECT si.siteid, si.City, 
				 COALESCE(b.PendingCount, 0 ) PendingCount,
				 COALESCE(c.CompletedCount, 0 )CompletedCount,
				 COALESCE(d.WarningCount, 0 ) WarningCount
	    FROM 
		(SELECT DISTINCT si.siteid, eh.Emp_Site City
		FROM EC.Employee_Hierarchy eh JOIN EC.DIM_Site si
        ON eh.Emp_Site = si.City
        WHERE (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + ''' OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')) si

	    LEFT JOIN
	    (
	 		   SELECT site.City, Count(CoachingID) AS PendingCount
			   FROM EC.Coaching_Log cl WITH (NOLOCK) JOIN EC.DIM_Site site
			   ON site.SiteID = cl.SiteID  JOIN EC.Employee_Hierarchy eh
			   ON cl.EmpID = eh.Emp_ID 	
			   WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''
			   AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
			   AND (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + ''' OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')
			   AND cl.StatusID NOT IN (1,2)
			   AND NOT (cl.siteID = -1 OR cl.StatusID = -1)
			   GROUP BY site.City) b ON si.City = b.City
       LEFT JOIN
	   (
		   SELECT site.City, Count(CoachingID) AS CompletedCount
		   FROM EC.Coaching_Log cl WITH (NOLOCK) JOIN EC.DIM_Site site
		   ON site.SiteID = cl.SiteID JOIN EC.Employee_Hierarchy eh
           ON cl.EmpID = eh.Emp_ID
		   WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''
		   AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
		   AND (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + '''OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')
		   AND cl.StatusID = 1
		   AND NOT (cl.siteID = -1 OR cl.StatusID = -1)
		   GROUP BY site.City) c ON si.City = c.City
      LEFT JOIN
	  (
	  	     SELECT site.City, Count(WarningID) AS WarningCount
			     FROM  EC.Warning_Log wl WITH (NOLOCK) JOIN EC.DIM_Site site
				 ON site.SiteID = wl.SiteID JOIN EC.Employee_Hierarchy eh
                 ON wl.EmpID = eh.Emp_ID
		         WHERE convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
			     AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
				 AND (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + '''OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')
				 AND wl.siteID <> -1 
				 GROUP BY site.City) d ON si.City = d.City
     ORDER BY si.City'

		
EXEC (@nvcSQL)
--PRINT @nvcSQL
 
	    
If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_Dashboard_Director_Summary_Count



GO



/*
sp_Dashboard_Director_Summary_Count_ByStatus(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Director_Summary_Count_ByStatus' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Director_Summary_Count_ByStatus]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--  Description: Retrieves Count of Logs by Status to be displayed
--  on the Director Dashboard.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Director_Summary_Count_ByStatus] 
@nvcEmpID nvarchar(10),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN
DECLARE	
@nvcEmpRole nvarchar(40),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSQL nvarchar(max)

SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)
 
 -- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcEmpID)

IF @nvcEmpRole <> 'Director' RETURN 1

SET @nvcSQL = ';WITH IncludeStatus AS
                 (SELECT DISTINCT  StatusID, Status
				 FROM EC.DIM_Status
				 WHERE statusID NOT IN (-1,2)
				 ),

                  Counts AS
				 (SELECT si.City, st.Status AS Status, Count(CoachingID) AS LogCount
			     FROM EC.DIM_Status st LEFT JOIN EC.Coaching_Log cl WITH (NOLOCK) 
				 ON st.StatusID = cl.StatusID JOIN EC.DIM_Site si 
				 ON si.SiteID = cl.SiteID JOIN EC.Employee_Hierarchy eh
			     ON cl.EmpID = eh.Emp_ID
			     WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''
			     AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
                 AND(eh.SrMgrLvl2_ID = '''+ @nvcEmpID + '''OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')
				 AND cl.StatusID not in (1,2)
				 AND NOT (cl.siteID = -1 OR cl.StatusID = -1)
				 GROUP BY si.City, st.Status
				 			               
			     UNION

				 SELECT si.City, st.Status AS Status, Count(WarningID) AS LogCount
			     FROM EC.DIM_Site si JOIN EC.Warning_Log wl WITH (NOLOCK) 
				 ON si.SiteID = wl.SiteID JOIN EC.DIM_STATUS st
				 ON wl.StatusID = st.StatusID JOIN EC.Employee_Hierarchy eh
			     ON wl.EmpID = eh.Emp_ID
				 WHERE convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
			     AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
                 AND (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + '''OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + ''')
				 AND wl.StatusID = 1
				 AND wl.siteID <> -1 
				 GROUP BY si.City, st.Status)


				 SELECT DISTINCT site.City AS Site, 
				 CASE WHEN st.status = ''Completed'' THEN ''Active Warnings'' ELSE st.status END AS CountType, COALESCE(wc.LogCount,0) AS LogCount
				 FROM 
				 (SELECT DISTINCT eh.Emp_Site City
		         FROM EC.Employee_Hierarchy eh JOIN EC.DIM_Site si
                 ON eh.Emp_Site = si.City
		         WHERE (eh.SrMgrLvl2_ID = '''+ @nvcEmpID + ''' OR eh.SrMgrLvl3_ID = '''+ @nvcEmpID + '''))  site CROSS JOIN IncludeStatus st LEFT JOIN Counts wc
				 ON site.City = wc.City  
				 AND st.Status = wc.status 
				 ORDER BY site.City'

		
EXEC (@nvcSQL)
	--PRINT @nvcSQL

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_Dashboard_Director_Summary_Count_ByStatus




GO




/*
sp_Dashboard_Populate_Filter_DropDowns(01).sql
Last Modified Date: 06/12/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Populate_Filter_DropDowns' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Populate_Filter_DropDowns]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	6/12/2018
--	Description: *	This procedure calls the appropriate sps 
--  to populate the filter drop downs given the logged in user ID and type of drop down.
--  Created during Myt dashboard move to new architecture - TFS 7137 - 6/12/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Populate_Filter_DropDowns] 
@nvcUserIdin nvarchar(10),
@nvcWhichDropDown nvarchar(20)
AS


BEGIN
DECLARE	
@nvcEmpRole nvarchar(40),
@nvcSQL nvarchar(max)




OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcUserIdin)
--PRINT @nvcEmpRole

IF @nvcEmpRole = 'Supervisor'
BEGIN

		IF @nvcWhichDropDown = N'Manager'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Supervisor'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Employee'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR] @nvcUserIdin 
		END

END

IF @nvcEmpRole in ('Manager', 'SrManager' )
BEGIN

		IF @nvcWhichDropDown = N'Manager'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Supervisor'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Employee'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted] @nvcUserIdin
		END

END

IF @nvcEmpRole NOT IN ('Supervisor', 'Manager', 'SrManager')
BEGIN

		IF @nvcWhichDropDown = N'Manager'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Supervisor'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted] @nvcUserIdin
		END

		IF @nvcWhichDropDown = N'Employee'
		BEGIN 
		EXEC [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted] @nvcUserIdin
		END

END

END --sp_Dashboard_Populate_Filter_DropDowns

GO




/*
sp_Dashboard_Summary_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Summary_Count' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Summary_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--  Description: Retrieves Count of Logs based on user Job Role.
--  on the MyDashboard Page.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Summary_Count] 
@nvcEmpID nvarchar(10)

AS

BEGIN
DECLARE	
@nvcEmpRole nvarchar(40),
@bitMyPending bit,
@bitMyCompleted bit,
@bitMyTeamPending bit,
@bitMyTeamCompleted bit,
@bitMyTeamWarning bit,
@bitMySubmission bit,
@intMyPending int,
@intMyCompleted int,
@intMyTeamPending int,
@intMyTeamCompleted int,
@intMyTeamWarning int,
@intMySubmission int,
@SelectList nvarchar(2000),
@nvcSQL nvarchar(max)




OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcEmpID)



SET @bitMyPending = (SELECT [MyPending] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
SET @bitMyCompleted = (SELECT [MyCompleted] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
SET @bitMyTeamPending = (SELECT [MyTeamPending] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
SET @bitMyTeamCompleted = (SELECT [MyTeamcompleted] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
SET @bitMyTeamWarning = (SELECT [MyTeamWarning] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
SET @bitMySubmission = (SELECT [MySubmission] FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = @nvcEmpRole)
 

SET @SelectList = '' 


IF @bitMyPending = 1
BEGIN

IF @nvcEmpRole in ('CSR', 'ARC', 'Employee')
BEGIN
SET @intMyPending = (SELECT COUNT(cl.CoachingID)
                 FROM EC.Coaching_Log cl WITH (NOLOCK) JOIN EC.Employee_Hierarchy eh WITH (NOLOCK)
				 ON cl.EmpID = eh.Emp_ID
                 WHERE cl.EmpID = @nvcEmpID  AND StatusID in (3,4))


END


IF @nvcEmpRole  = 'Supervisor'
BEGIN
SET @intMyPending = (SELECT COUNT(cl.CoachingID)
                 FROM EC.Coaching_Log cl WITH (NOLOCK) JOIN EC.Employee_Hierarchy eh WITH (NOLOCK)
				 ON cl.EmpID = eh.Emp_ID
                 WHERE ((cl.EmpID = @nvcEmpID  AND StatusID in (3,4))
				 OR (cl.ReassignCount= 0 AND eh.Sup_ID = @nvcEmpID  AND StatusID in (3,6,8)) 
				 OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = @nvcEmpID AND  StatusID in (3,6,8))))
			
END

IF @nvcEmpRole in ( 'Manager', 'SrManager')
BEGIN
SET @intMyPending = (SELECT COUNT(cl.CoachingID)
                 FROM EC.Coaching_Log cl WITH (NOLOCK) JOIN EC.Employee_Hierarchy eh WITH (NOLOCK)
				 ON cl.EmpID = eh.Emp_ID
                 WHERE ((cl.EmpID = @nvcEmpID  AND StatusID in (3,4))
				 OR (ISNULL([cl].[strReportCode], ' ') NOT LIKE 'LCS%' AND cl.ReassignCount= 0 AND eh.Sup_ID = @nvcEmpID  AND cl.[StatusID] in (3,5,6,8) 
			     OR (ISNULL([cl].[strReportCode], ' ') NOT LIKE 'LCS%' AND cl.ReassignCount= 0 AND  eh.Mgr_ID =  @nvcEmpID  AND cl.[StatusID] in (5,7,9)) 
			     OR ([cl].[strReportCode] LIKE 'LCS%' AND [ReassignCount] = 0 AND cl.[MgrID] = @nvcEmpID AND [cl].[StatusID]= 5) )
			     OR (cl.ReassignCount <> 0 AND cl.ReassignedToID =  @nvcEmpID AND  cl.[StatusID] in (5,7,9))))

END

SET @SelectList = @SelectList + ' UNION
SELECT ''My Pending'' AS CountType, '''+ CONVERT(NVARCHAR,@intMyPending)+ ''' AS LogCount'
END



IF @bitMyCompleted = 1

BEGIN
SET @intMyCompleted = (SELECT COUNT(CoachingID) FROM EC.Coaching_Log WITH (NOLOCK)
                       WHERE EmpID = @nvcEmpID  AND StatusID = 1 AND EmpID <> '999999')

SET @SelectList = @SelectList + ' UNION
SELECT ''My Completed'' AS CountType, '''+ CONVERT(NVARCHAR,@intMyCompleted)+ ''' AS LogCount '
END



IF @bitMyTeamPending = 1
BEGIN
SET @intMyTeamPending = (SELECT COUNT(cl.CoachingID)
						 FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK)
						 ON cl.EmpID = eh.Emp_ID JOIN [EC].[DIM_Status] s
						 ON cl.StatusID = s.StatusID 
						 WHERE s.Status like 'Pending%'
						 AND (eh.Sup_ID = @nvcEmpID OR eh.Mgr_ID = @nvcEmpID OR eh.SrMgrLvl1_ID = @nvcEmpID OR eh.SrMgrLvl2_ID = @nvcEmpID))


SET @SelectList = @SelectList + ' UNION
SELECT ''My Team''''s Pending'' AS CountType, '''+ CONVERT(NVARCHAR,@intMyTeamPending)+ ''' AS LogCount'
END


IF @bitMyTeamCompleted = 1
BEGIN
SET @intMyTeamCompleted = (SELECT COUNT(cl.CoachingID)
						   FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK)
						   ON cl.EmpID = eh.Emp_ID 
						   WHERE cl.StatusID = 1
						   AND (eh.Sup_ID = @nvcEmpID OR eh.Mgr_ID = @nvcEmpID OR eh.SrMgrLvl1_ID = @nvcEmpID OR eh.SrMgrLvl2_ID = @nvcEmpID))
						  


SET @SelectList = @SelectList + ' UNION
SELECT ''My Team''''s Completed'' AS CountType, '''+ CONVERT(NVARCHAR,@intMyTeamCompleted)+ ''' AS LogCount'
END


IF @bitMyTeamWarning = 1
BEGIN
SET @intMyTeamWarning = (SELECT COUNT(wl.WarningID)
					 FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Warning_Log] wl WITH (NOLOCK)
					 ON wl.EmpID = eh.Emp_ID 
					 WHERE wl.StatusID = 1
			         AND wl.siteID <> -1
					 AND (eh.Sup_ID = @nvcEmpID OR eh.Mgr_ID = @nvcEmpID OR eh.SrMgrLvl1_ID = @nvcEmpID OR eh.SrMgrLvl2_ID = @nvcEmpID)) 


SET @SelectList = @SelectList + ' UNION
SELECT ''My Team''''s Warnings'' AS CountType, '''+ CONVERT(NVARCHAR,@intMyTeamWarning)+ ''' AS LogCount '
END


IF @bitMySubmission = 1
BEGIN
SET @intMySubmission = (SELECT COUNT(CoachingID) FROM EC.Coaching_Log WITH (NOLOCK)
						WHERE SubmitterID = @nvcEmpID AND SubmitterID <> '999999'
						AND StatusID <> 2)


SET @SelectList = @SelectList + ' UNION
SELECT ''My Submissions'' AS CountType, '''+ CONVERT(NVARCHAR,@intMySubmission)+ ''' AS LogCount '
END

  SET @nvcSQL = 
' WITH TempMain 
AS 
(
  SELECT DISTINCT x.CountType, x.LogCount 
  FROM 
  (
SELECT ''Count Type'' AS CountType, '''+ CONVERT(NVARCHAR,0)+ ''' AS LogCount '
+ @SelectList + ' ) x 
),
CountDisplay
AS 
(
SELECT CountType, SortOrder FROM 
(SELECT CASE WHEN [MyPending] = 1 THEN ''My Pending'' ELSE NULL END CountType, 01 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ '''
UNION
 SELECT	CASE WHEN [MyCompleted] = 1 THEN ''My Completed'' ELSE NULL END CountType, 04 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ '''
UNION
SELECT	CASE WHEN [MyTeamPending] = 1 THEN ''My Team''''s Pending'' ELSE NULL END CountType, 02 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ '''
UNION
SELECT	CASE WHEN [MyTeamcompleted] = 1 THEN ''My Team''''s Completed'' ELSE NULL END CountType, 03 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ '''
UNION
SELECT	CASE WHEN [MyTeamWarning] = 1 THEN ''My Team''''s Warnings'' ELSE NULL END CountType, 05 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ '''
UNION
SELECT	CASE WHEN [MySubmission]= 1 THEN ''My Submissions'' ELSE NULL END CountType, 06 SortOrder
FROM [EC].[UI_Dashboard_Summary_Display] WHERE [RoleName] = '''+ @nvcEmpRole+ ''') Display 
WHERE CountType IS NOT NULL
 )

SELECT ct.CountType, ISNULL(LogCount, 0)LogCount 
FROM CountDisplay ct LEFT JOIN TempMain tm
ON ct.[CountType] =tm.CountType
ORDER BY ct.SortOrder'
	
EXEC (@nvcSQL)	
--PRINT @nvcSQL
	
-- Close Symmetric key
END -- sp_Dashboard_Summary_Count






GO



/*
sp_Dashboard_Summary_Count_ByStatus(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Dashboard_Summary_Count_ByStatus' 
)
   DROP PROCEDURE [EC].[sp_Dashboard_Summary_Count_ByStatus]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--  Description: Retrieves Count of Logs by Status to be displayed
--  on the My Dashboard.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Dashboard_Summary_Count_ByStatus] 
@nvcEmpID nvarchar(10)

AS

BEGIN
DECLARE	
@nvcEmpRole nvarchar(40),
@nvcSQL nvarchar(max)




OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcEmpID)
--PRINT @nvcEmpRole

 

--3 - Pending Acknowledgement
--4 - Pending Employee Review
--5 - Pending Manager Review
--6 - Pending Supervisor Review
--7 - Pending Sr. Manager Review
--8 - Pending Quality Lead Review
--9 - Pending Deputy Program Manager Review


IF @nvcEmpRole in ('CSR', 'ARC', 'Employee')

SET @nvcSQL = ' ;WITH SelectedStatus AS
				(SELECT StatusID, Status FROM EC.DIM_Status WHERE StatusID in (3,4)),
			
               
			    SelectedLogs AS
                (SELECT StatusID, Count(cl.CoachingID) LogCount
				FROM [EC].[Coaching_Log] cl WITH(NOLOCK)  
			    WHERE   (cl.[EmpID] = ''' + @nvcEmpID + '''  AND cl.[StatusID] in (3,4))
		   	    GROUP BY [cl].[StatusID])

				SELECT s.Status, COALESCE(cl.LogCount,0) AS LogCount
				FROM SelectedStatus s left join SelectedLogs cl
				ON s.statusid = cl.StatusID '



IF @nvcEmpRole = 'Supervisor'

SET @nvcSQL = ';WITH SelectedStatus AS
				(SELECT StatusID, Status FROM EC.DIM_Status WHERE StatusID in (3,4,6,8)),

                SelectedLogs AS
			   (SELECT [cl].[StatusID], Count(CoachingID) LogCount
               FROM [EC].[Coaching_Log] cl WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] eh 
			   ON eh.[EMP_ID] = cl.[EmpID] 
			   WHERE ((cl.[EmpID] = ''' + @nvcEmpID + '''  AND cl.[StatusID] in (3,4))
		       OR ((cl.[ReassignCount]= 0 AND eh.[Sup_ID] = ''' + @nvcEmpID + ''' AND cl.[StatusID] in (3,6,8)))
		       OR (cl.[ReassignedToId] = ''' + @nvcEmpID + '''  AND [ReassignCount] <> 0 AND cl.[StatusID]in (3,6,8)))
		       AND cl.[EmpID]  <> ''999999''
			   GROUP BY [cl].[StatusID])
			   
			   	SELECT s.Status, COALESCE(cl.LogCount,0) AS LogCount
				FROM SelectedStatus s left join SelectedLogs cl
				ON s.statusid = cl.StatusID '




IF @nvcEmpRole in ( 'Manager', 'SrManager')


SET @nvcSQL = ';WITH SelectedStatus AS
				(SELECT StatusID, Status FROM EC.DIM_Status WHERE StatusID in (3,4,5,6,7,8,9)),

			   SelectedLogs AS
			   (SELECT [cl].[StatusID], Count(CoachingID) LogCount
               FROM [EC].[Coaching_Log] cl WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] eh 
			   ON eh.[EMP_ID] = cl.[EmpID] 
			   WHERE ((cl.[EmpID] = ''' + @nvcEmpID + '''  AND cl.[StatusID] in (3,4)) 
			OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND eh.Sup_ID = ''' + @nvcEmpID + ''' AND cl.[StatusID] in (3,5,6,8) 
			  OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND  eh.Mgr_ID = '''+  @nvcEmpID + ''' AND cl.[StatusID] in (5,7,9))
			  OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @nvcEmpID + ''' AND [cl].[StatusID]= 5) )
			  OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = ''' +  @nvcEmpID + ''' AND  cl.[StatusID] in (5,7,9))  
              ) AND ''' + @nvcEmpID + ''' <> ''999999''
			  GROUP BY [cl].[StatusID])
			  
			   SELECT s.Status, COALESCE(cl.LogCount,0) AS LogCount
			   FROM SelectedStatus s left join SelectedLogs cl
			   ON s.statusid = cl.StatusID '




		     

	
EXEC (@nvcSQL);
--PRINT @nvcSQL
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_Dashboard_Summary_Count_ByStatus






GO



/*
sp_InsertInto_Coaching_Log(03).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO











--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      02/03/2014
--    Description:     This procedure inserts the e-Coaching records into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Last Modified Date: 07/23/2015
-- Last Updated By: Susmitha Palacherla
-- Modified per TFS 363/402 to update formname from CoachingID after insert. 
-- Modified to support Encryption of sensitive data. Open key and removed LanID. TFS 7856 - 10/23/2017
-- Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018.
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
(     @nvcEmpID Nvarchar(10),
      @nvcProgramName Nvarchar(50),
      @intSourceID INT,
      --@intStatusID INT,
      @SiteID INT,
      @nvcSubmitterID Nvarchar(10),
      @dtmEventDate datetime,
      @dtmCoachingDate datetime,
      @bitisAvokeID bit  ,
      @nvcAvokeID Nvarchar(40) ,
      @bitisNGDActivityID bit,
      @nvcNGDActivityID Nvarchar(40) ,
      @bitisUCID bit,
      @nvcUCID Nvarchar(40),
      @bitisVerintID bit,
      @nvcVerintID Nvarchar(255),
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @nvcValue1 Nvarchar(30),
      @intCoachReasonID2 INT ,
      @nvcSubCoachReasonID2 Nvarchar(255),
      @nvcValue2 Nvarchar(30),
      @intCoachReasonID3 INT ,
      @nvcSubCoachReasonID3 Nvarchar(255),
      @nvcValue3 Nvarchar(30),
      @intCoachReasonID4 INT ,
      @nvcSubCoachReasonID4 Nvarchar(255) ,
      @nvcValue4 Nvarchar(30),
      @intCoachReasonID5 INT,
      @nvcSubCoachReasonID5 Nvarchar(255),
      @nvcValue5 Nvarchar(30),
      @intCoachReasonID6 INT,
      @nvcSubCoachReasonID6 Nvarchar(255),
      @nvcValue6 Nvarchar(30),
      @intCoachReasonID7 INT,
      @nvcSubCoachReasonID7 Nvarchar(255),
      @nvcValue7 Nvarchar(30),
      @intCoachReasonID8 INT,
      @nvcSubCoachReasonID8 Nvarchar(255),
      @nvcValue8 Nvarchar(30),
      @intCoachReasonID9 INT,
      @nvcSubCoachReasonID9 Nvarchar(255),
      @nvcValue9 Nvarchar(30),
      @intCoachReasonID10 INT,
      @nvcSubCoachReasonID10 Nvarchar(255),
      @nvcValue10 Nvarchar(30),
      @intCoachReasonID11 INT,
      @nvcSubCoachReasonID11 Nvarchar(255),
      @nvcValue11 Nvarchar(30),
      @intCoachReasonID12 INT,
      @nvcSubCoachReasonID12 Nvarchar(255),
      @nvcValue12 Nvarchar(30),
      @nvcDescription Nvarchar(3000) ,
      @nvcCoachingNotes Nvarchar(3000) ,
      @bitisVerified bit  ,
      @dtmSubmittedDate datetime ,
      @dtmStartDate datetime ,
      @dtmSupReviewedAutoDate datetime ,
      @bitisCSE bit  ,
      @dtmMgrReviewManualDate datetime ,
      @dtmMgrReviewAutoDate datetime ,
      @nvcMgrNotes Nvarchar(3000) ,
      @bitisCSRAcknowledged bit  ,
      @dtmCSRReviewAutoDate datetime ,
      @nvcCSRComments Nvarchar(3000),
      @bitEmailSent bit ,
      @ModuleID INT,
      @Behaviour Nvarchar(30),
      @nvcNewFormName Nvarchar(50)OUTPUT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE 
	        --@nvcEmpID Nvarchar(10),
	        --@nvcSubmitterID	Nvarchar(10),
	        @nvcSupID Nvarchar(10),
	        @nvcMgrID Nvarchar(10),
	        @nvcNotPassedSiteID INT
	        --@dtmDate datetime
	        
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]  
	        
	        
	--SET @dtmDate  = GETDATE()   
	--SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanID,@dtmDate)
	--SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
    SET @nvcSupID = (SELECT [Sup_ID] FROM [EC].[Employee_Hierarchy]WHERE [Emp_ID]= @nvcEmpID)
    SET @nvcMgrID = (SELECT [Mgr_ID] FROM [EC].[Employee_Hierarchy]WHERE [Emp_ID]= @nvcEmpID)
  
         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[CoachingDate]
           ,[isAvokeID]
           ,[AvokeID]
           ,[isNGDActivityID]
           ,[NGDActivityID]
           ,[isUCID]
           ,[UCID]
           ,[isVerintID]
           ,[VerintID]
           ,[Description]
	       ,[CoachingNotes]
           ,[isVerified]
           ,[SubmittedDate]
           ,[StartDate]
           ,[SupReviewedAutoDate]
           ,[isCSE]
           ,[MgrReviewManualDate]
           ,[MgrReviewAutoDate]
           ,[MgrNotes]
           ,[isCSRAcknowledged]
           ,[CSRReviewAutoDate]
           ,[CSRComments]
           ,[EmailSent]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           ,[Behavior])
     VALUES
           (@nvcEmpID 
           ,@nvcProgramName 
           ,@intSourceID 
           ,[EC].[fn_intStatusIDFromInsertParams](@ModuleID,  @intSourceID, @bitisCSE)
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@dtmEventDate 
           ,@dtmCoachingDate 
		   ,@bitisAvokeID 
           ,@nvcAvokeID 
           ,@bitisNGDActivityID 
		   ,@nvcNGDActivityID 
		   ,@bitisUCID 
		   ,@nvcUCID 
		   ,@bitisVerintID 
		   ,@nvcVerintID 
		   ,@nvcDescription 
		   ,@nvcCoachingNotes
           ,@bitisVerified 
		   ,@dtmSubmittedDate 
		   ,@dtmStartDate 
		   ,@dtmSupReviewedAutoDate 
		   ,@bitisCSE 
		   ,@dtmMgrReviewManualDate 
		   ,@dtmMgrReviewAutoDate 
		   ,@nvcMgrNotes 
		   ,@bitisCSRAcknowledged 
		   ,@dtmCSRReviewAutoDate 
		   ,@nvcCSRComments
		   ,@bitEmailSent
		   ,@ModuleID
		   ,ISNULL(@nvcSupID,'999999')
		   ,ISNULL(@nvcMgrID,'999999')
		   ,@Behaviour)
            
 CLOSE SYMMETRIC KEY [CoachingKey] 
            
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
       
            
--WAITFOR DELAY '00:00:00:02'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [CoachingID] = @I  AND [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:01'  -- Wait for 5 ms

SET @nvcNewFormName = (SELECT [FormName] FROM  [EC].[Coaching_Log] WHERE [CoachingID] = @I)

     /*
           IF NOT @intCoachReasonID1 IS NULL
       BEGIN
            INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
            VALUES (@I, @intCoachReasonID1,@intSubCoachReasonID1,
            CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END) 
        END
        
        */
    
 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END)       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
        
       /*  
        IF NOT @intCoachReasonID2 IS NULL  
        BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,@intSubCoachReasonID2,@nvcValue2)
        END 

*/


 IF NOT @intCoachReasonID2 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ','))
  	   SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ',')where Rowid = @SubReasonRowID )
           ,@nvcValue2)       
         
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 


  IF NOT @intCoachReasonID3 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ','))
  	   SET @SubReasonRowID = 1

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID3,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ',')where Rowid = @SubReasonRowID )
           , @nvcValue3)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END      
   
	 IF NOT @intCoachReasonID4 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID4,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ',')where Rowid = @SubReasonRowID )
           , @nvcValue4)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END  
  
   IF NOT @intCoachReasonID5 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID5,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue5)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END     


 IF NOT @intCoachReasonID6 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID6,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ',')where Rowid = @SubReasonRowID )
           , @nvcValue6) 
                    
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
   IF NOT @intCoachReasonID7 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID7,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ',')where Rowid = @SubReasonRowID )
        , @nvcValue7)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
  IF NOT @intCoachReasonID8 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ','))
   	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID8,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ',')where Rowid = @SubReasonRowID )
          , @nvcValue8)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END  
  
  
   IF NOT @intCoachReasonID9 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID9,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ',')where Rowid = @SubReasonRowID )
          , @nvcValue9)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END 
  
  
   IF NOT @intCoachReasonID10 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID10,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ',')where Rowid = @SubReasonRowID )
            , @nvcValue10)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
		
    END
  END 
  
   IF NOT @intCoachReasonID11 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID11,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ',')where Rowid = @SubReasonRowID )
            , @nvcValue11)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END
  
  
   IF NOT @intCoachReasonID12 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ','))
	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID12,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue12) 
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
    

   
    
  END  
COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Coaching_Log





GO



/*
sp_InsertInto_Warning_Log(03).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      10/03/2014
--    Description:     This procedure inserts the Warning records into the Warning_Log table. 
--                     The main attributes of the Warning are written to the warning_Log table.
--                     The Warning Reasons are written to the Warning_Reasons Table.
--  Last Modified By: Susmitha Palacherla
--  Modified  to add Behavior to the insert to support warnings for Training Module - per TFS 861 - 10/21/2015 
 -- Modified to support Encryption of sensitive data. Open key and removed LanID. TFS 7856 - 10/23/2017
 -- Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018.
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Warning_Log]
(     @nvcEmpID Nvarchar(10),
      @nvcProgramName Nvarchar(50),
      @SiteID INT,
      @nvcSubmitterID Nvarchar(10),
      @dtmEventDate datetime,
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @dtmSubmittedDate datetime ,
      @ModuleID INT,
      @nvcBehavior Nvarchar(30),
      @isDup BIT OUTPUT,
      @nvcNewFormName Nvarchar(50) OUTPUT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE 
	        --@nvcSubmitterID	Nvarchar(10),
	        @nvcSupID nvarchar(10),
	        @nvcMgrID nvarchar(10),
	        @nvcNotPassedSiteID INT,
	        --@dtmDate datetime,
	        @intWarnIDExists BIGINT
	        
	OPEN SYMMETRIC KEY [CoachingKey]  
    DECRYPTION BY CERTIFICATE [CoachingCert]    
	 	        

	--SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcSupID = (Select Sup_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)
	SET @nvcMgrID = (Select Mgr_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)  
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
	SET @isDup = 1
	
SET @intWarnIDExists = (SELECT WL.WarningID
FROM [EC].[Warning_Log]WL join [EC].[Warning_Log_Reason]WLR
ON WL.WarningID = WLR.WarningID
WHERE WL.[EmpID]= @nvcEmpID
AND WL.[WarningGivenDate]= @dtmEventDate 
AND WLR.[CoachingReasonID] = @intCoachReasonID1
AND WLR.[SubCoachingReasonID]= @nvcSubCoachReasonID1
AND [Active] = 1)


IF @intWarnIDExists IS NULL 
        
 BEGIN 
         INSERT INTO [EC].[Warning_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[SupID]
           ,[MgrID]
           ,[WarningGivenDate]
           ,[SubmittedDate]
           ,[ModuleID]
           ,[Behavior])
     VALUES
           (@nvcEmpID 
           ,@nvcProgramName 
           ,120
           ,1
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@nvcSupID
           ,@nvcMgrID
           ,@dtmEventDate 
	       ,@dtmSubmittedDate 
		   ,@ModuleID
		   ,@nvcBehavior)
            
  CLOSE SYMMETRIC KEY [CoachingKey] 
     
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
    
UPDATE [EC].[Warning_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,WarningID)
where [WarningID] = @I  AND [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:01'  -- Wait for 5 ms

SET @nvcNewFormName = (SELECT [FormName] FROM  [EC].[Warning_Log] WHERE [WarningID] = @I)


 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Warning_Log_Reason]
            ([WarningID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             'Opportunity')       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
 SET @isDup = 0
 END       

COMMIT TRANSACTION


END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Warning_Log
GO




/*
sp_Search_For_Dashboards_Count(01).sql
Last Modified Date: 05/08/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 05/08/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Search_For_Dashboards_Count' 
)
   DROP PROCEDURE [EC].[sp_Search_For_Dashboards_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/24/2018
--	Description: *	This procedure returns the total count of records that will be returned
--  for the selected criteria for the requested dashboard page.
--  Created during Hist dashboard move to new architecture - TFS 7138 - 04/24/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Search_For_Dashboards_Count] 

@nvcUserIdin nvarchar(10),
@intSourceIdin int = NULL,
@intSiteIdin int = NULL,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10) = NULL,
@nvcMgrIdin nvarchar(10) = NULL,
@nvcSubmitterIdin nvarchar(10) = NULL,
@strSDatein datetime = NULL,
@strEDatein datetime = NULL,
@intStatusIdin int = NULL, 
@nvcValue  nvarchar(30) = NULL,
@nvcSearch nvarchar(50) = NULL,
@intEmpActive int = NULL,
@nvcWhichDashboard nvarchar(100)
AS


BEGIN

IF @nvcWhichDashboard = N'Historical'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_Historical_Count] @nvcUserIdin, @intSourceIdin, @intSiteIdin, @nvcEmpIdin, @nvcSupIdin,
@nvcMgrIdin, @nvcSubmitterIdin, @strSDatein, @strEDatein, @intStatusIdin, @nvcValue, @nvcSearch, @intEmpActive
END

IF @nvcWhichDashboard = N'MyPending'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyPending_Count] @nvcUserIdin, @nvcEmpIdin, @nvcSupIdin
END

IF @nvcWhichDashboard = N'MyCompleted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyCompleted_Count] @nvcUserIdin, @strSDatein, @strEDatein
END


IF @nvcWhichDashboard = N'MySubmitted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Count] @nvcUserIdin, @intStatusIdin, @nvcEmpIdin, @nvcSupIdin,
@nvcMgrIdin, @strSDatein, @strEDatein
END

IF @nvcWhichDashboard = N'MyTeamCompleted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count] @nvcUserIdin, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin,  @strSDatein, @strEDatein
END

IF @nvcWhichDashboard = N'MyTeamPending'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending_Count] @nvcUserIdin, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin
END

IF @nvcWhichDashboard = N'MyTeamWarning'
BEGIN 
EXEC [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning_Count] @nvcUserIdin, @intStatusIdin, @strSDatein, @strEDatein
END

IF @nvcWhichDashboard = N'MySiteCompleted'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Completed_Count] @intSiteIdin, @nvcUserIdin,  @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin,  @nvcMgrIdin, @strSDatein, @strEDatein
END

IF @nvcWhichDashboard = N'MySitePending'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Pending_Count] @intSiteIdin, @nvcUserIdin,  @strSDatein, @strEDatein, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin, @nvcMgrIdin
END

IF @nvcWhichDashboard = N'MySiteWarning'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Warning_Count] @intSiteIdin, @nvcUserIdin, @strSDatein, @strEDatein
END



END --sp_Search_For_Dashboards_Count




GO



/*
sp_Search_For_Dashboards_Details(01).sql
Last Modified Date: 05/08/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 05/08/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Search_For_Dashboards_Details' 
)
   DROP PROCEDURE [EC].[sp_Search_For_Dashboards_Details]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/24/2018
--	Description: *	This procedure returns the Coaching or Warning records that will be returned
--  for the selected criteria for the requested dashboard page.
--  Created during Hist dashboard move to new architecture - TFS 7138 - 04/24/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Search_For_Dashboards_Details] 

@nvcUserIdin nvarchar(10),
@intSourceIdin int = NULL,
@intSiteIdin int = NULL,
@nvcEmpIdin nvarchar(10) = NULL,
@nvcSupIdin nvarchar(10) = NULL,
@nvcMgrIdin nvarchar(10) = NULL,
@nvcSubmitterIdin nvarchar(10) = NULL,
@strSDatein datetime = NULL,
@strEDatein datetime = NULL,
@intStatusIdin int = NULL, 
@nvcValue  nvarchar(30) = NULL,
@nvcSearch nvarchar(50) = NULL,
@intEmpActive int = NULL,
@PageSize int = NULL,
@startRowIndex int = NULL, 
@sortBy nvarchar(100) = NULL,
@sortASC nvarchar(1) = NULL,
@nvcWhichDashboard nvarchar(100)
AS


BEGIN

IF @nvcWhichDashboard = N'Historical'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_Historical] @nvcUserIdin, @intSourceIdin, @intSiteIdin, @nvcEmpIdin, @nvcSupIdin,
@nvcMgrIdin, @nvcSubmitterIdin, @strSDatein, @strEDatein, @intStatusIdin, @nvcValue, @nvcSearch, @intEmpActive, 
@PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MyPending'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyPending] @nvcUserIdin, @nvcEmpIdin, @nvcSupIdin,
 @PageSize, @startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MyCompleted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyCompleted] @nvcUserIdin, @strSDatein, @strEDatein, @PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MySubmitted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MySubmitted] @nvcUserIdin, @intStatusIdin, @nvcEmpIdin, @nvcSupIdin,
@nvcMgrIdin, @strSDatein, @strEDatein,@PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MyTeamCompleted'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted] @nvcUserIdin, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin,  @strSDatein, @strEDatein, @PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MyTeamPending'
BEGIN 
EXEC [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending] @nvcUserIdin, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin, @PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MyTeamWarning'
BEGIN 
EXEC [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning] @nvcUserIdin, @intStatusIdin, @strSDatein, @strEDatein, @PageSize, @startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MySiteCompleted'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Completed] @intSiteIdin, @nvcUserIdin, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin,  @nvcMgrIdin, @strSDatein, @strEDatein, @PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MySitePending'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Pending] @intSiteIdin, @nvcUserIdin, @strSDatein, @strEDatein, @intSourceIdin, @nvcEmpIdin,  @nvcSupIdin, @nvcMgrIdin, @PageSize,@startRowIndex, @sortBy, @sortASC
END

IF @nvcWhichDashboard = N'MySiteWarning'
BEGIN 
EXEC [EC].[sp_Dashboard_Director_Site_Warning] @intSiteIdin, @nvcUserIdin, @strSDatein, @strEDatein, @PageSize, @startRowIndex, @sortBy, @sortASC
END




END --sp_Search_For_Dashboards_Details

GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectCoaching4Contact' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Contact]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:		       Jourdain Augustin
--	Create Date:	   6/10/2013
--	Description: 	   This procedure queries db for feed records to send out mail
--  Last Updated By: Susmitha Palacherla
--  last Modified date: 7/15/2016
--  Modified per TFS 644 to add extra attribute 'OMRARC' to support IAE, IAT Feeds -- 09/21/2015
--  Modified per TFS 2283 to add Source 210 for Training feed -- 3/22/2016
--  Modified per TFS 2268 to add Source 231 for CTC Quality Other feed - 6/15/2016
--  Modified per TFS 3179 & 3186 to add Source 218 for HFC & KUD Quality Other feeds - 7/15/2016
--  Modified to make allow more ad-hoc loads by adding more values to the file. TFS 4916 -12/9/2016
--  Modified to add condition for IQS(Quality logs)per TFS 5085 - 12/29/2016
--  Modified to add support for QS Lead Email for OMR Breaks feeds per TFS 6377 - 04/24/2017
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  TFS 7137 Move dashboards to new architecture. Replaced Module with ModuleID - 06/22/2018
-- --	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Contact]
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strFormStatus1 nvarchar(30),
  @strFormStatus2 nvarchar(30),
  @intSource1 int,
  @intSource2 int,
  @strFormType nvarchar(30),
  @strFormMail nvarchar(30);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT cl.CoachingID numID	
  ,cl.FormName strFormID
  ,s.Status strFormStatus
  ,veh.Emp_Email strCSREmail
  ,veh.Sup_Email strCSRSupEmail
  ,CASE 
     WHEN cl.[strReportCode] LIKE ''LCS%'' THEN [EC].[fn_strEmpEmailFromEmpID](cl.[MgrID])
	 ELSE veh.Mgr_Email 
   END strCSRMgrEmail
  ,so.SubCoachingSource	strSource
  ,veh.Emp_Name strCSRName
  ,so.CoachingSource strFormType
  ,cl.SubmittedDate	SubmittedDate
  ,cl.CoachingDate CoachingDate
  ,cl.EmailSent	EmailSent
  ,cl.sourceid
  ,cl.isCSE
  ,cl.ModuleID
  ,CASE 
     WHEN SUBSTRING(cl.strReportCode, 1, 3) IN (''IAT'', ''IAE'') THEN 1 
	 ELSE 0 
   END OMRARC
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON eh.Emp_ID = veh.Emp_ID
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON eh.Emp_ID = cl.EMPID 
JOIN [EC].[DIM_Status] s ON s.StatusID = cl.StatusID 
JOIN [EC].[DIM_Source] so ON so.SourceID = cl.SourceID 
JOIN [EC].[DIM_Module] mo ON mo.ModuleID = cl.ModuleID 
WHERE S.Status NOT IN (''Completed'',''Inactive'')
  AND (cl.strReportCode IS NOT NULL OR cl.SourceID IN (211, 222, 223, 224, 230))
  AND cl.EmailSent = ''False''
  AND (
        (s.status =''Pending Acknowledgement'' AND veh.Emp_Email IS NOT NULL AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
        OR (s.Status =''Pending Supervisor Review'' AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
        OR ((s.Status =''Pending Manager Review'' OR s.Status =''Pending Sr. Manager Review'') AND veh.Mgr_Email IS NOT NULL AND veh.Mgr_Email <> ''Unknown'')
        OR (s.Status =''Pending Employee Review'' AND veh.Emp_Email IS NOT NULL AND veh.Emp_Email <> ''Unknown'')
        OR (s.Status =''Pending Quality Lead Review'' AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
      )
  AND LEN(cl.FormName) > 10
ORDER BY cl.SubmittedDate DESC';

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	
	    
PRINT @nvcsql	    
	    
END --sp_SelectCoaching4Contact


GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR] @strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@NewLineChar nvarchar(2)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @NewLineChar = CHAR(13) + CHAR(10)

SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM (
       SELECT ''All Employees'' EmpText, ''-1'' EmpValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Emp_Name EmpText, eh.Emp_ID EmplValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	   JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
       WHERE  ((cl.[EmpID] = ''' + @strCSRMGRIDin  + '''  AND cl.[StatusID] in (3,4)) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND eh.Sup_ID = ''' + @strCSRMGRIDin  + ''' AND  cl.[StatusID] in (3,5,6,8) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND  eh.Mgr_ID = '''+ @strCSRMGRIDin  + ''' AND cl.[StatusID] in (5,7,9)) ' +  @NewLineChar +
			  ' OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @strCSRMGRIDin  + ''' AND [cl].[StatusID]= 5) )' +  @NewLineChar +
			  ' OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = ''' + @strCSRMGRIDin  + ''' AND  cl.[StatusID] in (5,7,9)) ) 
         AND veh.Emp_Name IS NOT NULL
         AND ([eh].[Mgr_ID] <> ''999999'' AND [eh].[Sup_ID] <> ''999999'')
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)
--PRINT @nvcSQL
	
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogMgrDistinctCSR




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Modified during dashboard redesign SCR 14422.
--  Last Modified Date: 04/16/2015
--   1. To Replace old style joins.
--   2. Added All employees to the return
--   3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted] 
@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.EMPText AS Name, X.EMPValue AS ID
FROM 
(
    SELECT ''All Employees'' EMPText, ''-1'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, eh.EMP_ID EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID =  '''+ @strCSRMGRIDin +''' AND cl.StatusID <> 2 AND veh.EMP_Name IS NOT NULL AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

END --sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam] 

@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @nvcSQL =  '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''-1'' EmpValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_ID EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.[Mgr_ID] = '''+ @strCSRMGRIDin +''' AND [S].[Status] LIKE ''Pending%'' AND veh.Emp_Name IS NOT NULL AND eh.[Mgr_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 	

End -- sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted] 

@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)



-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''-1'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_ID EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.[Mgr_ID] = '''+ @strCSRMGRIDin +''' AND [cl].[StatusID] = 1 AND veh.Emp_Name IS NOT NULL AND eh.[Mgr_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End --sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted] 
@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @nvcSQL = '
SELECT X.MGRText AS Name, X.MGRValue AS ID
FROM
(
    SELECT ''All Managers'' MGRText, ''-1'' MGRValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText,eh.MGR_ID  MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+ @strCSRMGRIDin +''' AND cl.StatusID <> 2 AND veh.Mgr_Name IS NOT NULL AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End -- sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP] @strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@NewLineChar nvarchar(2)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @NewLineChar = CHAR(13) + CHAR(10)


SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, eh.SUP_ID SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID  
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE  ((cl.[EmpID] = ''' + @strCSRMGRIDin  + '''  AND cl.[StatusID] in (3,4)) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND eh.Sup_ID = ''' + @strCSRMGRIDin  + ''' AND  cl.[StatusID] in (3,5,6,8) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND  eh.Mgr_ID = '''+ @strCSRMGRIDin  + ''' AND cl.[StatusID] in (5,7,9)) ' +  @NewLineChar +
			  ' OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @strCSRMGRIDin  + ''' AND [cl].[StatusID]= 5) )' +  @NewLineChar +
			  ' OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = ''' + @strCSRMGRIDin  + ''' AND  cl.[StatusID] in (5,7,9)) ) 
    AND veh.SUP_Name IS NOT NULL
    AND [eh].[Mgr_ID] <> ''999999'' 
	AND [eh].[Sup_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)
--PRINT @nvcsql
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End -- sp_SelectFrom_Coaching_LogMgrDistinctSUP

GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted] 
@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.SUPText AS Name, X.SUPValue AS ID
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, eh.SUP_ID SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+ @strCSRMGRIDin +'''
      AND cl.StatusID <> 2
      AND veh.SUP_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END --sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam] 
@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT sveh.Emp_Name SUPText, eh.SUP_ID SUPValue, 02 Sortorder
    FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
	ON cl.EmpID = eh.Emp_ID JOIN [EC].[View_Employee_Hierarchy] sveh WITH (NOLOCK)
	ON eh.Sup_ID = sveh.Emp_ID JOIN [EC].[DIM_Status] s
	ON cl.StatusID = s.StatusID
    WHERE eh.Mgr_ID = '''+ @strCSRMGRIDin +'''
      AND S.Status like ''Pending%''
      AND sveh.Emp_Name is NOT NULL
      AND eh.Mgr_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End --sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted] 

@strCSRMGRIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)



-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, eh.SUP_ID SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE eh.Mgr_ID = '''+ @strCSRMGRIDin +'''
      AND cl.StatusID = 1
      AND veh.SUP_Name is NOT NULL
      AND eh.Mgr_ID <> ''999999'' 
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

END -- sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted] 
@strStaffIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @nvcSQL = '
SELECT X.EMPText AS Name, X.EMPValue AS ID
FROM
(
    SELECT ''All Employees'' EMPText, ''-1'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_ID  EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	WHERE sh.Emp_ID = '''+ @strStaffIDin  +'''
    AND cl.[StatusID] NOT IN (1,2)
    AND veh.EMP_Name is NOT NULL
    AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText';	
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted





GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted] 
@strStaffIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.MGRText AS Name, X.MGRValue AS ID
FROM
(
    SELECT ''All Managers'' MGRText, ''-1'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, eh.Mgr_ID MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	  WHERE sh.Emp_ID = '''+ @strStaffIDin +'''
      AND cl.StatusID NOT IN (1,2)
      AND veh.Mgr_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
Order By X.Sortorder, X.MgrText';	
 
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

END -- sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct Supervisors from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]  
@strStaffIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

 
SET @nvcSQL = '
SELECT X.SUPText AS Name, X.SUPValue AS ID
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, eh.SUP_ID SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	  WHERE sh.Emp_ID = '''+ @strStaffIDin +'''
      AND cl.StatusID NOT IN (1,2)
      AND veh.SUP_Name is NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
 
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted





GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All employees to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR] @strCSRSUPIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.EMPText AS Name, X.EMPValue AS ID
FROM
(
    SELECT ''All Employees'' EMPText, ''-1'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_ID EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+ @strCSRSUPIDin +'''
      AND cl.StatusID <> 2
      AND veh.EMP_Name IS NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END -- sp_SelectFrom_Coaching_LogSupDistinctCSR




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam] 
@strCSRSUPIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];



SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''-1'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, eh.Emp_ID EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.Sup_ID = '''+ @strCSRSUPIDin +'''
      AND [S].[Status] LIKE ''Pending%''
      AND veh.Emp_Name IS NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';

EXEC (@nvcSQL)
--PRINT @nvcsql
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeam


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted] 
@strCSRSUPIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'


SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''-1'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, eh.Emp_ID EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.Sup_ID = '''+ @strCSRSUPIDin +'''
      AND [S].[Status] = '''+@strFormStatus+'''
      AND veh.Emp_Name IS NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR] @strCSRSUPIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)



-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.MGRText AS Name, X.MGRValue AS ID
FROM
(
    SELECT ''All Managers'' MGRText, ''-1'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, eh.Mgr_ID MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+ @strCSRSUPIDin +'''
      AND cl.StatusID <> 2
      AND veh.Mgr_Name IS NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

END --sp_SelectFrom_Coaching_LogSupDistinctMGR




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers for supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]
@strCSRSUPIDin nvarchar(10)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'


SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''-1'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, eh.Mgr_ID MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE eh.Sup_ID = '''+ @strCSRSUPIDin +'''
      AND s.Status = '''+@strFormStatus+'''
      AND veh.Mgr_Name is NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
Order By X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End  --sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted


GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All supervisors to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  My Dashboard move to new architecture. TFS 7137 - 06/01/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP] @strCSRSUPIDin nvarchar(10)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @nvcSQL = '
SELECT X.SUPText AS Name, X.SUPValue AS ID
FROM
(
    SELECT ''All Supervisors'' SUPText, ''-1'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, eh.Sup_ID SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh WITH (NoLOCK) ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID ='''+ @strCSRSUPIDin +'''
      AND cl.StatusID <> 2
      AND veh.SUP_Name is NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)
--print @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	

END -- sp_SelectFrom_Coaching_LogSupDistinctSUP




GO



/*
sp_SelectFrom_Coaching_Log_Emp_BySup(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Emp_BySup' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Emp_BySup]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/23/2018
--	Description: *	This procedure selects a list of all Employees who have identified 
--  as Supervisors during log submisison.
-- This Procedure is only looking for Managers of non Inactive logs.
-- Created during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Emp_BySup] 
@nvcSupID nvarchar(10), @intEmpActive int, @intSiteID INT, @nvcMgrID nvarchar(10)

AS

BEGIN
DECLARE	
@where nvarchar(200),
@NewLineChar nvarchar(2),
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @NewLineChar = CHAR(13) + CHAR(10)

SET @where = ''

IF @nvcMgrID <> '-1'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_Id] =  '''+ @nvcMgrID + ''''
END


IF @nvcSupID <> '-1'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_Id] =  '''+ @nvcSupID + ''''
END

-- 1 for Active 2 for Inactive 3 for All

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END

SET @nvcSQL = '
SELECT   X.EmployeeId, X.Employee
FROM (
       SELECT ''-1'' EmployeeId, ''All Employees'' Employee,  01 Sortorder
       UNION
       SELECT DISTINCT eh.Emp_ID EmployeeId, veh.Emp_Name Employee,  02 Sortorder
       FROM [EC].[Coaching_Log] cl WITH(NOLOCK) JOIN  [EC].[Employee_Hierarchy] eh 
	   ON cl.[EMPID] = eh.[EMP_ID] JOIN  [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   ON eh.[EMP_ID] = veh.[EMP_ID] JOIN [EC].[DIM_Site]S
       ON S.City = EH.Emp_Site
	   WHERE cl.StatusID <> 2 
	   AND  (S.SiteID =('''+CONVERT(NVARCHAR,@intSiteID)+''') or '''+ CONVERT(NVARCHAR,@intSiteID) + ''' = -1)' +
	   @where + ' ' + '
	     AND veh.Emp_Name IS NOT NULL 
		 AND cl.EmpID  <> ''999999''
) X
ORDER BY X.Sortorder, X.Employee'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_Log_Emp_BySup

GO




/*
sp_SelectFrom_Coaching_Log_Historical(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Historical' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/24/2018
--	Description: *	This procedure selects the CSR e-Coaching completed records to display on SUP historical page
--  Created during Hist dashboard move to new architecture - TFS 7138 - 04/24/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical] 

@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@intSiteIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@nvcSubmitterIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@intStatusIdin int, 
@nvcValue  nvarchar(30),
@nvcSearch nvarchar(50),
@intEmpActive int,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcSQL4 nvarchar(max),
@nvcSQL5 nvarchar(max),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSubSource nvarchar(100),
@nvcDisplayWarnings nvarchar(5),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10),
@where nvarchar(max);        

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)
SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcUserIdin), 'NO')) 
SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] <> 2'

-- 1 for Active 2 for Inactive 3 for All

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END

			 
IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [cl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END

IF @nvcValue   <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [clr].[value] = ''' + @nvcValue   + ''''
END

IF @nvcEmpIdin <> '-1' 
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] =   ''' + @nvcEmpIdin  + '''' 
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END	

IF @nvcSubmitterIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar +  ' AND [cl].[SubmitterID] = ''' + @nvcSubmitterIdin  + '''' 
END

IF @intSiteIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[SiteID] = ''' + CONVERT(nvarchar, @intSiteIdin) + ''''
END			 

IF @nvcSearch   <> ' '
BEGIN
	SET @where = @where + @NewLineChar +  ' AND ([veh].[Emp_Name] LIKE ''' +  @nvcSearch + 
	                      '%'' OR [veh].[Sup_Name] LIKE ''' +  @nvcSearch +
						   '%'' OR [veh].[Mgr_Name] LIKE ''' +  @nvcSearch +
						  '%'' OR [vehs].[Emp_Name] LIKE '''  +  @nvcSearch + '%'' )'
END			 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET @OrderKey = 'orderkey, '
SET  @SortExpression = @OrderKey + @sortBy +  @SortOrder

--PRINT @SortExpression

SET @nvcSQL1 = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,x.orderkey
  ,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
	  ,''ok1'' orderkey
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID' +  @NewLineChar +
	@where + ' ' + '
	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]'

SET @where = 
' WHERE convert(varchar(8),[wl].[SubmittedDate],112) >= ''' + @strSDate + '''' +  @NewLineChar +
' AND convert(varchar(8),[wl].[SubmittedDate],112) <= ''' + @strEDate + '''' + @NewLineChar +
' AND [wl].[StatusID] <> 2';

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END


			 
IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [wl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END

IF @nvcValue   <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wlr].[value] = ''' + @nvcValue   + ''''
END

IF @nvcEmpIdin <> '-1' 
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wl].[EmpID] =   ''' + @nvcEmpIdin  + '''' 
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END	

IF @nvcSubmitterIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wl].[SubmitterID] = ''' + @nvcSubmitterIdin  + '''' 
END

IF @intSiteIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND [wl].[SiteID] = ''' + CONVERT(nvarchar,@intSiteIdin) + ''''
END	

IF @nvcSearch   <> ' '
BEGIN
	SET @where = @where + @NewLineChar +  ' AND ([veh].[Emp_Name] LIKE ''' +  @nvcSearch + 
	                      '%'' OR [veh].[Sup_Name] LIKE ''' +  @nvcSearch +
						   '%'' OR [veh].[Mgr_Name] LIKE ''' +  @nvcSearch +
						  '%'' OR [vehs].[Emp_Name] LIKE '''  +  @nvcSearch + '%'' )'
END			 
			 
	

SET @nvcSQL2 = ' 
UNION
  SELECT DISTINCT [wl].[FormName]	strFormID
    ,[wl].[WarningID]	strLogID
    ,[veh].[Emp_Name]	strEmpName
	,[veh].[Sup_Name]	strEmpSupName
	,[veh].[Mgr_Name]	strEmpMgrName
	,[s].[Status]		strFormStatus
	,[so].[SubCoachingSource]	strSource
	,[wl].[SubmittedDate]	SubmittedDate
	,[vehs].[Emp_Name]	strSubmitterName
	,''ok2'' orderkey
  FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
  JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
  JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
  JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
  JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
  JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID
  JOIN [EC].[Warning_Log_Reason] wlr WITH (NOLOCK) ON wl.WarningID = wlr.WarningID' + @NewLineChar +
  @where + ' ' + '
  GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [wl].[SubmittedDate], [vehs].[Emp_Name]'

SET @nvcSQL3 = ' 
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strCoachingReasonFromCoachingID](T.strLogID)
	 ELSE [EC].[fn_strCoachingReasonFromWarningID](T.strLogID) 
   END strCoachingReason
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID)
	 ELSE [EC].[fn_strSubCoachingReasonFromWarningID](T.strLogID) 
   END strSubCoachingReason
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strValueFromCoachingID](T.strLogID)
	 ELSE [EC].[fn_strValueFromWarningID](T.strLogID)
   END strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  

--print @nvcDisplayWarnings
IF @nvcDisplayWarnings = 'YES'
  SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3; 
ELSE
  SET @nvcSQL = @nvcSQL1 + @nvcSQL3;

EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- SelectFrom_Coaching_Log_Historical

GO





/*
sp_SelectFrom_Coaching_Log_Historical_Count(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Historical_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Count]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/24/2018
--	Description: *	This procedure returns the count of e-Coaching  records that will be 
--  displayed for the selected criteria on the  historical dashboard page.
--  Created during Hist dashboard move to new architecture - TFS 7138 - 04/24/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Count] 

@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@intSiteIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@nvcSubmitterIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@intStatusIdin int, 
@nvcValue  nvarchar(30),
@nvcSearch nvarchar(50),
@intEmpActive int


AS

BEGIN

SET NOCOUNT ON;

DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@NewLineChar nvarchar(2),
@nvcSubSource nvarchar(100),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcDisplayWarnings nvarchar(5),
@where nvarchar(max); 

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)   

SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcUserIdin),'NO')); 
   
SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] <> 2'


-- 1 for Active 2 for Inactive 3 for All

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END


			 
IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [cl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END

IF @nvcValue   <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [clr].[value] = ''' + @nvcValue   + ''''
END

IF @nvcEmpIdin <> '-1' 
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] =   ''' + @nvcEmpIdin  + '''' 
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END	

IF @nvcSubmitterIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar +  ' AND [cl].[SubmitterID] = ''' + @nvcSubmitterIdin  + '''' 
END

IF @intSiteIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[SiteID] = ''' + CONVERT(nvarchar, @intSiteIdin) + ''''
END			 

IF @nvcSearch   <> ' '
BEGIN
	SET @where = @where + @NewLineChar +  ' AND ([veh].[Emp_Name] LIKE ''' +  @nvcSearch + 
	                      '%'' OR [veh].[Sup_Name] LIKE ''' +  @nvcSearch +
						   '%'' OR [veh].[Mgr_Name] LIKE ''' +  @nvcSearch +
						  '%'' OR [vehs].[Emp_Name] LIKE '''  +  @nvcSearch + '%'' )'
END			 

SET @nvcSQL1 = 'WITH TempCoaching
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName]	strFormID
	     FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID' + @NewLineChar +
    @where

-- Warning Logs

SET @where = ' WHERE convert(varchar(8), [wl].[SubmittedDate],112) >= ''' + @strSDate + '''' +  
			 ' AND convert(varchar(8), [wl].[SubmittedDate],112) <= ''' + @strEDate + '''' +
			 ' AND [wl].[StatusID] <> 2';
			 
-- 1 for Active 2 for Inactive 3 for All

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END

			 
IF @intSourceIdin  <> -1
BEGIN
	SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [wl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END

IF @nvcValue   <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wlr].[value] = ''' + @nvcValue   + ''''
END

IF @nvcEmpIdin <> '-1' 
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wl].[EmpID] =   ''' + @nvcEmpIdin  + '''' 
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END	

IF @nvcSubmitterIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [wl].[SubmitterID] = ''' + @nvcSubmitterIdin  + '''' 
END

IF @intSiteIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND [wl].[SiteID] = ''' + CONVERT(nvarchar,@intSiteIdin) + ''''
END	

IF @nvcSearch   <> ' '
BEGIN
	SET @where = @where + @NewLineChar +  ' AND ([veh].[Emp_Name] LIKE ''' +  @nvcSearch + 
	                      '%'' OR [veh].[Sup_Name] LIKE ''' +  @nvcSearch +
						   '%'' OR [veh].[Mgr_Name] LIKE ''' +  @nvcSearch +
						  '%'' OR [vehs].[Emp_Name] LIKE '''  +  @nvcSearch + '%'' )'
END			 
			 

SET @nvcSQL2 = ' 
UNION
SELECT DISTINCT [wl].[FormName]	strFormID
  FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
  JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
  JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
  JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
  JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
  JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID
  JOIN [EC].[Warning_Log_Reason] wlr WITH (NOLOCK) ON wl.WarningID = wlr.WarningID' + @NewLineChar +
  @where 

SET @nvcSQL3 = '
  ) x
) SELECT count(strFormID) FROM TempCoaching';
	   
IF @nvcDisplayWarnings = 'YES'
  SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3; 
ELSE
  SET @nvcSQL = @nvcSQL1 + @nvcSQL3;

--print @nvcSQL;
EXEC (@nvcSQL);	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey] 	 
    
END; -- sp_SelectFrom_Coaching_Log_Historical_Count

GO




/*
sp_SelectFrom_Coaching_Log_Historical_Export(04).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 04 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018
Version 03: Encrypt/decrypt - TFS 7856  - 12/1/2017
Version 02: Modified per SCR 14893 dashboard redesign performance round 2 - 06/2/2015
Version 01: Document Initial Revision - 04/14/2015
*/


IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Historical_Export' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Export]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/14/2015
--	Description: *	This procedure selects the  e-Coaching completed records for export.
-- Last Modified Date:06/2/2015
-- Last Updated By: Susmitha Palacherla
-- Modified per SCR 14893 dashboard redesign performance round 2.
-- TFS 7856 encrypt/decrypt - names
--  Created during Hist dashboard move to new architecture - TFS 7138 - 04/24/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Export] 

@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@intSiteIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@nvcSubmitterIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@intStatusIdin int, 
@nvcValue  nvarchar(30),
--@nvcSearch nvarchar(50),
@intEmpActive int


AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@nvcSubSource nvarchar(100),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@NewLineChar nvarchar(2),
@where nvarchar(max);  

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)
SET @where = ' '
			 

-- 1 for Active 2 for Inactive 3 for All

IF @intEmpActive  <> 3
BEGIN
    IF @intEmpActive = 1
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] NOT IN (''T'',''D'')'
	ELSE
	SET @where = @where + @NewLineChar + ' AND [eh].[Active] IN (''T'',''D'')'
END


			 
IF @intSourceIdin  <> -1
BEGIN
	SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [cl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END

IF @nvcValue   <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [clr].[value] = ''' + @nvcValue   + ''''
END

IF @nvcEmpIdin <> '-1' 
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] =   ''' + @nvcEmpIdin  + '''' 
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END	

IF @nvcSubmitterIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar +  ' AND [cl].[SubmitterID] = ''' + @nvcSubmitterIdin  + '''' 
END

IF @intSiteIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[SiteID] = ''' + CONVERT(nvarchar, @intSiteIdin) + ''''
END			 

	 		 

SET @nvcSQL = ';WITH CL 
AS 
(
  SELECT * From [EC].[Coaching_Log] WITH (NOLOCK)
  WHERE convert(varchar(8), [SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [SubmittedDate], 112) <= ''' + @strEDate + '''
    AND [StatusID] <> 2
)
SELECT [cl].[CoachingID] CoachingID
  ,[cl].[FormName] FormName
  ,[cl].[ProgramName] ProgramName
  ,[cl].[EmpID]	EmpID
  ,[veh].[Emp_Name]	EmpName
  ,[veh].[Sup_Name]	EmpSupName
  ,[veh].[Mgr_Name]	EmpMgrName
  ,[si].[City] FormSite
  ,[so].[CoachingSource] FormSource
  ,[so].[SubCoachingSource]	FormSubSource
  ,[dcr].[CoachingReason] CoachingReason
  ,[dscr].[SubCoachingReason] SubCoachingReason
  ,[clr].[Value] Value
  ,[s].[Status] FormStatus
  ,[vehs].[Emp_Name] SubmitterName
  ,[cl].[EventDate]	EventDate
  ,[cl].[CoachingDate] CoachingDate
  ,[cl].[VerintID] VerintID
  ,[cl].[Description] Description
  ,[cl].[CoachingNotes]	CoachingNotes
  ,[cl].[SubmittedDate]	SubmittedDate
  ,[cl].[SupReviewedAutoDate] SupReviewedAutoDate
  ,[cl].[MgrReviewManualDate] MgrReviewManualDate
  ,[cl].[MgrReviewAutoDate]	MgrReviewAutoDate
  ,[cl].[MgrNotes] MgrNotes
  ,[cl].[CSRReviewAutoDate]	EmpReviewAutoDate
  ,[cl].[CSRComments] EmpComments
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON eh.[EMP_ID] = veh.[EMP_ID]
JOIN cl ON cl.EmpID = eh.Emp_ID 
JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
JOIN [EC].[DIM_Site] si ON cl.SiteID = si.SiteID 
JOIN [EC].[Coaching_Log_Reason]clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID 
JOIN [EC].[DIM_Coaching_Reason]dcr ON clr.CoachingReasonID = dcr.CoachingReasonID
JOIN [EC].[DIM_Sub_Coaching_Reason]dscr ON clr.SubCoachingReasonID = dscr.SubCoachingReasonID ' +
@where + ' ' + '
ORDER BY [cl].[CoachingID]'

EXEC (@nvcSQL)	
--PRINT @nvcSQL
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey] 	
	    
END -- sp_SelectFrom_Coaching_Log_Historical_Export





GO




/*
sp_SelectFrom_Coaching_Log_MGR_BySite(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGR_BySite' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGR_BySite]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO










--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/23/2018
--	Description: *	This procedure selects a list of all Employees who have identified 
--  as Managers during log submisison.
-- This Procedure is only looking for Managers of non Inactive logs.
-- Created during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE  PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Mgr_BySite] 
@intSiteID INT

AS

BEGIN
DECLARE	
@sitewhere nvarchar(200),
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @sitewhere = ''
IF @intSiteID <> -1


BEGIN
	SET @sitewhere = @sitewhere + ' AND [cl].[SiteID] =   '''+CONVERT(NVARCHAR,@intSiteID)+''''
END


 IF @intSiteID <> -2
SET @nvcSQL = '
SELECT   X.ManagerId, X.Manager
FROM (
       SELECT ''-1'' ManagerId, ''All Managers'' Manager,  01 Sortorder
       UNION
       SELECT DISTINCT eh.Mgr_Id ManagerId, veh.Mgr_Name Manager,  02 Sortorder
       FROM [EC].[Coaching_Log] cl WITH(NOLOCK) JOIN  [EC].[Employee_Hierarchy] eh 
	   ON cl.[EmpId] = eh.[Emp_Id] JOIN  [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   ON eh.[EMP_ID] = veh.[EMP_ID]
	   WHERE cl.StatusID <> 2 ' +
	   @sitewhere + ' ' + '
	     AND veh.Mgr_Name IS NOT NULL 
		 AND eh.Mgr_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.Manager'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_Log_Mgr_BySite


GO



/*
sp_SelectFrom_Coaching_Log_MyCompleted(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompleted] 
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	WHERE  cl.EmpID = '''+@nvcUserIdin+''' 
    AND [cl].[StatusID] = 1
	AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''
	AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	AND [cl].[EmpID] <> ''999999''
	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyCompleted

GO





/*
sp_SelectFrom_Coaching_Log_MyCompleted_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyCompleted_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompleted_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompleted_Count] 
@nvcUserIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime
AS


BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(10),
@strEDate nvarchar(10)

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	WHERE  cl.EmpID = '''+@nvcUserIdin+''' 
    AND [cl].[StatusID] = 1
	AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''
	AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	AND [cl].[EmpID] <> ''999999''
    ) x 
)

SELECT count(strFormID) FROM TempMain'


		
EXEC (@nvcSQL)	
--PRINT @nvcSQL	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MyCompleted_Count
GO
/*
sp_SelectFrom_Coaching_Log_MyPending(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Pending logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPending] 
@nvcUserIdin nvarchar(10),
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@nvcEmpRole nvarchar(40),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10),
@NewLineChar nvarchar(2),
@where nvarchar(max);        

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcUserIdin)


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @where = 'WHERE [cl].[StatusID] <> 2'


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	


IF @nvcEmpRole NOT IN ('CSR', 'ARC', 'Employee','Supervisor', 'Manager', 'SrManager' )
RETURN 1

IF @nvcEmpRole in ('CSR', 'ARC', 'Employee')
BEGIN
SET @where = @where + ' AND (cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4))'
END


IF @nvcEmpRole = 'Supervisor'
BEGIN
SET @where = @where + ' AND ((cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4))' +  @NewLineChar +
		       ' OR ((cl.[ReassignCount]= 0 AND eh.[Sup_ID] = ''' + @nvcUserIdin + ''' AND cl.[StatusID] in (3,6,8)))' +  @NewLineChar +
		       ' OR (cl.[ReassignedToId] = ''' + @nvcUserIdin + '''  AND [ReassignCount] <> 0 AND cl.[StatusID] in (3,6,8)))'
END

IF @nvcEmpRole in ( 'Manager', 'SrManager')
BEGIN
SET @where = @where + ' AND ((cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4)) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND eh.Sup_ID = ''' + @nvcUserIdin + ''' AND  cl.[StatusID] in (3,5,6,8) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND  eh.Mgr_ID = '''+ @nvcUserIdin + ''' AND cl.[StatusID] in (5,7,9)) ' +  @NewLineChar +
			  ' OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @nvcUserIdin + ''' AND [cl].[StatusID]= 5) )' +  @NewLineChar +
			  ' OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = ''' + @nvcUserIdin + ''' AND  cl.[StatusID] in (5,7,9)) ) '
		     

             
END

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyPending



GO



/*
sp_SelectFrom_Coaching_Log_MyPending_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyPending_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPending_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the count of Pending logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPending_Count] 
@nvcUserIdin nvarchar(10),
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10)


AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@nvcEmpRole nvarchar(40),
@NewLineChar nvarchar(2),
@where nvarchar(max)        

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcUserIdin)

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @where = 'WHERE [cl].[StatusID] <> 2'

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	


IF @nvcEmpRole NOT IN ('CSR', 'ARC', 'Employee','Supervisor', 'Manager', 'SrManager' )
RETURN 1

IF @nvcEmpRole in ('CSR', 'ARC', 'Employee')
BEGIN
SET @where = @where + ' AND (cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4))'
END



IF @nvcEmpRole = 'Supervisor'
BEGIN
SET @where = @where + ' AND ((cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4))' +  @NewLineChar +
		       ' OR ((cl.[ReassignCount]= 0 AND eh.[Sup_ID] = ''' + @nvcUserIdin + ''' AND cl.[StatusID] in (3,6,8)))' +  @NewLineChar +
		       ' OR (cl.[ReassignedToId] = ''' + @nvcUserIdin + '''  AND [ReassignCount] <> 0 AND cl.[StatusID] in (3,6,8)))'
END

IF @nvcEmpRole in ( 'Manager', 'SrManager')
BEGIN
SET @where = @where + ' AND ((cl.[EmpID] = ''' + @nvcUserIdin + '''  AND cl.[StatusID] in (3,4)) ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND eh.Sup_ID = ''' + @nvcUserIdin + ''' AND  cl.[StatusID] in (3,5,6,8)  ' +  @NewLineChar +
			  ' OR (ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'' AND cl.ReassignCount= 0 AND  eh.Mgr_ID = '''+ @nvcUserIdin + ''' AND cl.[StatusID] in (5,7,9)) ' +  @NewLineChar +
			  ' OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @nvcUserIdin + ''' AND [cl].[StatusID]= 5) )' +  @NewLineChar +
			  ' OR (cl.ReassignCount <> 0 AND cl.ReassignedToID = ''' + @nvcUserIdin + ''' AND  cl.[StatusID] in (5,7,9)) ) '
		     

             
END

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT [cl].[FormName]	strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
   ) x 
)

SELECT count(strFormID) FROM TempMain'



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyPending_Count






GO



/*
sp_SelectFrom_Coaching_Log_MySubmitted(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted] 
@nvcUserIdin nvarchar(10),
@intStatusIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + ''''
			



IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [cl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	WHERE  [cl].[SubmitterID] = '''+@nvcUserIdin+''' '+ @NewLineChar +
	' AND [cl].[StatusID] <> 2' + @NewLineChar +
	@where + ' ' + '
  	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MySubmitted
GO





/*
sp_SelectFrom_Coaching_Log_MySubmitted_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Submitted logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Count] 
@nvcUserIdin nvarchar(10),
@intStatusIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@nvcMgrIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime
AS


BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max)


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + ''''
			


IF @intStatusIdin  <> -1
BEGIN
	SET @where = @where + @NewLineChar + 'AND  [cl].[StatusID] = ''' + CONVERT(nvarchar,@intStatusIdin) + ''''
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcMgrIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Mgr_ID] = ''' + @nvcMgrIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END


 SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT  x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	WHERE  [cl].[SubmitterID] = '''+@nvcUserIdin+''' '+ @NewLineChar +
	' AND [cl].[StatusID] <> 2' + @NewLineChar +
	@where + ' ' + '
    ) x 
) SELECT count(strFormID) FROM TempMain';

		
EXEC (@nvcSQL)	
--PRINT @nvcSQL	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MySubmitted_Count



GO



/*
sp_SelectFrom_Coaching_Log_MyTeamCompleted(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted] 
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] = 1 '


IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
   	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyTeamCompleted

GO



/*
sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count] 
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@strSDatein datetime,
@strEDatein datetime

AS


BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@where nvarchar(max),
@nvcSQL nvarchar(max)

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  @NewLineChar +
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' + @NewLineChar +
			 ' AND [cl].[StatusID] = 1 '

IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	


SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	@where + ' ' + '
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
   ) x 
) SELECT count(strFormID) FROM TempMain';


		
EXEC (@nvcSQL)	
--PRINT @nvcSQL	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MyTeamCompleted_Count
GO




/*
sp_SelectFrom_Coaching_Log_MyTeamPending(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyTeamPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending] 
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10),
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@nvcSQL nvarchar(max),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10),
@NewLineChar nvarchar(2),
@where nvarchar(max);
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @NewLineChar = CHAR(13) + CHAR(10)
SET @where = 'WHERE [cl].[StatusID] NOT IN (1,2)'

IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END

IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	


SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	 @where + ' ' + '
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
    GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyTeamPending

GO





/*
sp_SelectFrom_Coaching_Log_MyTeamPending_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyTeamPending_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of Completed logs for logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyTeamPending_Count] 
@nvcUserIdin nvarchar(10),
@intSourceIdin int,
@nvcEmpIdin nvarchar(10),
@nvcSupIdin nvarchar(10)

AS


BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSubSource nvarchar(100),
@NewLineChar nvarchar(2),
@where nvarchar(max),
@nvcSQL nvarchar(max);


SET @NewLineChar = CHAR(13) + CHAR(10)
SET @where = 'WHERE [cl].[StatusID] NOT IN (1,2)'

IF @intSourceIdin  <> -1
BEGIN
    SET @nvcSubSource = (SELECT SubCoachingSource FROM DIM_Source WHERE SourceID = @intSourceIdin)
	SET @where = @where + @NewLineChar + 'AND [so].[SubCoachingSource] =  ''' + @nvcSubSource + ''''
END


IF @nvcSupIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [eh].[Sup_ID] = ''' + @nvcSupIdin  + '''' 
END

IF @nvcEmpIdin  <> '-1'
BEGIN
	SET @where = @where + @NewLineChar + ' AND [cl].[EmpID] = ''' + @nvcEmpIdin  + '''' 
END	


SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID '+ @NewLineChar +
	 @where + ' ' + '
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
    ) x 
) SELECT count(strFormID) FROM TempMain';

		
EXEC (@nvcSQL)	
--PRINT @nvcSQL	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MyTeamPending_Count
GO



/*
sp_SelectFrom_Coaching_Log_Submitter(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Submitter' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Submitter]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/23/2018
--	Description: *	This procedure selects a list of all Submitters 
-- This Procedure is only looking for Submitters of Active logs.
-- Created during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Submitter] 


AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];




SET @nvcSQL = '
SELECT   X.SubmitterID, X.Submitter
FROM (
       SELECT ''-1'' SubmitterID, ''All Submitters'' Submitter,  01 Sortorder
       UNION
       SELECT DISTINCT sh.Emp_ID SubmitterID, vsh.Emp_Name Submitter,  02 Sortorder
       FROM [EC].[Coaching_Log] cl WITH(NOLOCK) JOIN  [EC].[Employee_Hierarchy] sh 
	   ON cl.[SubmitterID] = sh.[EMP_ID] JOIN  [EC].[View_Employee_Hierarchy] vsh WITH (NOLOCK) 
	   ON sh.[EMP_ID] = vsh.[EMP_ID]
	   WHERE cl.StatusID <> 2 
	   AND vsh.Emp_Name IS NOT NULL 
		 AND cl.SubmitterID  <> ''999999''
) X
ORDER BY X.Sortorder, X.Submitter'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_Log_Submitter

GO




/*
sp_SelectFrom_Coaching_Log_Sup_ByMgr(01).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during hist dashboard redesign.  TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Sup_ByMgr' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Sup_ByMgr]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/23/2018
--	Description: *	This procedure selects a list of all Employees who have identified 
--  as Supervisors during log submisison.
-- This Procedure is only looking for Managers of non Inactive logs.
-- Created during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE  PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Sup_ByMgr] 
@nvcMgrID nvarchar(10)

AS

BEGIN
DECLARE	
@mgrwhere nvarchar(200),
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @mgrwhere = ''
IF @nvcMgrID <> '-1'


BEGIN
	SET @mgrwhere = @mgrwhere + ' AND [sh].[Sup_Id] =  '''+ @nvcMgrID + ''''
END


SET @nvcSQL = '
SELECT   X.SupervisorId, X.Supervisor
FROM (
       SELECT ''-1'' SupervisorId, ''All Supervisors'' Supervisor,  01 Sortorder
       UNION
       SELECT DISTINCT sh.Emp_Id SupervisorId, vsh.Emp_Name Supervisor,  02 Sortorder
       FROM [EC].[Coaching_Log] cl WITH(NOLOCK)  JOIN  [EC].[Employee_Hierarchy] eh
	   ON cl.[EmpId] = eh.[Emp_Id] JOIN  [EC].[Employee_Hierarchy] sh 
	   ON eh.[Sup_Id] = sh.[Emp_Id] JOIN  [EC].[View_Employee_Hierarchy] vsh WITH (NOLOCK) 
	   ON sh.[Emp_Id] = vsh.[Emp_Id] 
	   JOIN [EC].[Employee_Hierarchy] mh 
	   ON sh.[Sup_Id] = mh.[Emp_Id]
	   WHERE cl.StatusID <> 2 ' +
	   @mgrwhere + ' ' + '
	     AND vsh.Emp_Name IS NOT NULL 
		 AND sh.Emp_Id  <> ''999999''
) X
ORDER BY X.Sortorder, X.Supervisor'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_Log_Sup_ByMgr
GO




/*
sp_SelectFrom_Warning_Log_MyTeamWarning(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_MyTeamWarning' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Active Warning logs for Employees reporting to the logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning] 
@nvcUserIdin nvarchar(10),
@intStatusIdin int,
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10)
  

SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 


--PRINT @UpperBand

IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET  @SortExpression = @sortBy +  @SortOrder
--PRINT @SortExpression

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)



-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
				,x.strLogID
				,x.strEmpName
				,x.strEmpSupName
				,x.strEmpMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
				,x.strSubmitterName
				,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [wl].[FormName] strFormID
      ,[wl].[WarningID] strLogID
      ,[veh].[Emp_Name]	strEmpName
	  ,[veh].[Sup_Name]	strEmpSupName
	  ,[veh].[Mgr_Name] strEmpMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[wl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID 
	WHERE wl.StatusID = 1
	AND (CONVERT(VARCHAR, wl.Active) = '''+CONVERT(VARCHAR,@intStatusIdin)+''' OR  '''+CONVERT(VARCHAR,@intStatusIdin)+''' = ''-1'')
	AND wl.siteID <> -1
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
	AND convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [wl].[SubmittedDate], [vehs].[Emp_Name]
  ) x 
)

SELECT strLogID,
   strFormID
  ,strEmpName
  ,strEmpSupName
  ,strEmpMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,[EC].[fn_strCoachingReasonFromWarningID](T.strLogID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromWarningID](T.strLogID) strSubCoachingReason
  ,[EC].[fn_strValueFromWarningID](T.strLogID) strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  



EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Warning_Log_MyTeamWarning

GO





/*
sp_SelectFrom_Warning_Log_MyTeamWarning_Count(01).sql
Last Modified Date: 05/20/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/20/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_MyTeamWarning_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/22/2018
--	Description: *	This procedure returns the Count of warning logs for employees reporting to logged in user.
--  Initial Revision created during MyDashboard redesign.  TFS 7137 - 05/22/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MyTeamWarning_Count] 
@nvcUserIdin nvarchar(10),
@intStatusIdin int,
@strSDatein datetime,
@strEDatein datetime
AS


BEGIN

SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcSQL nvarchar(max)

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)


SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [wl].[FormName] strFormID
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
	LEFT JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID 
	WHERE wl.StatusID = 1
	AND (CONVERT(VARCHAR, wl.Active) = '''+CONVERT(VARCHAR,@intStatusIdin)+''' OR  '''+CONVERT(VARCHAR,@intStatusIdin)+''' = ''-1'')
	AND wl.siteID <> -1
	AND (eh.Sup_ID = ''' + @nvcUserIdin + ''' OR eh.Mgr_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl1_ID = '''+ @nvcUserIdin +''' OR eh.SrMgrLvl2_ID = '''+ @nvcUserIdin +''')
	AND convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [wl].[SubmittedDate], 112) <= ''' + @strEDate + '''
  ) x 
) SELECT count(strFormID) FROM TempMain';
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
Return(@@ERROR);
	    
END --sp_SelectFrom_Warning_Log_MyTeamWarning_Count
GO




/*
sp_SelectReviewFrom_Coaching_Log(09).sql

Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 09 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018
Version 08: Modified to support additional Modules per TFS 8793 - 11/16/2017
Version 07: Modified to use LEFT Join on Submitter table for unknown Submitters - TFS 7541 - 09/19/2017
Version 06: New OTH DTT - TFS 7646 - 9/1/2017
Version 05: Updated to incorporate HNC and ICC Reports per TFS 7174 - 07/24/2017
Version 04: Updated to support MSR and MSRS Feeds. TFS 6147 - 06/02/2017
Version 03: New Breaks BRN and BRL feeds - TFS 6145 - 4/13/2017
Version 02: New quality NPN feed - TFS 5309 - 2/3/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
--  SQL split into 3 parts to overcome sql string size restriction.

--  Last Updated By: Susmitha Palacherla
--  1. TFS 1877 to support OMR Low CSAT logs should be viewable by hierarchy manger - 2/17/2016
--  2. TFS 1914 to support  OMR Short Calls feed with Manager Review - 2/17/2016
--  3. TFS 1732 to support SDR Training feed - 3/2/2016
--  4. TFS 2283 to support ODT Training feed - 3/22/2016
--  5. TFS 1709 to support Reassigned sups and Mgrs - 5/6/2016
--  6. TFS 2268 to support CTC Quality Other feed - 6/23/2016
--  7. TFS 3179 & 3186 to add support HFC & KUD Quality Other feeds - 7/15/2016
--  8. TFS 3677 to update Quality\KUD Flag - 8/18/2016
--  9. TFS 3972 to ADD SEA flag - 9/15/2016
-- 10. TFS 3758 Shared coaching sub-reasons may cause unexpected display issue in user interface - 10/14/2016
-- 11. TFS 3757 Include Yes/No value to coaching monitor question - 10/27/2016
-- 12. TFS 5309 NPN Load.  - 02/01/2017
-- 13. TFS 6145 BRN and BRL Feeds - 4/12/2017
-- 14. TFS 6147 Updated to support MSR and MSRS Feeds - 06/02/2017
-- 15. Modified to incorporate HNC and ICC Feed - TFS 7174 - 07/21/2017
-- 16. Modified to incorporate DTT feed - TFS 7646 - 09/01/2017
-- 17. Modified to use LEFT Join on Submitter table for unknown Submitters - TFS 7541 - 09/19/2017
-- 18. Modified to support additional Modules per TFS 8793 - 11/16/2017
-- 19. Encryption/decryption - emp name, emp lanid, email - TFS 7856 - 010/10/2018
-- 20. Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log] @intLogId BIGINT
AS

BEGIN

DECLARE	

  @nvcSQL nvarchar(max),
  @nvcSQL1 nvarchar(max),
  @nvcSQL2 nvarchar(max),
  @nvcSQL3 nvarchar(max),
  @nvcEmpID nvarchar(10),
  @nvcMgrID nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcEmpID = (SELECT [EmpID] From [EC].[Coaching_Log] WHERE [CoachingID] = @intLogId)	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID)

SET @nvcSQL1 = '
SELECT cl.CoachingID numID,
  cl.FormName strFormID,
  cl.ModuleID,
  m.Module,
  sc.CoachingSource	strFormType,
  cl.StatusId strStatusID,
  s.Status strFormStatus,
  cl.EventDate EventDate,
  cl.CoachingDate CoachingDate,
  cl.SubmitterID strSubmitterID,
  cl.SupID strCLSupID,
  cl.MgrID strCLMgrID,
  vehSubmitter.Emp_LanID strSubmitter,		
  vehSubmitter.Emp_Name strSubmitterName,
  vehSubmitter.Emp_Email strSubmitterEmail,	
  cl.EmpID strEmpID,		
  veh.Emp_LanID strEmpLanID,
  veh.Emp_Name strEmpName,
  veh.Emp_Email strEmpEmail,
  st.City strEmpSite,
  eh.Sup_ID strEmpSupID,
  veh.Sup_LanID strEmpSup,
  veh.Sup_Name strEmpSupName,
  veh.Sup_Email strEmpSupEmail,
  CASE 
    WHEN (cl.[statusId] IN (6, 8) AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId] = 5 AND cl.[ModuleID] = 2 AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_SupID] IS NOT NULL AND cl.[Review_SupID] = cl.[ReassignedToID] AND [ReassignCount]= 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_SupID])
    ELSE ''NA''
  END strReassignedSupName,	
  eh.Mgr_ID strEmpMgrID,
  CASE 
    WHEN cl.[strReportCode] LIKE ''LCS%'' THEN [EC].[fn_strEmpLanIDFromEmpID](cl.[MgrID])
    ELSE veh.Mgr_LanID 
  END strEmpMgr,
  CASE
    WHEN cl.[strReportCode] LIKE ''LCS%'' AND cl.[MgrID] <> ''' + @nvcMgrID + ''' THEN [EC].[fn_strEmpNameFromEmpID](cl.[MgrID]) + '' (Assigned Reviewer)''
    ELSE veh.Mgr_Name 
  END strEmpMgrName,
  veh.Mgr_Email strEmpMgrEmail,
  CASE 
    WHEN (cl.[statusId] = 5  AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId] = 7  AND cl.[ModuleID] = 2 AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_MgrID] IS NOT NULL AND cl.[Review_MgrID] = cl.[ReassignedToID] AND [ReassignCount] = 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_MgrID])
    ELSE ''NA''
  END strReassignedMgrName,';
	
SET @nvcSQL2 = '
  CASE WHEN cl.[Review_SupID] IS NOT NULL THEN vehSup.Emp_Name
    ELSE cl.[Review_SupID] END strReviewSupervisor,
    CASE WHEN cl.[Review_MgrID] IS NOT NULL THEN vehMgr.Emp_Name
    ELSE cl.[Review_MgrID] END strReviewManager,
  cl.ReassignedToID,
  sc.SubCoachingSource strSource,
  CASE 
    WHEN sc.SubCoachingSource in (''Verint-GDIT'', ''Verint-TQC'', ''LimeSurvey'', ''IQS'', ''Verint-GDIT Supervisor'') THEN 1 
	ELSE 0 
  END isIQS,
  CASE 
    WHEN sc.SubCoachingSource = ''Coach the coach'' THEN 1 
	ELSE 0 
  END isCTC,
  cl.isUCID isUCID,
  cl.UCID strUCID,
  cl.isVerintID	isVerintMonitor,
  cl.VerintID strVerintID,
  cl.VerintFormName VerintFormName,
  cl.isCoachingMonitor isCoachingMonitor,
  cl.isAvokeID isBehaviorAnalyticsMonitor,
  cl.AvokeID strBehaviorAnalyticsID,
  cl.isNGDActivityID isNGDActivityID,
  cl.NGDActivityID strNGDActivityID,
  CASE WHEN (cc.CSE = ''Opportunity'' AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "Customer Service Escalation",
  CASE WHEN (cc.CCI IS NOT NULL AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "Current Coaching Initiative",
  CASE WHEN (cc.OMR IS NOT NULL AND cc.LCS IS NULL AND cc.SDR IS NULL AND cc.ODT IS NULL AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "OMR / Exceptions",
  CASE WHEN (cc.ETSOAE IS NOT NULL AND cl.strReportCode LIKE ''OAE%'') THEN 1 ELSE 0 END "ETS / OAE",
  CASE WHEN (cc.ETSOAS IS NOT NULL AND cl.strReportCode LIKE ''OAS%'') THEN 1 ELSE 0 END "ETS / OAS",
  CASE WHEN (cc.ETSHNC IS NOT NULL AND cl.strReportCode LIKE ''HNC%'') THEN 1 ELSE 0 END "ETS / HNC",
  CASE WHEN (cc.ETSICC IS NOT NULL AND cl.strReportCode LIKE ''ICC%'') THEN 1 ELSE 0 END "ETS / ICC",
  CASE WHEN (cc.OMRBRN IS NOT NULL AND cl.strReportCode LIKE ''BRN%'') THEN 1 ELSE 0 END "OMR / BRN",
  CASE WHEN (cc.OMRBRL IS NOT NULL AND cl.strReportCode LIKE ''BRL%'') THEN 1 ELSE 0 END "OMR / BRL",
  CASE WHEN (cc.OMRIAE IS NOT NULL AND cl.strReportCode LIKE ''IAE2%'') THEN 1 ELSE 0 END "OMR / IAE",
  CASE WHEN (cc.OMRIAE IS NOT NULL AND cl.strReportCode LIKE ''IAEF%'') THEN 1 ELSE 0 END "OMR / IAEF",
  CASE WHEN (cc.OMRIAT IS NOT NULL AND cl.strReportCode LIKE ''IAT%'') THEN 1 ELSE 0 END "OMR / IAT",
  CASE WHEN (cc.OMRISQ IS NOT NULL AND cl.strReportCode LIKE ''ISQ%'') THEN 1 ELSE 0 END "OMR / ISQ",
  CASE WHEN (cc.LCS IS NOT NULL AND cl.strReportCode LIKE ''LCS%'') THEN 1 ELSE 0 END "LCS",
  CASE WHEN (cc.SDR IS NOT NULL AND cl.strReportCode LIKE ''SDR%'') THEN 1 ELSE 0 END "Training / SDR",
  CASE WHEN (cc.ODT IS NOT NULL AND cl.strReportCode LIKE ''ODT%'') THEN 1 ELSE 0 END "Training / ODT",
  CASE WHEN (cc.CTC IS NOT NULL AND cl.strReportCode LIKE ''CTC%'') THEN 1 ELSE 0 END "Quality / CTC",
  CASE WHEN (cc.HFC IS NOT NULL AND cl.strReportCode LIKE ''HFC%'') THEN 1 ELSE 0 END "Quality / HFC",
  CASE WHEN (cc.KUD IS NOT NULL AND cl.strReportCode LIKE ''KUD%'') THEN 1 ELSE 0 END "Quality / KUD",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''NPN%'') THEN 1 ELSE 0 END "Quality / NPN",
  CASE WHEN (cc.SEA IS NOT NULL AND cl.strReportCode LIKE ''SEA%'') THEN 1 ELSE 0 END "OTH / SEA",
  CASE WHEN (cc.DTT IS NOT NULL AND cl.strReportCode LIKE ''DTT%'') THEN 1 ELSE 0 END "OTH / DTT",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''MSR2%'') THEN 1 ELSE 0 END "PSC / MSR",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''MSRS%'') THEN 1 ELSE 0 END "PSC / MSRS",
  cl.Description txtDescription,
  cl.CoachingNotes txtCoachingNotes,
  cl.isVerified,
  cl.SubmittedDate,
  cl.StartDate,
  cl.SupReviewedAutoDate,
  cl.isCSE,
  cl.MgrReviewManualDate,
  cl.MgrReviewAutoDate,
  cl.MgrNotes txtMgrNotes,
  cl.isCSRAcknowledged,
  CASE WHEN (cl.[Review_SupID] IS NOT NULL AND cl.[Review_SupID] <> '''') THEN 1
    ELSE 0 END isSupAcknowledged,
  cl.isCoachingRequired,
  cl.CSRReviewAutoDate,
  cl.CSRComments txtCSRComments
FROM [EC].[Coaching_Log] cl ';
	    
SET @nvcSQL3 = '
JOIN 
(
  SELECT ccl.FormName,
    MAX(CASE WHEN [cr].[CoachingReason] = ''Customer Service Escalation'' THEN [clr].[Value] ELSE NULL END)	CSE,
    MAX(CASE WHEN [cr].[CoachingReason] = ''Current Coaching Initiative'' THEN [clr].[Value] ELSE NULL END)	CCI,
    MAX(CASE WHEN [cr].[CoachingReason] = ''OMR / Exceptions'' THEN [clr].[Value] ELSE NULL END) OMR,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 120 THEN [clr].[Value] ELSE NULL END) ETSOAE,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 121 THEN [clr].[Value] ELSE NULL END) ETSOAS,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 240 THEN [clr].[Value] ELSE NULL END) ETSHNC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 241 THEN [clr].[Value] ELSE NULL END) ETSICC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 29 THEN [clr].[Value] ELSE NULL END) OMRIAE,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 231 THEN [clr].[Value] ELSE NULL END) OMRIAT,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 238 THEN [clr].[Value] ELSE NULL END) OMRBRN,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 239 THEN [clr].[Value] ELSE NULL END) OMRBRL,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 34 THEN [clr].[Value] ELSE NULL END) LCS,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 23 THEN [clr].[Value] ELSE NULL END) OMRISQ,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 232 THEN [clr].[Value] ELSE NULL END) SDR,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 233 THEN [clr].[Value] ELSE NULL END) ODT,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 73 THEN [clr].[Value] ELSE NULL END) CTC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 12 THEN [clr].[Value] ELSE NULL END) HFC,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 11 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END) KUD,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 3 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	SEA,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 3 AND [clr].[SubCoachingReasonID] = 242) THEN [clr].[Value] ELSE NULL END) DTT,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 5 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	NPN_PSC
  FROM [EC].[Coaching_Log_Reason] clr,
    [EC].[DIM_Coaching_Reason] cr,
	[EC].[Coaching_Log] ccl 
  WHERE [ccl].[CoachingID] = ''' + CONVERT(NVARCHAR, @intLogId) + '''
    AND [clr].[CoachingReasonID] = [cr].[CoachingReasonID]
    AND [ccl].[CoachingID] = [clr].[CoachingID] 
  GROUP BY ccl.FormName 
) cc ON [cl].[FormName] = [cc].[FormName]
JOIN [EC].[Employee_Hierarchy] eh ON [cl].[EMPID] = [eh].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON [veh].[Emp_ID] = [eh].[Emp_ID]
LEFT JOIN [EC].[View_Employee_Hierarchy] vehSubmitter WITH (NOLOCK) ON [cl].[SubmitterID] = [vehSubmitter].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehSup WITH (NOLOCK) ON ISNULL([cl].[Review_SupID], ''999999'') = [vehSup].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehMgr WITH (NOLOCK) ON ISNULL([cl].[Review_MgrID], ''999999'') = [vehMgr].[Emp_ID]
JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
JOIN [EC].[DIM_Source] sc ON [cl].[SourceID] = [sc].[SourceID] 
JOIN [EC].[DIM_Site] st ON [cl].[SiteID] = [st].[SiteID] 
JOIN [EC].[DIM_Module] m ON [cl].[ModuleID] = [m].[ModuleID]
ORDER BY [cl].[FormName]';
		
SET @nvcSQL =  @nvcSQL1 +  @nvcSQL2 +  @nvcSQL3;
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Coaching_Log






GO



/*
sp_SelectReviewFrom_Coaching_Log_Reasons(02).sql

Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

*/


IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log_Reasons' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_Reasons]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log Reason and Sub Coaching Reason values for 
--  a given Form Name.
--  Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_Reasons] @intLogId BIGINT
AS

BEGIN
	DECLARE	

	@nvcSQL nvarchar(max)

SET @nvcSQL = 'SELECT cr.CoachingReason, scr.SubCoachingReason, clr.value
FROM [EC].[Coaching_Log_Reason] clr join [EC].[DIM_Coaching_Reason] cr
ON[clr].[CoachingReasonID] = [cr].[CoachingReasonID]Join [EC].[DIM_Sub_Coaching_Reason]scr
ON [clr].[SubCoachingReasonID]= [scr].[SubCoachingReasonID]
Where CoachingID = '''+CONVERT(NVARCHAR(20),@intLogId) + '''
ORDER BY cr.CoachingReason,scr.SubCoachingReason,clr.value'

		
EXEC (@nvcSQL)	
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log_Reasons





GO




/*
sp_SelectReviewFrom_Warning_Log(02).sql

Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

*/



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/08/2014
--	Description: 	This procedure displays the Warning Log attributes for given Form Name. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 07/10/2015
--  Updated per SCR 14966 to add Hierarchy IDs to the select list.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--  Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log] @intLogId BIGINT
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT wl.WarningID numID,
  wl.FormName strFormID,
  wl.ModuleID,
  m.Module,
  ''Direct'' strFormType,
  ''Completed'' strFormStatus,
  wl.WarningGivenDate	EventDate,
  wl.SubmitterID strSubmitterID,
  wl.SupID strCLSupID,
  wl.MgrID strCLMgrID,
  wl.EmpID strEmpID,	
  vehSubmitter.Emp_LanID strSubmitter,		
  vehSubmitter.Emp_Name strSubmitterName,
  vehSubmitter.Emp_Email strSubmitterEmail,			
  veh.Emp_LanID strEmpLanID,
  veh.Emp_Name strEmpName,
  veh.Emp_Email strEmpEmail,
  st.City strEmpSite,
  eh.Sup_ID strEmpSupID,
  veh.Sup_LanID strEmpSup,
  veh.Sup_Name strEmpSupName,
  veh.Sup_Email strEmpSupEmail,
  eh.Mgr_ID strEmpMgrID,
  veh.Mgr_LanID strEmpMgr,
  veh.Mgr_Name strEmpMgrName,
  veh.Mgr_Email strEmpMgrEmail,
  ''Warning'' strSource,
  wl.SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh ON veh.Emp_ID = eh.Emp_ID
JOIN [EC].[Warning_Log] wl ON [wl].[EMPID] = [eh].[Emp_ID]
JOIN [EC].[View_Employee_Hierarchy] vehSubmitter WITH (NOLOCK) ON [wl].[SubmitterID] = [vehSubmitter].[Emp_ID]
JOIN [EC].[DIM_Module] m ON [wl].[ModuleID] = [m].[ModuleID]
JOIN [EC].[DIM_Site] st ON [wl].[SiteID] = [st].[SiteID]
WHERE [wl].[warningId] = ''' + CONVERT(NVARCHAR, @intLogId ) + '''
ORDER BY [wl].[FormName]';

EXEC (@nvcSQL)
Print (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Warning_Log

GO



/*
sp_SelectReviewFrom_Warning_Log_Reasons(02).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log_Reasons' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log_Reasons]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Warning Log Reason and Sub Coaching Reason values for 
--  a given Form Name.
--  Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log_Reasons] @intLogId BIGINT
AS

BEGIN
	DECLARE	

	@nvcSQL nvarchar(max)


SET @nvcSQL = 'SELECT cr.CoachingReason, scr.SubCoachingReason, wlr.value
FROM [EC].[Warning_Log_Reason] wlr join [EC].[DIM_Coaching_Reason] cr
ON[wlr].[CoachingReasonID] = [cr].[CoachingReasonID]Join [EC].[DIM_Sub_Coaching_Reason]scr
ON [wlr].[SubCoachingReasonID]= [scr].[SubCoachingReasonID]
Where WarningID = '''+CONVERT(NVARCHAR(20),@intLogId) + '''
ORDER BY cr.CoachingReason,scr.SubCoachingReason,wlr.value'

		
EXEC (@nvcSQL)	
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Warning_Log_Reasons



GO




/*
sp_Select_Behaviors(02).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Behaviors' 
)
   DROP PROCEDURE [EC].[sp_Select_Behaviors]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/10/2015
--	Description: *	This procedure returns a list of Behaviors to
--  be made available in the UI submission page for Modules that track Behavior.
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Behaviors] 
@intModuleIDin int

AS
BEGIN
	DECLARE	
	@isByBehavior BIT,
	@nvcSQL nvarchar(max)
	
SET @isByBehavior = (SELECT ByBehavior FROM [EC].[DIM_Module] Where [ModuleID] = @intModuleIDin and isActive =1)
IF @isByBehavior = 1

SET @nvcSQL = 'Select [BehaviorID], [Behavior] as Behavior from [EC].[DIM_Behavior]
Order by CASE WHEN [Behavior] = ''Other'' Then 1 Else 0 END, [Behavior]'


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Behaviors
GO




/*
sp_Select_CallID_By_Module(02).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CallID_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CallID_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module value and returns the Call Ids 
--                  valid for that Module and the format for the corresponding Ids for validation.
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CallID_By_Module] 
@intModuleIDin INT

AS
BEGIN
	DECLARE	
	@strModulein nvarchar(30),
	@nvcSQL nvarchar(max)

SET @strModulein = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)

SET @nvcSQL = 'Select [CallIdType] as CallIdType, [Format]as IdFormat from [EC].[CallID_Selection]
Where ' + @strModulein +' = 1' 


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_CallID_By_Module

GO




/*
sp_Select_CoachingReasons_By_Module(03).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 02: Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CoachingReasons_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO









--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/20/2014
--	Description: *	This procedure takes a Module 
--  and returns the Coaching Reasons associated with the Module. 
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 09/25/2014
-- Modified per SCR 13479 to add logic for incorporating WARNINGs.
-- Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
-- Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module] 
@intModuleIDin INT, @strSourcein nvarchar(30), @isSplReason BIT, @splReasonPrty INT, @strEmpIDin nvarchar(10), @strSubmitterIDin nvarchar(10)

AS
BEGIN
	DECLARE	
	
	@nvcSQL nvarchar(max),
	@strModulein nvarchar(30),
	@nvcDirectHierarchy nvarchar(10)

OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
SET @strModulein = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)
SET @nvcDirectHierarchy = [EC].[fn_strDirectUserHierarchy] (@strEmpIDin, @strSubmitterIDin)

--print @nvcDirectHierarchy
	
IF @isSplReason = 1 

IF @nvcDirectHierarchy = 'Yes'



SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = '''+ CONVERT(NVARCHAR,@splReasonPrty) + '''
Order by  [CoachingReasonID]'

Else

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = 2
Order by  [CoachingReason]'

ELSE

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 and 
IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 0
Order by  [CoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_CoachingReasons_By_Module






GO



/*
sp_Select_Email_Attributes(02).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Email_Attributes' 
)
   DROP PROCEDURE [EC].[sp_Select_Email_Attributes]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/1814
--	Description: *	This procedure takes a Module, Source(Direct/Indirect), SubCoachingSource 
--  and isCSE and returns the Status and Email attributes.
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Email_Attributes] 
@intModuleIDin INT, @intSourceIDin INT, @bitisCSEin BIT

AS
BEGIN
	DECLARE	
	@Source nvarchar(30),
	@strModulein nvarchar(30),
	@SubSource nvarchar(100),
	@nvcSQL nvarchar(max)
	
	SET @strModulein = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)
	SET @Source = (Select [CoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)
	SET @SubSource = (Select [SubCoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)

SET @nvcSQL = 'Select [EC].[fn_strStatusIDFromStatus]([Status]) as StatusID, [Status]as StatusName, [Recipient] as Receiver,
 [Body] as EmailText, [isCCRecipient] as isCCReceiver, [CCRecipient] as CCReceiver
 from [EC].[Email_Notifications]
Where [Module]= '''+@strModulein+'''
and [Source] = '''+@Source+'''
and [SubSource] = '''+@SubSource+'''
and [isCSE] = '''+CONVERT(NVARCHAR(1),@bitisCSEin)+''''

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Email_Attributes




GO




/*
sp_Select_Employees_By_Module_And_Site(02).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla


Version 02: Submissions move to new architecture. Additional changes from V&V feedback - TFS 7136 - 04/30/2018
Version 01: Initial Revision. Created during Submissions move to new architecture - TFS 7136 - 04/10/2018 

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Employees_By_Module_And_Site' 
)
   DROP PROCEDURE [EC].[sp_Select_Employees_By_Module_And_Site]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/15/2018
--	Description: *	This procedure takes a ModuleID and SiteID and returns Employees.
--  Initial Revision. Created during Submissions move to new architecture - TFS 7136 - 04/30/2018 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Employees_By_Module_And_Site] 
@intModuleIDin INT, @intSiteIDin INT = -1, @nvcUserEmpIDin  nvarchar(10)


AS

BEGIN
DECLARE	
@isBySite BIT,
@nvcModulein nvarchar(30),
@nvcEmpJobCode nvarchar(20),
@nvcSitein nvarchar(30),
@dtmDate datetime,
@nvcSQL nvarchar(max),
@nvcSQL01 nvarchar(1000),
@nvcSQL02 nvarchar(1000),
@nvcSQL03 nvarchar(1000),
@nvcSQL04 nvarchar(1000)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]



SET @nvcModulein = (SELECT Module FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)
--SET @nvcSitein = (SELECT City FROM [EC].[DIM_Site] WHERE [SiteID] = @intSiteIDin)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcUserEmpIDin)

-- General Selection of employees based on Job codes flagged in Employee Selection table.

SET @nvcSQL01 = 'SELECT EH.Emp_ID
				,VEH.[Emp_Name] 
 FROM [EC].[View_Employee_Hierarchy] VEH  WITH (NOLOCK)  JOIN  [EC].[Employee_Hierarchy]EH WITH (NOLOCK) 
 ON VEH.[Emp_ID]= EH.[Emp_ID] JOIN [EC].[Employee_Selection]
 ON EH.[Emp_Job_Code]= [EC].[Employee_Selection].[Job_Code] JOIN [EC].[DIM_Site]S
 ON S.City = EH.Emp_Site
WHERE [EC].[Employee_Selection].[is'+ @nvcModulein + '] = 1
AND  (S.SiteID =('''+CONVERT(NVARCHAR,@intSiteIDin)+''') or '''+ CONVERT(NVARCHAR,@intSiteIDin) + ''' = -1)
AND VEH.[Emp_ID] <> '''+ @nvcUserEmpIDin + ''''


-- Conditional Filter to restrtict Training staff with specific job codes to submit only for certain job codes.

SET @nvcSQL02 = ' AND [Emp_Job_Code] NOT IN (''WTTR12'', ''WTTR13'', ''WTID13'')' 


-- Generic  Filter for all scenarios.

SET @nvcSQL03 = ' AND [End_Date] = ''99991231''
AND VEH.[Emp_LanID]is not NULL and VEH.[Sup_LanID] is not NULL and VEH.[Mgr_LanID]is not NULL
ORDER BY VEH.[Emp_Name] ASC'


IF @nvcEmpJobCode IN ('WTTR12', 'WTTR13', 'WTID13') 

SET @nvcSQL = @nvcSQL01 + @nvcSQL02 + @nvcSQL03 

ELSE
SET @nvcSQL = @nvcSQL01 + @nvcSQL03

--Print @nvcSQL

EXEC (@nvcSQL)	

CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_Select_Employees_By_Module
GO




/*
sp_Select_Employee_Details(02).sql
Last Modified Date: 05/16/2018
Last Modified By: Susmitha Palacherla

Version 02; Updated during MySubmission move to new architecture - TFS 7137 - 05/16/2018 
Version 01: Initial Revision. Created during Submissions move to new architecture - TFS 7136 - 04/10/2018 

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Employee_Details' 
)
   DROP PROCEDURE [EC].[sp_Select_Employee_Details]
GO

		
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/10/2018 
--	Description: *	This procedure takes an Employee Lan ID and returns the Employee details.
--  Initial Revision. Created during Submissions move to new architecture - TFS 7136 - 04/10/2018 
--  Updated during My Dashboard move to new architecture - TFS 7137 - 05/16/2018 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Employee_Details] 
@nvcEmpLanin nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcEmpID nvarchar(10),
	@nvcEmpRole nvarchar(40),
    @dtmDate datetime,
	@nvcSQL nvarchar(max);
	

OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
SET @dtmDate  = GETDATE()   
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanin,@dtmDate)
SET @nvcEmpRole = [EC].[fn_strGetUserRole](@nvcEmpID)


SET @nvcSQL = ';WITH UserRole (Emp_ID, Role)
 AS 
(SELECT EH.[Emp_ID], [EC].[fn_strGetUserRole](EH.[Emp_ID])
FROM EC.Employee_Hierarchy EH WITH (NOLOCK) 
WHERE EH.[Emp_ID] = '''+@nvcEmpID+ ''')
SELECT EH.[Emp_ID]
                ,VEH.[Emp_Name] 
	            ,VEH.[Sup_Name]
				,VEH.[Mgr_Name]
				,EH.[Emp_Site] 
				,EH.[Emp_Job_Code] 
			    ,UR.[Role]
				,RA.[NewSubmission]
				,RA.[MyDashboard]
				,RA.[HistoricalDashboard]
				,[EC].[fn_strCheckIf_ExcelExport](EH.[Emp_ID],UR.[Role]) ExcelExport
				,[EC].[fn_strCheckIf_ACLRole](EH.[Emp_ID], ''ECL'') ECLUser
 FROM [EC].[View_Employee_Hierarchy] VEH  WITH (NOLOCK)  JOIN  [EC].[Employee_Hierarchy]EH WITH (NOLOCK) 
 ON VEH.[Emp_ID]= EH.[Emp_ID] JOIN UserRole UR
 ON EH.[Emp_ID] = UR.[Emp_ID] JOIN [EC].[UI_Role_Page_Access] RA
 ON RA.RoleName = UR.Role
 WHERE EH.[Emp_ID] = '''+@nvcEmpID+ ''''

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Employee_Details



GO




/*
sp_Select_Modules_By_Job_Code(03).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 02: Modified to support Encryption of sensitive data (Open key)- TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Modules_By_Job_Code' 
)
   DROP PROCEDURE [EC].[sp_Select_Modules_By_Job_Code]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure takes the lan ID of the user and looks up the job code.
--  If Job code exists in the submisison table returns the valid submission modules.
--  If job code does not exist in the submisisons table returns 'CSR' as a valid sumission module.
--  Last Modified By: Susmitha Palacherla
--  Modified per TFS 861 to add Warnings to all Modules - 10/21/2015 
-- Modified per TFS 3877 to hard code Employee Ids for Mark Hackman and Scott Potter
-- to allow LSA and Training submissions which their job code does not have access to - 09/21/2016
--  Modified to support Encryption of sensitive data (Open key)- TFS 7856 - 10/23/2017
-- Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Modules_By_Job_Code] 
@nvcEmpIDin nvarchar(10)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpJobCode nvarchar(30),
	@nvcCSR nvarchar(30)


-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  


SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpIDin)

SET @nvcCSR = (SELECT CASE WHEN [CSR]= 1 THEN N'CSR' ELSE NULL END  as Module FROM [EC].[Module_Submission]
WHERE Job_Code = @nvcEmpJobCode)

--print @nvcCSR

if @nvcCSR is null

--'''+CONVERT(NVARCHAR,@intModuleIdin)+'''

SET @nvcSQL = 'SELECT TOP 1 CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, 1 AS ModuleID 
from [EC].[Module_Submission]'
 
ELSE

SET @nvcSQL = 'SELECT Module, ModuleID FROM 
(SELECT CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, 1 AS ModuleID from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION
SELECT CASE WHEN [Supervisor]= 1 THEN N''Supervisor'' ELSE NULL END as Module, 2 AS ModuleID from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [Quality]= 1 THEN N''Quality'' ELSE NULL END as Module, 3 AS ModuleID from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [LSA]= 1 THEN N''LSA'' ELSE NULL END as Module, 4 AS ModuleID from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''' OR '''+@nvcEmpIDin+''' in (''343549'',''408246'')
UNION 
SELECT CASE WHEN [Training]= 1 THEN N''Training'' ELSE NULL END as Module, 5 AS ModuleID from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''' OR '''+@nvcEmpIDin+''' in (''343549'',''408246''))AS Modulelist
where Module is not Null '
--Print @nvcSQL

EXEC (@nvcSQL)	

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 

END --sp_Select_Modules_By_Job_Code

GO




/*
sp_Select_Programs(02).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Programs' 
)
   DROP PROCEDURE [EC].[sp_Select_Programs]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure returns a list of Active Programs to
--  be made available in the UI submission page.
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Programs] 
@intModuleIDin int

AS
BEGIN
	DECLARE	
	@isByProgram BIT,
	@nvcSQL nvarchar(max)
	
SET @isByProgram = (SELECT ByProgram FROM [EC].[DIM_Module] Where [ModuleID] = @intModuleIDin and isActive =1)
IF @isByProgram = 1

SET @nvcSQL = 'Select [ProgramID],[Program] as Program from [EC].[DIM_Program]
Where isActive = 1
Order by [Program] '

--Print @nvcSQL

EXEC (@nvcSQL)	
END

GO




/*
sp_Select_ReasonNotCoachable_By_ReportCode(01).sql
Last Modified Date: 06/12/2018
Last Modified By: Susmitha Palacherla


Version 01: Document Initial Revision created during My dashboard redesign.  TFS 7137 - 05/28/2018

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Reasons_By_ReportCode' 
)
   DROP PROCEDURE [EC].[sp_Select_Reasons_By_ReportCode]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/12/2108
--	Description: *	This procedure takes a ReportCode and returns the list of Reasons.
-- Last Modified By: Susmitha Palacherla
-- Created during My Dashboard move to new architecture - TFS 7137 - 06/12/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Reasons_By_ReportCode] 
@nvcReportCode nvarchar(20)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)
	


SET @nvcSQL = 'Select [Reason] FROM [EC].[Reasons_By_ReportCode]
WHERE [ReportCode] = '''+ @nvcReportCode  +'''
ORDER BY [DisplayOrder]'


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Reasons_By_ReportCode


GO



/*
sp_Select_Rec_Employee_Hierarchy(03).sql
Last Modified Date: 05/04/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Historical dashboard move to new architecture - TFS 7138 - 05/04/2018

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Rec_Employee_Hierarchy' 
)
   DROP PROCEDURE [EC].[sp_Select_Rec_Employee_Hierarchy]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Returns a record from Employee Hierarchy table table given an Employee ID.
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--  Modified during Historical dashboard move to new architecture - TFS 7138 - 05/04/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Rec_Employee_Hierarchy]
@EmployeeId nvarchar(10)
AS


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

SELECT [Emp_ID]
  	  ,CONVERT(nvarchar(70),DecryptByKey(Emp_Name)) AS [Emp_Name]
      ,CONVERT(nvarchar(50),DecryptByKey(Emp_Email)) AS [Emp_Email]
	  ,CONVERT(nvarchar(30),DecryptByKey(Emp_LanID)) AS [Emp_LanID]
	  ,[Sup_ID]
      ,CONVERT(nvarchar(70),DecryptByKey(Sup_Name)) AS [Sup_Name]
	  ,CONVERT(nvarchar(50),DecryptByKey(Sup_Email)) AS [Sup_Email]
	  ,[Mgr_ID]
	  ,CONVERT(nvarchar(70),DecryptByKey(Mgr_Name)) AS [Mgr_Name]
	  ,CONVERT(nvarchar(50),DecryptByKey(Mgr_Email)) AS [Mgr_Email]
 FROM [EC].[Employee_Hierarchy]
 WHERE [Emp_ID]= @EmployeeId


CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Select_Rec_Employee_Hierarchy


GO




/*
sp_Select_Sites(01).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla


Version 01: Initial Revision. Created during Submissions move to new architecture - TFS 7136 - 04/10/2018 

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Sites' 
)
   DROP PROCEDURE [EC].[sp_Select_Sites]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	04/17/2018
--	Description: *	This procedure selects active Sites to be displayed in the UI
--  Created during Submissions move to new architecture - TFS 7136 - 04/10/2018.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Sites] 

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'select distinct * from ec.DIM_Site where city != ''unknown'' and isActive = 1 order by city'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Sites



GO




/*
sp_Select_Sites_For_Dashboard(02).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Sites_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_Sites_For_Dashboard]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/06/2015
--	Description: *	This procedure selects Sites to be displayed in the dashboard
--  Site dropdown list.
-- Last Modified By: Susmitha Palacherla
-- Modified per SCR 14893 Round 2 Performance improvements.
-- Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Sites_For_Dashboard] 

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'SELECT X.SiteID, X.Site  FROM
(SELECT ''-1'' SiteID, ''All Sites'' Site,  01 Sortorder From [EC].[DIM_Site]
UNION
SELECT  CONVERT(nvarchar,[SiteID]) SiteID, [City] Site, 02 Sortorder From [EC].[DIM_Site]
where [isActive]= 1)X
ORDER BY X.Sortorder, Site'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Sites_For_Dashboard

GO




/*
sp_Select_Sources_For_Dashboard(03).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 03 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

Version 02: --  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Sources_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_Sources_For_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/06/2015
--	Description: *	This procedure selects Sources to be displayed in the dashboard
--  Source dropdown list.
--  Last Modified: 4/6/2016
--  Last Modified By: Susmitha Palacherla
--  Modified to add additional HR job code WHHR70 - TFS 1423 - 12/15/2015
--  Modified to reference table for HR job codes - TFS 2332 - 4/6/2016
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
-- Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	====================================================================
CREATE PROCEDURE [EC].[sp_Select_Sources_For_Dashboard] 
@nvcEmpID nvarchar(10)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max),
	@nvcDisplayWarnings nvarchar(5)

	
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 		

SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcEmpID),'NO')) 

-- Check users job code and show 'Warning' as a source only for HR users.
IF @nvcDisplayWarnings = 'YES'

SET @nvcSQL = 'SELECT X.SourceId, X.Source FROM
(SELECT ''-1'' SourceId, ''All Sources'' Source,  01 Sortorder From [EC].[DIM_Source]
UNION
SELECT CONVERT(nvarchar,[SourceId]) SourceId, 
[SubCoachingSource] Source,  02 Sortorder From [EC].[DIM_Source]
Where [CoachingSource] = ''Direct''
and [SubCoachingSource] <> ''Unknown''
and [isActive]= 1)X
ORDER BY X.Sortorder, X.Source'

ELSE

SET @nvcSQL = 'SELECT X.SourceId, X.Source FROM
(SELECT ''-1'' SourceId, ''All Sources'' Source,  01 Sortorder From [EC].[DIM_Source]
UNION
SELECT  CONVERT(nvarchar,[SourceId]) SourceId,
[SubCoachingSource] Source, 02 Sortorder From [EC].[DIM_Source]
Where [CoachingSource] = ''Direct''
and[SubCoachingSource] not in ( ''Warning'',''Unknown'')
and [isActive]= 1)X
ORDER BY X.Sortorder, X.Source'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Sources_For_Dashboard

GO




/*
sp_Select_Source_By_Module(02).sql
Last Modified Date: 04/10/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Source_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_Source_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module and Source (Direct or Indirect)
--  and returns the Source IDis for the coresponding Sub Coaching Source.
--  Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Source_By_Module] 
@intModuleIDin INT, @strSourcein nvarchar(30)

AS
BEGIN
	DECLARE	
	@strModulein nvarchar(30),
	@nvcSQL nvarchar(max)

SET @strModulein = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)

SET @nvcSQL = 'Select [SourceID] as SourceID, [SubCoachingSource]as Source from [EC].[DIM_Source]
Where ' + @strModulein +' = 1 and 
IsActive = 1 and 
CoachingSource =  '''+@strSourcein+'''
Order by [SubCoachingSource] '


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Source_By_Module


GO




/*
sp_Select_States_For_Dashboard(02).sql
Last Modified Date: 5/20/2017
Last Modified By: Susmitha Palacherla


Version 02: Modified during My dashboard move to new architecture - TFS 7137 - 05/20/2018
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_States_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_States_For_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/13/2015
--	Description: *	This procedure returns list of possible States for Warning Logs.
--  The 2 possible States of a Warning log are Active (within 91 days of warning given date) and Expired 
--  for logs that have WarningGivenDate over 91 days.
--   Modified during My dashboard move to new architecture - TFS 7137 - 05/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_States_For_Dashboard] 


AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)



SET @nvcSQL = 'SELECT X.StateText, X.StateValue FROM
(SELECT ''All States'' StateText, ''-1'' StateValue, 01 Sortorder 
UNION
SELECT ''Active'' StateText, ''1'' StateValue, 02 Sortorder 
UNION
SELECT ''Expired'' StateText, ''0'' StateValue, 03 Sortorder 
)X
ORDER BY X.Sortorder'



--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_States_For_Dashboard



GO



/*
sp_Select_Statuses_For_Dashboard(02).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Statuses_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_Statuses_For_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/06/2015
--	Description: *	This procedure selects Statuses to be displayed in the dashboard
--  Status dropdown list.
--   Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Statuses_For_Dashboard] 


AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'SELECT X.StatusId, X.Status FROM
(SELECT ''-1'' StatusId, ''All Status'' Status,  01 Sortorder From [EC].[DIM_Status]
UNION
SELECT CONVERT(nvarchar,[StatusID]) StatusId, [Status] Status,  02 Sortorder From [EC].[DIM_Status]
Where [Status] NOT IN (''Inactive'', ''Unknown''))X
ORDER BY X.Sortorder'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Statuses_For_Dashboard

GO




/*
sp_Select_SubCoachingReasons_By_Reason(04).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 04: Submissions move to new architecture. Additional changes from V&V feedback - TFS 7136 - 04/30/2018

Version 03 : Modified to open Encryption key. TFS 10760 - 04/24/2018

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_SubCoachingReasons_By_Reason' 
)
   DROP PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module, Direct or Indirect, a Coaching Reason and the submitter lanid 
--  and returns the Sub Coaching Reasons associated with the Coaching Reason.
-- Last Modified By: Susmitha Palacherla
-- Modified during Submissions move to new architecture - TFS 7136 - 04/30/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason] 
@intReasonIDin INT, @intModuleIDin INT, @strSourcein nvarchar(30), @nvcEmpIDin nvarchar(10)

AS
BEGIN
	DECLARE	
	@nvcEmpJobCode nvarchar(30),
	@strModule nvarchar(30),
	@strCoachReason nvarchar(100),
	@nvcSQL nvarchar(max)
	

SET @strModule = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)	
SET @strCoachReason = (SELECT [CoachingReason] FROM [EC].[DIM_Coaching_Reason] WHERE [CoachingReasonID] = @intReasonIDin)	
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy WHERE Emp_ID = @nvcEmpIDin)


IF  (@strSourcein = 'Direct' and (@nvcEmpJobCode like 'WISY13' OR @nvcEmpJobCode like 'WSQA70' OR @nvcEmpJobCode like '%CS40%' OR @nvcEmpJobCode like '%CS50%' OR @nvcEmpJobCode like '%CS60%'))
OR
(@strSourcein = 'Direct' and @strCoachReason in ('Verbal Warning', 'Written Warning' ,'Final Written Warning'))

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModule +' = 1 
and [CoachingReason] = '''+@strCoachReason +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
Order by CASE WHEN [SubCoachingReason] in (''Other: Specify reason under coaching details.'', ''Other Policy (non-Security/Privacy)'', ''Other: Specify'') Then 1 Else 0 END, [SubCoachingReason]'

ELSE

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModule +' = 1 
and [CoachingReason] = '''+@strCoachReason +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
AND [SubCoachingReason] <> ''ETS''
Order by CASE WHEN [SubCoachingReason] in (''Other: Specify reason under coaching details.'', ''Other Policy (non-Security/Privacy)'', ''Other: Specify'') Then 1 Else 0 END, [SubCoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_SubCoachingReasons_By_Reason




GO




/*
sp_Select_SurveyDetails_By_SurveyID(03).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified during Survey move to new architecture - TFS 10904 - 05/08/2018

Version 02: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_SurveyDetails_By_SurveyID' 
)
   DROP PROCEDURE [EC].[sp_Select_SurveyDetails_By_SurveyID]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/24/2015
--	Description: Given a survey ID this procedure returns the details of the Survey like
-- the Employee ID, eCL Form Name and whether or not a Hot Topic question is associated with this Survey.
-- TFS 549 - CSR Survey Setup - 09/24/2015
-- Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018
-- Modified during Survey move to new architecture - TFS 10904 - 05/08/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_SurveyDetails_By_SurveyID] 
@intSurveyID INT

AS
BEGIN
	DECLARE	
	--@intSurveyTypeID INT,
	@hasHotTopic BIT,
	@hasPilot BIT,
	@nvcSQL nvarchar(max)
	
--SET @intSurveyTypeID = (SELECT [SurveyTypeID] FROM [EC].[Survey_Response_Header]
--WHERE [SurveyID] = @intSurveyID)
	
SET @hasHotTopic = (SELECT [EC].[fn_bitCheckIfHotTopicSurvey](@intSurveyID))
SET @hasPilot = (SELECT [EC].[fn_bitCheckIfPilotSurvey](@intSurveyID))



SET @nvcSQL = 'SELECT SRH.[EmpID],
                      SRH.[CoachingID],
					  SRH.[FormName],
					  SRH.[Status],
					  '+CONVERT(NVARCHAR,@hasHotTopic)+' hasHotTopic,
					   '+CONVERT(NVARCHAR,@hasPilot)+' hasPilot
			  FROM [EC].[Survey_Response_Header]SRH
			  WHERE [SurveyID] = '+CONVERT(NVARCHAR,@intSurveyID)+''
			 


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_SurveyDetails_By_SurveyID

GO



/*
sp_Select_Values_By_Reason(03).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 03: Submissions move to new architecture. Additional changes from V&V feedback - TFS 7136 - 04/30/2018

Version 02: Modified during Submissions move to new architecture - TFS 7136 - 04/10/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Values_By_Reason' 
)
   DROP PROCEDURE [EC].[sp_Select_Values_By_Reason]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module and Coaching Reason 
--  and returns the Values associated with the Coaching Reason for that Module. 
--  Modified during Submissions move to new architecture - TFS 7136 - 04/30/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Values_By_Reason] 
@intReasonIDin INT, @intModuleIDin INT, @strSourcein nvarchar(30)

AS
BEGIN
	DECLARE	
	@strModulein nvarchar(30),
	@strReasonin nvarchar(100),
	@nvcSQL nvarchar(max)

SET @strModulein = (SELECT [Module] FROM [EC].[DIM_Module] WHERE [ModuleID] = @intModuleIDin)
SET @strReasonin = (SELECT [CoachingReason] FROM [EC].[DIM_Coaching_Reason] WHERE [CoachingReasonID] = @intReasonIDin)	

SET @nvcSQL = 'Select CASE WHEN [isOpportunity] = 1 THEN ''Opportunity'' ElSE NULL END as Value from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
UNION
Select CASE WHEN [isReinforcement] = 1 THEN ''Reinforcement'' ElSE NULL END as Value from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1'


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Values_By_Reason
GO




/*
sp_Select_Values_For_Dashboard(02).sql
Last Modified Date: 04/30/2018
Last Modified By: Susmitha Palacherla

Version 02 : Modified during Hist dashboard move to new architecture - TFS 7138 - 04/30/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Values_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_Values_For_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/06/2015
--	Description: *	This procedure selects Values to be displayed in the dashboard
--  filter dropdown list.
-- Modified during Hist dashboard move to new architecture - TFS 7138 - 04/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Values_For_Dashboard] 


AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'SELECT X.ValueValue, X.Value  FROM
(SELECT ''-1'' ValueValue,''All Values'' Value,  01 Sortorder 
UNION
SELECT Distinct [Value] ValueValue, [Value] Value,  02 Sortorder From [EC].[Coaching_Log_Reason] WITH(NOLOCK)
Where [Value] IS NOT NULL
AND [Value] <> ''Not Coachable'')X
ORDER BY X.Sortorder, X.Value'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Values_For_Dashboard
GO




IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update6Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update6Review_Coaching_Log]
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Employee_Acknowledge' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Employee_Acknowledge]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--    ====================================================================
--    Author:         Jourdain Augustin
--    Create Date:    7/31/13
--    Description:    This procedure allows csrs to update the e-Coaching records from the review page --    for Pending Acknowledgment records. 
--    Last Update:    11/02/2015
--    Updated per TFS 864 to open CSR comments for all ecls
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Employee_Acknowledge]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @bitisCSRAcknowledged bit,
  @dtmCSRReviewAutoDate datetime,
  @nvcCSRComments Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE Status = @nvcFormStatus),
  isCSRAcknowledged = @bitisCSRAcknowledged,
  CSRReviewAutoDate = @dtmCSRReviewAutoDate,
  CSRComments = @nvcCSRComments
WHERE CoachingID = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Employee_Acknowledge



GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update4Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update4Review_Coaching_Log]
GO


IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Employee_Pending' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Employee_Pending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:     11/16/12
--    Description:    This procedure allows csrs to update the e-Coaching records from the review page. 
--    Last Update:    03/04/2014
--    Updated per SCR 12359 to handle deadlocks with retries.
--    Last Update:    03/17/2014 - Modified for eCoachingDev DB
--    Last Update:    03/25/2014 - Modified Update query
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Employee_Pending]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @bitisCSRAcknowledged bit,
  @nvcCSRComments Nvarchar(max),
  @dtmCSRReviewAutoDate datetime
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  isCSRAcknowledged = @bitisCSRAcknowledged,
  CSRReviewAutoDate = @dtmCSRReviewAutoDate,
  CSRComments = @nvcCSRComments
WHERE CoachingID = @nvcFormID
OPTION (MAXDOP 1);	
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Employee_Pending



GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update3Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update3Review_Coaching_Log]
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Manager_Pending_CSE' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Manager_Pending_CSE]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:     11/16/12
--    Description:    This procedure allows managers to update the e-Coaching records from the review page with No, this is not a confirmed Customer Service Escalation. 
--    Updated per SCR 13891 to capture review mgr id - 12/16/2014
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    TFS 7137 move my dashboard to new architecture - 06/12/2018
--    =====================================================================
CREATE  PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Manager_Pending_CSE]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @nvcReviewMgrID Nvarchar(10),
  @dtmMgrReviewAutoDate datetime,
  @dtmMgrReviewManualDate datetime,
  @bitisCSE bit,
  @nvcMgrNotes Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY

	
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_MgrID = @nvcReviewMgrID,
  isCSE = @bitisCSE,
  MgrReviewAutoDate = @dtmMgrReviewAutoDate,
  MgrReviewManualDate = @dtmMgrReviewManualDate,
  MgrNotes = @nvcMgrNotes,
  ReassignCount = 0
WHERE CoachingID = @nvcFormID
OPTION (MAXDOP 1);	
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Manager_Pending_CSE



GO



/*
sp_Update_Review_Coaching_Log_Manager_Pending_Research(04).sql
Last Modified Date: 06/01/2018
Last Modified By: Susmitha Palacherla

Version 04: Renamed during My Dashboard move to new architecture - TFS 7137 - 06/01/2018

Version 03: Updated to increase size for
param @nvcstrReasonNotCoachable to 100 - TFS 6881 - 06/01/2017

Version 02: New Breaks BRN and BRL feeds - TFS 6145 - 4/13/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update5Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Manager_Pending_Research' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Manager_Pending_Research]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:    11/16/2012
--    Description:    This procedure allows managers to update the e-Coaching records from the review page for Outlier records. 
--    Updated per TFS 644 to add IAE and IAT reports - 09/17/2015
--    Updated per TFS 2145 to reset Email reminder attributes for OMR logs  - 3/2/2016
--    Updated per TFS 1732 to support Training sdr  feed  - 3/4/2016
--    Updated per TFS 2283 to support Training odt feed  - 3/22/2016
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    Updated per TFS 6145  to support Training brl and brn feeds  - 4/13/2017
--    Updated per TFS 6881 to increase size for param @nvcstrReasonNotCoachable to 100 - 06/01/2017
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    TFS 7137 move my dashboard to new architecture - 06/12/2018
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Manager_Pending_Research]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @nvcstrReasonNotCoachable Nvarchar(100),
  @nvcReviewerID Nvarchar(10),
  @dtmReviewAutoDate datetime,
  @dtmReviewManualDate datetime,
  @bitisCoachingRequired bit,
  @nvcReviewerNotes Nvarchar(max),
  @nvctxtReasonNotCoachable Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
DECLARE 
@nvcCat Nvarchar (10);

SET @nvcCat = (SELECT RTRIM(LEFT(strReportCode, LEN(strReportCode) - 8)) FROM EC.Coaching_Log WHERE CoachingID = @nvcFormID) 

IF @nvcCat IN ('OAE','OAS', 'IAE','IAT', 'SDR','ODT','BRL','BRN', 'IAEF')
BEGIN      
  UPDATE EC.Coaching_Log
  SET 
    StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
    Review_SupID = @nvcReviewerID,
    strReasonNotCoachable = @nvcstrReasonNotCoachable,
    isCoachingRequired = @bitisCoachingRequired,
    SupReviewedAutoDate =  @dtmReviewAutoDate,
    CoachingDate =  @dtmReviewManualDate,
    CoachingNotes = @nvcReviewerNotes,		   
    txtReasonNotCoachable = @nvctxtReasonNotCoachable,
    ReassignCount = 0 
  WHERE CoachingID = @nvcFormID
  OPTION (MAXDOP 1);
  
  UPDATE EC.Coaching_Log_Reason
  SET 
    Value = (CASE WHEN @bitisCoachingRequired = 'True' THEN 'Opportunity' ELSE 'Not Coachable' END)
  FROM EC.Coaching_Log cl 
  INNER JOIN EC.Coaching_Log_Reason clr ON cl.CoachingID = clr.CoachingID
  WHERE cl.CoachingID = @nvcFormID
    AND clr.SubCoachingReasonID IN (120, 121, 29, 231, 232, 233, 238, 239)
  OPTION (MAXDOP 1);
END

ELSE
BEGIN
  UPDATE EC.Coaching_Log
  SET
    StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
    Review_MgrID = @nvcReviewerID,
    strReasonNotCoachable = @nvcstrReasonNotCoachable,
    isCoachingRequired = @bitisCoachingRequired,
    MgrReviewAutoDate = @dtmReviewAutoDate,
    MgrReviewManualDate = @dtmReviewManualDate,
    MgrNotes = @nvcReviewerNotes,		   
    txtReasonNotCoachable = @nvctxtReasonNotCoachable, 
    ReminderSent = 0,
    ReminderDate = NULL,
    ReminderCount = 0,
    ReassignCount = 0 
  WHERE CoachingID = @nvcFormID
  OPTION (MAXDOP 1);

  UPDATE EC.Coaching_Log_Reason
    SET 
	  Value = (CASE WHEN @bitisCoachingRequired = 'True' THEN 'Opportunity' ELSE 'Not Coachable' END)
  FROM EC.Coaching_Log cl 
  INNER JOIN EC.Coaching_Log_Reason clr ON cl.CoachingID = clr.CoachingID
  INNER JOIN EC.DIM_Coaching_Reason cr ON cr.CoachingReasonID = clr.CoachingReasonID
  WHERE cl.CoachingID = @nvcFormID
    AND cr.CoachingReason IN ('OMR / Exceptions', 'Current Coaching Initiative')
  OPTION (MAXDOP 1);
END -- End IF @nvcCat IN ('OAE','OAS', 'IAE','IAT', 'SDR','ODT','BRL','BRN')
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Manager_Pending_Research





GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update7Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update7Review_Coaching_Log]
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Supervisor_Acknowledge' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Supervisor_Acknowledge]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--    ====================================================================
--    Author:                 Jourdain Augustin
--    Create Date:      7/31/13
--    Description: *    This procedure allows Sups to update the e-Coaching records from the review page for Pending Acknowledgment records. 
--    Last Update:    12/16/2014
--    Updated per SCR 13891 to capture review sup id.
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    TFS 7137 move my dashboard to new architecture - 06/12/2018
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Supervisor_Acknowledge]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @nvcReviewSupID Nvarchar(10),
  @dtmSUPReviewAutoDate datetime
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY


UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_SupID = @nvcReviewSupID,
  SUPReviewedAutoDate = @dtmSUPReviewAutoDate
WHERE CoachingID = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Supervisor_Acknowledge



GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update1Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update1Review_Coaching_Log]
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update_Review_Coaching_Log_Supervisor_Pending' 
)
   DROP PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Supervisor_Pending]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:      11/16/12
--    Description: *    This procedure allows supervisors to update the e-Coaching records from review page. 
--    Updated per TFS 115/118 to fix issue with Coaching Notes overwritten - 07/22/2015
--    Updated per TFS 1709 Admin tool setup to reset reassign count  - 5/2/2016
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    TFS 7137 move my dashboard to new architecture - 06/12/2018
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update_Review_Coaching_Log_Supervisor_Pending]
(
  @nvcFormID BIGINT,
  @nvcFormStatus Nvarchar(30),
  @nvcReviewSupID Nvarchar(10),
  @dtmSupReviewedAutoDate datetime,
  @nvctxtCoachingNotes Nvarchar(max) 
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY


UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_SupID = @nvcReviewSupID,
  SupReviewedAutoDate = @dtmSupReviewedAutoDate,
  CoachingNotes = @nvctxtCoachingNotes,
  ReassignCount = 0
WHERE CoachingID = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update_Review_Coaching_Log_Supervisor_Pending



GO



