/*
sp_AT_Check_Entitlements(02).sql
Last Modified Date: 11/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open keys TFS 7856 - 11/23/2017

Version 01:  Initial Revision. Admin tool setup, TFS 1709- 4/2/12016

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Check_Entitlements' 
)
   DROP PROCEDURE [EC].[sp_AT_Check_Entitlements]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/22/2016
--	Description: *	This procedure returns the list of Entitlements 
--  within the eCoaching admin tool for a given user.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/2/12016
--  Modified to support Encryption of sensitive data - Open keys TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Check_Entitlements] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
    @dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)


SET @nvcSQL = 'SELECT DISTINCT [EntitlementId], [EntitlementDescription]
               FROM [EC].[AT_Entitlement]
               WHERE [EntitlementId] IN (
					 SELECT DISTINCT([EntitlementId]) 
                     FROM [EC].[AT_Role_Entitlement_Link]
		             WHERE [RoleId] IN (
                            SELECT DISTINCT([RoleId]) 
                            FROM [EC].[AT_User_Role_Link] ur 
		                    JOIN [EC].[AT_User]u ON u.UserId = ur.UserId 
		                     WHERE u.UserID = '''+@nvcEmpID+'''))'

--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Check_Entitlements


GO
/*
sp_AT_Coaching_Inactivation_Reactivation(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key -  TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Coaching_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Coaching_Inactivation_Reactivation]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Coaching_Inactivation_Reactivation]
-- go
CREATE PROCEDURE [EC].[sp_AT_Coaching_Inactivation_Reactivation] (
  @strRequesterLanId NVARCHAR(50),
  @strAction NVARCHAR(30), 
  @tableIds IdsTableType READONLY,
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Coaching_Inactivation_Reactivation'
-------------------------------------------------------------------------------------
-- Revision History:
--  Modified to support Encryption of sensitive data - Open key -  TFS 7856 - 10/23/2017
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime
     	
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID],[FormName],[LastKnownStatus],[Action]
           ,[ActionTimestamp] ,[RequesterID] ,[Reason],[RequesterComments])
      SELECT [CoachingID], [Formname], [StatusID],  @strAction,
      Getdate(), @strRequestrID, @strReason, @strComments 
      FROM  [EC].[Coaching_Log]CL JOIN @tableIds ID ON
      CL.CoachingID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'STEP1'


UPDATE [EC].[Coaching_Log]
SET StatusID = (SELECT  CASE @strAction
						WHEN 'Inactivate' THEN 2 ELSE [EC].[fn_intLastKnownStatusForCoachingID](CL.CoachingID) END)
FROM [EC].[Coaching_Log]CL JOIN @tableIds ID ON
CL.CoachingID = ID.ID						
						
CLOSE SYMMETRIC KEY [CoachingKey]           

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED




GO

/*
sp_AT_Coaching_Reassignment(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Coaching_Reassignment' 
)
   DROP PROCEDURE [EC].[sp_AT_Coaching_Reassignment]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
--  Initial Revision per TFS 1709 Admin tool setup - 5/12/2016
--  Modified per TFS 4353 to reset recminder attributes for reassigned logs - 10/21/2016
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Coaching_Reassignment]
-- go
CREATE PROCEDURE [EC].[sp_AT_Coaching_Reassignment] (
  @strRequesterLanId NVARCHAR(50),
  @tableIds IdsTableType READONLY,
  @strAssignedId NVARCHAR(10),
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     

-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Coaching_Reassignment'
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert] 	

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Coaching_Reassign_Audit]
           ([CoachingID],[FormName],[LastKnownStatus],
           [ActionTimestamp] ,[RequesterID],[AssignedToID],[Reason],[RequesterComments])
      SELECT [CoachingID], [Formname], [StatusID], 
      Getdate(), @strRequestrID,@strAssignedId, @strReason, @strComments 
      FROM  [EC].[Coaching_Log]CL JOIN @tableIds ID ON
      CL.CoachingID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'END STEP1'


UPDATE [EC].[Coaching_Log]
SET [ReassignedToID] =  @strAssignedId
    ,[ReassignDate]= Getdate()
	,[ReassignCount] = ReassignCount + 1
	,[ReminderSent]= 0
    ,[ReminderDate]= NULL
    ,[ReminderCount]= 0
FROM [EC].[Coaching_Log]CL JOIN @tableIds ID 
ON CL.CoachingID = ID.ID 
								
						
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'END STEP2'      
    
CLOSE SYMMETRIC KEY [CoachingKey]       

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
GO
/*
sp_AT_Select_Employees_Coaching_Inactivation_Reactivation(04).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 04: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 03: additional chnanges per requirements update.
Allow for Inactivation of completed logs from admin tool - TFS 7152 -  7/7/2017

Version 02: Allow for Inactivation of completed logs from admin tool - TFS 7152 - 6/30/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Coaching_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Coaching logs for Inactivation or Reactivation.
--  Last Modified By: Susmitha Palacherla
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--  Updated to remove Mgr site restriction for non admins, TFS 3091 - 07/05/2016
--  Updated to add Employees in Leave status for Inactivation, TFS 3441 - 09/07/2016
--  Updated to allow for Inactivation of completed logs from admin tool - TFS 7152 - 06/30/2017
--  Modified to support Encryption of sensitive data (Open keys and use employee View for emp attributes. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@intRequesterSiteID int,
@strATCoachAdminUser nvarchar(10),
@dtmDate datetime,
@nvcSQL nvarchar(max)

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@strRequesterID)
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@strRequesterID) 

-- If Action is Inactivation

IF @strActionin = N'Inactivate' 
   BEGIN
	  IF @strATCoachAdminUser = 'YES'
	  
--Special conditions for Coaching Admins 
--Display Users with Completed logs submitted in the last 3 months
--No site Restriction

         BEGIN
			 SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,VEH.Emp_Name 
			 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
			 ON Emp.Emp_ID = Fact.EmpID  JOIN [EC].[View_Employee_Hierarchy] VEH 
			 ON VEH.Emp_ID = Emp.Emp_ID
			 WHERE (Fact.StatusID not in (1,2) 
			 OR (Fact.StatusID = 1 AND Fact.SubmittedDate > DATEADD(MM,-3, GETDATE())))
			 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
			 AND Fact.EmpID <> ''999999''
			 AND Emp.Active NOT IN  (''T'',''D'')
			 AND [EC].[fn_strEmpLanIDFromEmpID](Fact.EmpID) <> '''+@strRequesterLanId+''' 
			 ORDER BY VEH.Emp_Name'
      END
      
         ELSE
         
  --For Non Coaching Admins(Regular users like supervisors and Managers)
  --Do not display usesr with completed logs
  --Display only users with Coaching logs at the same site as the logged in user
       
       BEGIN
			 SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,VEH.Emp_Name 
			 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
			 ON Emp.Emp_ID = Fact.EmpID  JOIN [EC].[View_Employee_Hierarchy] VEH 
			 ON VEH.Emp_ID = Emp.Emp_ID
			 WHERE Fact.StatusID NOT IN (1,2)
			 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
			 AND Fact.EmpID <> ''999999''
			 AND Emp.Active NOT IN  (''T'',''D'')
			 AND Fact.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+'''
			 AND [EC].[fn_strEmpLanIDFromEmpID](Fact.EmpID) <> '''+@strRequesterLanId+''' 
			 ORDER BY VEH.Emp_Name'
	 END 
END

ELSE 


-- If Action is Reactivation

     BEGIN
		SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,VEH.Emp_Name 
			 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
			 ON Emp.Emp_ID = Fact.EmpID  JOIN [EC].[View_Employee_Hierarchy] VEH 
			 ON VEH.Emp_ID = Emp.Emp_ID JOIN (Select * FROM
		 [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
		 WHERE LastKnownStatus <> 2) Aud
		 ON Aud.FormName = Fact.Formname
		 WHERE Fact.StatusID = 2
		 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
		 AND Fact.EmpID <> ''999999''
		 AND Emp.Active = ''A''
		 AND [EC].[fn_strEmpLanIDFromEmpID](Fact.EmpID) <> '''+@strRequesterLanId+''' 
		 ORDER BY VEH.Emp_Name'
    END
    
--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Employees_Coaching_Inactivation_Reactivation



GO


/*
sp_AT_Select_Employees_Warning_Inactivation_Reactivation(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Warning_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Warning logs for Inactivation or Reactivation.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--  Updated to add Employees in Leave status for Inactivation, TFS 3441 - 09/07/2016
--  Modified to support Encryption of sensitive data (Open key and use employee View for emp attributes. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@strRequesterSiteID int,
@dtmDate datetime,
@nvcSQL nvarchar(max)

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)



IF @strActionin = N'Inactivate'

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,VEH.Emp_Name 
 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[View_Employee_Hierarchy] VEH 
 ON VEH.Emp_ID = Emp.Emp_ID JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID  
 WHERE Fact.StatusID = 1
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active NOT IN  (''T'',''D'')
 AND [EC].[fn_strEmpLanIDFromEmpID](Fact.EmpID) <> '''+@strRequesterLanId+''' 
 ORDER BY VEH.Emp_Name '

ELSE 

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,VEH.Emp_Name  
 FROM [EC].[Employee_Hierarchy]Emp JOIN [EC].[View_Employee_Hierarchy] VEH 
 ON VEH.Emp_ID = Emp.Emp_ID JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID JOIN (Select * FROM
 [EC].[AT_Warning_Inactivate_Reactivate_Audit]
 WHERE LastKnownStatus = 1) Aud
 ON Aud.FormName = Fact.Formname
 WHERE Fact.StatusID = 2
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
  AND Emp.Active = ''A''
 AND [EC].[fn_strEmpLanIDFromEmpID](Fact.EmpID) <> '''+@strRequesterLanId+''' 
 ORDER BY VEH.Emp_Name '
 
--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Employees_Warning_Inactivation_Reactivation


GO

/*
sp_AT_Select_Logs_Inactivation_Reactivation(05).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 05: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 04: additional changes per requirements update.
Remove 3 month restriction for warning logs - TFS 7152 -  7/12/2017

Version 03: additional changes per requirements update.
Allow for Inactivation of completed logs from admin tool - TFS 7152 -  7/7/2017

Version 02: Allow for Inactivation of completed logs from admin tool - TFS 7152 - 6/30/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Logs_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Logs_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Coaching or Warning logs 
--  in the appropriate Status for the Action for the selected Employee.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/2/12016
--  Updated to allow for Inactivation of completed logs from admin tool - TFS 7152 - 06/30/2017
--  Modified to support Encryption of sensitive data - Open key and use employee View for emp attributes. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Logs_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strTypein nvarchar(10)= NULL, @strActionin nvarchar(10), @strEmployeein nvarchar(10),  @intModuleIdin INT
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(500),
@nvcWhere nvarchar(200),
@strRequesterID nvarchar(10),
@strATCoachAdminUser nvarchar(10),
@dtmDate datetime,
@nvcSQL nvarchar(max),
@strID nvarchar(30)


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@strRequesterID) 

IF @strTypein = N'Coaching' 
SET @strID = 'Fact.CoachingID LogID, '
ELSE 
SET @strID = 'Fact.WarningID LogID, '

IF @strTypein = N'Coaching' AND @strActionin = 'Inactivate'
SET @nvcTableName = ' FROM [EC].[Coaching_Log] Fact WITH(NOLOCK) '

IF @strTypein = N'Warning' AND @strActionin = 'Inactivate'
SET @nvcTableName = ' FROM [EC].[Warning_Log] Fact WITH(NOLOCK) '

IF @strTypein = N'Coaching' AND @strActionin = 'Reactivate'
SET @nvcTableName = ',Aud.LastKnownStatus, [EC].[fn_strStatusFromStatusID](Aud.LastKnownStatus)LKStatus
 FROM [EC].[Coaching_Log] Fact WITH(NOLOCK) JOIN (Select * FROM
 [EC].[AT_Coaching_Inactivate_Reactivate_Audit] WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname '

IF @strTypein = N'Warning' AND @strActionin = 'Reactivate'
SET @nvcTableName = ',Aud.LastKnownStatus, [EC].[fn_strStatusFromStatusID](Aud.LastKnownStatus)LKStatus 
 FROM [EC].[Warning_Log] Fact WITH(NOLOCK) JOIN (Select * FROM
 [EC].[AT_Warning_Inactivate_Reactivate_Audit] WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname '



-- If Action is Reactivation: 
-- Display Inactive logs

IF @strActionin = N'Reactivate'
SET @nvcWhere = ' WHERE Fact.StatusID = 2 '
ELSE 

-- If Action is Inactivation and Coaching
-- For non Coaching Admins display all logs that are not Inactive or completed

IF @strTypein = N'Coaching' AND @strActionin = 'Inactivate' AND @strATCoachAdminUser = 'NO'
SET @nvcWhere = ' WHERE Fact.StatusID NOT IN (1,2) '
ELSE 

-- If Action is Inactivation and Coaching
--Special conditions for Coaching Admins 
--Display  Completed logs submitted in the last 3 months in addition to the other Active status logs

IF @strTypein = N'Coaching' AND @strActionin = 'Inactivate' AND @strATCoachAdminUser = 'YES'
SET @nvcWhere = ' WHERE (Fact.StatusID not in (1,2) 
			 OR (Fact.StatusID = 1 AND Fact.SubmittedDate > DATEADD(MM,-3, GETDATE()))) '
ELSE

-- If Action is Inactivation and Warning
-- Display all completed logs 

IF @strTypein = N'Warning' AND @strActionin = 'Inactivate'
SET @nvcWhere = ' WHERE Fact.StatusID <> 2 '


 SET @nvcSQL = 'SELECT DISTINCT '+@strID+' 
        fact.FormName strFormName,
		veh.Emp_Name	strEmpName,
		veh.Sup_Name	strSupName,
	    CASE
		 WHEN  fact.[strReportCode] like ''LCS%'' AND fact.[MgrID] <> eh.[Mgr_ID]
		 THEN [EC].[fn_strEmpNameFromEmpID](fact.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE veh.Mgr_Name END strMgrName,
		sh.Emp_Name strSubmitter,
		s.Status,
		Fact.SubmittedDate strCreatedDate '
  +  @nvcTableName +
 'JOIN [EC].[Employee_Hierarchy] eh
	 ON [Fact].[EMPID] = [eh].[Emp_ID] JOIN [EC].[View_Employee_Hierarchy] veh
     ON VEH.Emp_ID = Eh.Emp_ID JOIN [EC].[View_Employee_Hierarchy] sh
	 ON [Fact].[SubmitterID] = [sh].[Emp_ID] JOIN [EC].[DIM_Status] s
	 ON [Fact].[StatusID] = [s].[StatusID] '+
 @nvcWhere +
 'AND EmpID = '''+@strEmployeein+'''
  AND [Fact].[ModuleId] = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
  ORDER BY Fact.FormName DESC'


--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Logs_Inactivation_Reactivation


GO
/*
sp_AT_Select_Logs_Reassign(02).sql
Last Modified Date:  10/23/2017
Last Modified By: Susmitha Palacherla


Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Logs_Reassign' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Logs_Reassign]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Coaching or Warning logs 
--  in the appropriate Status for the Action for the selected Employee.
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--  Updated to add Employees in Leave status for Reassignment per TFS 3441 - 09/07/2016
--  Modified to support Encryption of sensitive data (Open key and use employee View for emp attributes. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Logs_Reassign] 
@istrOwnerin nvarchar(10), @intStatusIdin INT, @intModuleIdin INT
AS

BEGIN
DECLARE	
@strConditionalWhere nvarchar(100),
@nvcSQL nvarchar(max)

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Sup_ID = '''+@istrOwnerin+''' '
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Mgr_ID = '''+@istrOwnerin+''' '
END

-- Check for 3 scenarios
--1. Original hierarchy owner
--2. Reassigned owner
--3. Review owner for LCS

SET @nvcSQL = 'SELECT cfact.CoachingID,  
        cfact.FormName strFormName,
		veh.Emp_Name	strEmpName,
		veh.Sup_Name	strSupName,
	    CASE
		 WHEN cfact.[strReportCode] like ''LCS%'' AND cfact.[MgrID] <> eh.[Mgr_ID]
		 THEN [EC].[fn_strEmpNameFromEmpID](cfact.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE veh.Mgr_Name END strMgrName,
		 sh.Emp_Name strSubmitter,
		s.Status,
		cfact.SubmittedDate strCreatedDate 
     FROM [EC].[Coaching_Log]cfact WITH(NOLOCK) JOIN 
     
     (SELECT fact.CoachingID
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] eh
	 ON [Fact].[EMPID] = [eh].[Emp_ID]
	 AND NOT(fact.statusid = 5 AND ISNULL(fact.strReportCode,'' '') LIKE ''LCS%'')'
	 + @strConditionalWhere +
	 'AND fact.ReassignCount = 0
	
	
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[ReassignedToID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND (fact.ReassignCount < 2 and fact.ReassignCount <> 0)
	 AND fact.ReassignedToID is not NULL
	 
	 
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[MgrID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND fact.strReportCode like ''LCS%''
	 AND fact.ReassignCount = 0
	 )Selected 
	 
	 ON Selected.CoachingID = cfact.CoachingID JOIN [EC].[Employee_Hierarchy] eh
	 ON [cfact].[EMPID] = [eh].[Emp_ID] JOIN [EC].[View_Employee_Hierarchy] veh
     ON VEH.Emp_ID = Eh.Emp_ID JOIN [EC].[View_Employee_Hierarchy] sh
	 ON [cfact].[SubmitterID] = [sh].[Emp_ID]JOIN [EC].[DIM_Status] s
	 ON [cfact].[StatusID] = [s].[StatusID]
	 
	WHERE cfact.StatusId = '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
	AND cfact.Moduleid = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
  	AND eh.Active NOT IN  (''T'',''D'') 
   ORDER BY cfact.FormName DESC'
   
--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Logs_Reassign



GO
/*
sp_AT_Select_Modules_By_LanID(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Modules_By_LanID' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Modules_By_LanID]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Module(s) for the logged in user. 
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--  Modified to support Encryption of sensitive data - Open key. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Modules_By_LanID] 
@nvcEmpLanIDin nvarchar(30),@strTypein nvarchar(10)= NULL

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@strATWarnAdminUser nvarchar(10),
	@strATCoachAdminUser nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)
SET @strATWarnAdminUser = EC.fn_strCheckIfATWarningAdmin(@nvcEmpID) 
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@nvcEmpID) 


IF ((@strATWarnAdminUser = 'YES' AND @strATCoachAdminUser = 'YES')
   OR (@strTypein is NULL AND @strATCoachAdminUser = 'YES')
   OR (@strTypein = 'Coaching' AND @strATCoachAdminUser = 'YES')
   OR (@strTypein = 'Warning' AND @strATWarnAdminUser = 'YES'))

SET @nvcSQL = 'SELECT DISTINCT ModuleId, Module 
			   FROM [EC].[AT_Module_Access]
			   WHERE [isActive]=1
			   ORDER BY Module'
			   
ELSE

SET @nvcSQL = 'SELECT ModuleId, Module 
			   FROM [EC].[AT_Module_Access]
			   WHERE [JobCode]= '''+@nvcEmpJobCode+'''
			   AND [isActive]=1
			   ORDER BY Module'

--Print @nvcSQL

EXEC (@nvcSQL)	

CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Modules_By_LanID




GO
/*
sp_AT_Select_ReassignFrom_Users(03).sql
Last Modified Date: 12/01/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 12/01/2017

Version 02: Modified to support additional Modules - TFS 8793 - 11/16/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignFrom_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that currently have 
--  ecls assigned to them. Same module and site as the logged in user performing the reassign.
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
-- Updated to add Employees in Leave status for Reassignment and 
-- removed Active check for reassigned and review managers per TFS 3441 - 09/07/2016
-- Modified to support additional Modules per TFS 8793 - 11/16/2017
-- Modified to support Encryption of sensitive data - Open key and use employee View for emp attributes. TFS 7856 - 12/01/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users] 
@strRequesterin nvarchar(30), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
@intRequesterSiteID int,
@strATAdminUser nvarchar(10),
@strConditionalSelect nvarchar(100),
@strConditionalSite nvarchar(100),
@strConditionalRestrict nvarchar(100),
@dtmDate datetime


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @strATAdminUser = EC.fn_strCheckIfATSysAdmin(@nvcRequesterID) 

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin NOT in (-1,2))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.SUP_ID UserID, veh.SUP_Name UserName '
SET @strConditionalRestrict = N'AND eh.SUP_ID <> '''+@nvcRequesterID+''' ' 
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin NOT in (-1,2))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.MGR_ID UserID, veh.MGR_Name UserName '
SET @strConditionalRestrict = N'AND eh.MGR_ID <> '''+@nvcRequesterID+''''
END
		
SET @strConditionalSite = ' '
IF @strATAdminUser <> 'YES'

BEGIN
	SET @strConditionalSite = ' AND cl.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+''' '
END			 

-- Non reassigned and Non LCS eCLs
-- UNION
-- Reassigned ecls
-- UNION
-- Non reassigned LCS ecls

SET @nvcSQL = @strConditionalSelect +
'FROM [EC].[View_Employee_Hierarchy] veh JOIN [EC].[Employee_Hierarchy] eh
ON veh.Emp_ID = eh.Emp_ID JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.EmpID = eh.Emp_ID 
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND CL.ReassignCount = 0
AND NOT (CL.statusid = 5 AND ISNULL(CL.strReportCode,'' '') like ''LCS%'')'
+ @strConditionalSite 
+ @strConditionalRestrict
+ 'AND (veh.SUP_Name is NOT NULL AND veh.MGR_Name is NOT NULL)
AND eh.Active NOT IN  (''T'',''D'')

UNION 


SELECT DISTINCT rm.Emp_ID UserID, vrm.Emp_Name UserName
FROM [EC].[View_Employee_Hierarchy]vrm JOIN [EC].[Employee_Hierarchy] rm 
ON vrm.Emp_ID = rm.Emp_ID JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.ReassignedToID = rm.Emp_ID JOIN [EC].[Employee_Hierarchy] eh
ON eh.Emp_ID = cl.EmpID
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.ReassignedToID is not NULL 
AND (cl.ReassignCount < 2 and cl.ReassignCount <> 0)
AND (vrm.Emp_Name is NOT NULL AND vrm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND eh.Active NOT IN  (''T'',''D'')

UNION 

SELECT DISTINCT rm.Emp_ID UserID, vrm.Emp_Name UserName
FROM [EC].[View_Employee_Hierarchy]vrm JOIN [EC].[Employee_Hierarchy] rm
ON vrm.Emp_ID = rm.Emp_ID JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.MgrID = rm.Emp_ID JOIN [EC].[Employee_Hierarchy] eh
ON eh.Emp_ID = cl.EmpID
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.MgrID is not NULL
AND cl.strReportCode like ''LCS%''
AND CL.ReassignCount = 0
AND (vrm.Emp_Name is NOT NULL AND vrm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND eh.Active NOT IN  (''T'',''D'')
Order By UserName'

--PRINT @nvcSQL	
EXEC (@nvcSQL)
CLOSE SYMMETRIC KEY [CoachingKey]  

	
EXEC (@nvcSQL)


End --sp_AT_Select_ReassignFrom_Users





GO

/*
sp_AT_Select_ReassignTo_Users(03).sql
Last Modified Date: 12/01/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 12/01/2017

Version 02: Modified to support additional Modules - TFS 8793 - 11/16/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignTo_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that an ECL
-- can be reassigned to. users at the same level and site as the original owner. 
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
-- Updated to add Employees in Leave status for Reassignment and 
-- added Active check for reassigned to supervisors and managers per TFS 3441 - 09/07/2016
--  Modified to support Encryption of sensitive data - Open key and use employee View for emp attributes. TFS 7856 - 12/01/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users] 
@strRequesterin nvarchar(30),@strFromUserIdin nvarchar(10), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
--@nvcRequesterJobCode Nvarchar(30),
--@intModuleID INT,
@intRequesterSiteID int,
@intFromUserSiteID int,
@strSelect nvarchar(1000),
@dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


--cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
--SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @intFromUserSiteID = EC.fn_intSiteIDFromEmpID(@strFromUserIdin)

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))


BEGIN
SET @nvcSQL = N'SELECT DISTINCT sh.EMP_ID UserID, vsh.Emp_Name UserName
FROM [EC].[Employee_Hierarchy]eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy]sh
ON eh.SUP_ID = sh.EMP_ID JOIN [EC].[View_Employee_Hierarchy] vsh
ON sh.Emp_ID = vsh.Emp_ID 
WHERE cl.SiteID = '''+CONVERT(NVARCHAR,@intFromUserSiteID)+'''
AND (vsh.Emp_Name is NOT NULL AND vsh.Emp_Name <> ''Unknown'')
AND eh.SUP_ID <> '''+@strFromUserIdin+''' 
AND eh.Active NOT IN (''T'',''D'')
AND sh.Active = ''A''
Order By UserName'
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN

SET @nvcSQL = N'SELECT DISTINCT mh.EMP_ID UserID, vmh.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy]mh
ON eh.MGR_ID = mh.EMP_ID JOIN [EC].[View_Employee_Hierarchy] vmh
ON mh.Emp_ID = vmh.Emp_ID 
WHERE cl.SiteID = '''+CONVERT(NVARCHAR,@intFromUserSiteID)+'''
AND (vmh.Emp_Name is NOT NULL AND vmh.Emp_Name <> ''Unknown'')
AND eh.MGR_ID <> '''+@strFromUserIdin+'''
AND eh.Active NOT IN (''T'',''D'')
AND mh.Active = ''A''
Order By UserName'
END
			 

--PRINT @nvcSQL		
EXEC (@nvcSQL)

CLOSE SYMMETRIC KEY [CoachingKey]  
End --sp_AT_Select_ReassignTo_Users

GO
/*
sp_AT_Select_Roles_By_User(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Roles_By_User' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Roles_By_User]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Role(s) for the logged in user. 
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--  Modified to support Encryption of sensitive data - Open key. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Roles_By_User] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)


SET @nvcSQL = 'SELECT U.[UserId], [RoleDescription]
FROM [EC].[AT_User] U JOIN [EC].[AT_User_Role_Link] URL
ON U.[UserId]= URL.[UserId]JOIN [EC].[AT_ROLE]R ON
R.[RoleId]= URL.[RoleId]
WHERE U.[UserId]= '''+@nvcEmpID+''''

--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_Roles_By_User




GO



/*
sp_AT_Select_User_Details(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_User_Details' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_User_Details]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Given a UserLanID and returns the User Details for Active users. 
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_User_Details]
@userLanId nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
    @dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@userLanId,@dtmDate)

SET @nvcSQL = 'SELECT [UserId]
					  ,CONVERT(nvarchar(30),DecryptByKey(UserLanID)) AS [UserLanID]
                      ,CONVERT(nvarchar(50),DecryptByKey(UserName))[UserName]
                      ,[EmpJobCode]
                      ,[Active]
               FROM [EC].[AT_User]u 
		       WHERE u.UserID = '''+@nvcEmpID+'''
			   AND u.Active = 1'

--Print @nvcSQL

EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_AT_Select_User_Details





GO


/*
sp_AT_Warning_Inactivation_Reactivation(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Warning_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Warning_Inactivation_Reactivation]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Warning_Inactivation_Reactivation]
-- go
CREATE PROCEDURE [EC].[sp_AT_Warning_Inactivation_Reactivation] (
  @strRequesterLanId NVARCHAR(50),
  @strAction NVARCHAR(30), 
  @tableIds IdsTableType READONLY,
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Warning_Inactivation_Reactivation'
-------------------------------------------------------------------------------------
-- Revision History:
--  Modified to support Encryption of sensitive data - Open key -  TFS 7856 - 10/23/2017
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime
     	
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Warning_Inactivate_Reactivate_Audit]
           ([WarningID],[FormName],[LastKnownStatus],[Action]
           ,[ActionTimestamp] ,[RequesterID] ,[Reason],[RequesterComments])
      SELECT [WarningID], [Formname], [StatusID],  @strAction,
      Getdate(), @strRequestrID, @strReason, @strComments 
      FROM  [EC].[Warning_Log]CL JOIN @tableIds ID ON
      CL.WarningID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'STEP1'


UPDATE [EC].[Warning_Log]
SET StatusID = (SELECT  CASE @strAction
WHEN 'Inactivate' THEN 2 ELSE 1 END)
FROM [EC].[Warning_Log]CL JOIN @tableIds ID ON
CL.WarningID = ID.ID						
						
CLOSE SYMMETRIC KEY [CoachingKey]            

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED



GO
/*
sp_CheckIf_HRUser(02).sql
Last Modified Date: 10/23/2017

Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_CheckIf_HRUser' 
)
   DROP PROCEDURE [EC].[sp_CheckIf_HRUser]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/6/2016
--	Description: *	This procedure takes the lan ID of the HR user and looks up the job code.
--  If Job code exists in the HR access table and HistDashboard = 1 then returns 'YES' else 'NO'
--  Last Modified By: 
--  Last Modified Date: 
--  Created to replace hardcoding in UI code with table lookup. TFS 2232. - 4/6/2016 
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_CheckIf_HRUser] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@nvcActive nvarchar(1),
	@dtmDate datetime

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)

SET @nvcSQL = 'SELECT  ISNULL(EC.fn_strCheckIf_HRUser('''+@nvcEmpID+'''),''NO'') AS isHRUser'


--Print @nvcSQL

EXEC (@nvcSQL)	

CLOSE SYMMETRIC KEY [CoachingKey]    
END --sp_CheckIf_HRUser

GO


/*
sp_Check_AgentRole(02).sql
Last Modified Date: 10/23/2017

Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Check_AgentRole' 
)
   DROP PROCEDURE [EC].[sp_Check_AgentRole]
GO



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	<11/16/11>
--	Last Update:	<>
--	Description: *	This procedure returns the Row_ID from the ACl table if agent belongs to the role being checked. 
--  Last Update:    03/12/2014 - Updated per SCR 12359 to add NOLOCK Hint
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Check_AgentRole]
(
 @nvcLANID	Nvarchar(30),
 @nvcRole	Nvarchar(30)
)
AS
Declare
 @ROWID INT

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

	SELECT @ROWID = [Row_ID]
	FROM  [EC].[Historical_Dashboard_ACL] WITH(NOLOCK)
	WHERE CONVERT(nvarchar(70),DecryptByKey([User_LanID])) = @nvcLANID
	AND [Role]= @nvcRole
	AND [End_Date]='99991231'


IF @ROWID IS NULL RETURN 0
ELSE
RETURN 	 @ROWID	

CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Check_AgentRole



GO

/*
sp_Check_AppRole(02).sql
Last Modified Date: 10/23/2017

Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Check_AppRole' 
)
   DROP PROCEDURE [EC].[sp_Check_AppRole]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/21/2012
--	Description: 	This procedure returns whether the User is an admin or not.
--	Last Update:	09/18/2013
--               Last Modified By: Susmitha Palacherla
--               Updated per SCR 10617 to return 'N' for all Inactive users.
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Check_AppRole]
(
 @nvcLANID	Nvarchar(30)
)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max)

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @nvcSQL = 'SELECT [ISADMIN]=
              CASE WHEN End_Date = ''99991231'' THEN [ISADMIN]
              ELSE ''N''
              END
              FROM [EC].[Historical_Dashboard_ACL]
			  WHERE CONVERT(nvarchar(70),DecryptByKey([User_LanID])) = '''+@nvcLANID+''''
    	
EXEC (@nvcSQL)	
CLOSE SYMMETRIC KEY [CoachingKey]    
  
END--sp_Check_AppRole

GO



/*
sp_DeleteFromHistoricalDashboardACL(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_DeleteFromHistoricalDashboardACL' 
)
   DROP PROCEDURE [EC].[sp_DeleteFromHistoricalDashboardACL]
GO



SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	09/19/2012
--	Description: 	Delete record from Historical dashboard ACL table 
--  Last Modified by: Susmitha Palacherla
--  Modified per SCR 10617 to removed hard coded authorized users and look at the IsAdmin flag in the ACL Table - 10/18/2013
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
--	=====================================================================

CREATE  PROCEDURE [EC].[sp_DeleteFromHistoricalDashboardACL]
  (
    @nvcACTION Nvarchar(10),
	@nvcLANID	Nvarchar(30),
	@nvcUserLANID	Nvarchar(30),
	@nvcRole	Nvarchar(20) = NULL,
	@nvcErrorMsgForEndUser Nvarchar(180) OUT
)
AS
BEGIN
	

	DECLARE @nvcHierarchyLevel	Nvarchar(20),
            @nvcSQL Nvarchar(max),
	        @ROWID int,
	        @nvcIsAdmin Nvarchar(1)

  
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]
	        
	SET @nvcErrorMsgForEndUser = N''	

   -- Removing the domain name from the Lanid.
	  SET @nvcLANID = SUBSTRING(@nvcLANID, CHARINDEX('\', @nvcLANID) + 1, LEN(@nvcLANID))
   -- Checking the App Role of the User
	  SET @nvcIsAdmin = (SELECT CASE WHEN End_Date = '99991231' THEN [ISADMIN] ELSE 'N'  END
                        FROM [EC].[View_Historical_Dashboard_ACL] WHERE [User_LanID] = @nvcLANID)
	  

	
--	Checking if the User is authorized to Remove

IF @nvcIsAdmin = 'Y'
BEGIN
  
    IF @nvcACTION = 'REMOVE'  
         UPDATE [EC].[Historical_Dashboard_ACL]
         SET [END_DATE] = CONVERT(nvarchar(10),getdate(),112),
         [Updated_By] = EncryptByKey(Key_GUID('CoachingKey'), @nvcLANID )
         Where CONVERT(nvarchar(30),DecryptByKey([User_LanID])) = @nvcUserLANID

ELSE
SET @nvcErrorMsgForEndUser = N'Action ' + @nvcACTION + N' is not an acceptable action.'
END
 
ELSE		
		
BEGIN
SET @nvcErrorMsgForEndUser = N'Requester ' + @nvclanid + N' is not authorized to ADD/REMOVE Records.'
END			


CLOSE SYMMETRIC KEY [CoachingKey] 	
END --sp_DeleteFromHistoricalDashboardACL



GO



if exists (select * from dbo.sysobjects where id = object_id('[EC].[sp_HistoricalDashboardAclInsert]') and OBJECTPROPERTY(id, 'IsProcedure') = 1)
drop procedure EC.sp_HistoricalDashboardAclInsert
GO

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

-- =============================================
-- Author:           Lili Huang
-- Revision History
--  Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
-- =============================================

CREATE PROCEDURE [EC].[sp_HistoricalDashboardAclInsert]
(
    @userLanId        nvarchar(30),
    @userName         nvarchar(50),
    @userRole         nvarchar(30),
    @createdBy        nvarchar(30),
    @rowId            int OUTPUT,
-------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
    @returnCode       int OUTPUT,
    @returnMessage    varchar(300) OUTPUT        
)
AS
    DECLARE @storedProcedureName  varchar(80)

    SET @storedProcedureName = 'sp_HistoricalDashboardAclInsert'
    SET @returnCode = 0
    SET @returnMessage = @storedProcedureName + ' completed successfuly.'
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED    
-------------------------------------------------------------------------------    
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
BEGIN
  


    BEGIN TRY

OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]

        SELECT @rowId = Row_ID FROM View_Historical_Dashboard_ACL WHERE User_LanID = @userLanId AND End_Date <> '99991231'; 
        IF (@rowId IS NULL)
        BEGIN
            INSERT INTO Historical_Dashboard_ACL 
			(  [User_LanID]
               ,[User_Name]
			   ,[Role]
               ,[End_Date]
               ,[IsAdmin]
			   ,[Updated_By])
            VALUES 
            (
                  EncryptByKey(Key_GUID('CoachingKey'), @userLanId),
				  EncryptByKey(Key_GUID('CoachingKey'), @userName),
                  @userRole,
				  '99991231',
				  'N',
		        EncryptByKey(Key_GUID('CoachingKey'), @createdBy)
			  --    [EC].[fn_Encrypt_CoachingKey](@userLanId),
				 --[EC].[fn_Encrypt_CoachingKey](@userName),
     --             @userRole,
				 -- '99991231',
				 -- 'N',
		   --     [EC].[fn_Encrypt_CoachingKey]( @createdBy)
             );
CLOSE SYMMETRIC KEY [CoachingKey] 

            SELECT @rowId = SCOPE_IDENTITY();
        END -- IF
        ELSE
        BEGIN
            UPDATE Historical_Dashboard_ACL SET End_Date = '99991231', Role = @userRole 
			WHERE CONVERT(nvarchar(30),DecryptByKey([User_LanID])) = @userLanId;
        END; -- ELSE
    END TRY
    
    BEGIN CATCH
        --TODO: Log error in a table
        --ERROR_NUMBER(), ERROR_SEVERITY(), ERROR_STATE(), ERROR_PROCEDURE(), ERROR_LINE(), ERROR_MESSAGE() 
        SET @returnCode = ERROR_NUMBER();
        SET @returnMessage = @storedProcedureName + ' Failed to insert into HistoricalDashboarACL table.';
    END CATCH
 
    RETURN @returnCode; 

END
-- *** END: INSERT CUSTOM CODE HERE ***



GO

/*
sp_InactivateCoachingLogsForTerms(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data -Removed joins on LanID - TFS 7856 - 10/23/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateCoachingLogsForTerms' 
)
   DROP PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    04/09/2014
-- Description:	Inactivate Coaching logs for Termed Employees.
-- Last Modified By: Susmitha Palacherla
-- Revision History:
-- Modified per TFS 549 - To Inactivate Surveys for termed Employees and Expired Surveys.
-- Surveys expire 5 days from Creation date - 09/04/2015
-- Admin tool setup per TFS 1709-  To log Inactivations in audit tables - 4/27/12016
-- Updated to not Inactivate Warning logs for termed Employees per TFS 3441 - 09/08/2016
--  Modified to support Encryption of sensitive data. Removed joins on LanID. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms] 
AS
BEGIN

 DECLARE @EWFMSiteCount INT
 
 -- Inactivate Warnings logs for Termed Employees


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION

BEGIN TRY


-- Log records being inactivated to Audit table and 
-- Inactivate Warning logs for Termed Employees
BEGIN
INSERT INTO [EC].[AT_Warning_Inactivate_Reactivate_Audit]
           ([WarningID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT W.WarningID
		 ,W.FormName
		 ,W.StatusID
		 ,'Inactivate'
		 ,GetDate()
	 	 ,'999998'
		 ,'Employee Deceased'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] = 'D'
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2	 
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Warning_Log]
SET [StatusID] = 2
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] = 'D'
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Inactivate Surveys for Termed Employees

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Employee Not Active'
FROM [EC].[Survey_Response_Header]SH  JOIN [EC].[Employee_Hierarchy]H
ON SH.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND SH.[Status] = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


 -- Inactivate Expired Survey records (5 days after creation date)

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Survey Expired'
WHERE DATEDIFF(DAY, [CreatedDate],  GETDATE())>= 5
AND [Status]  = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



--Log records being inactivated to Audit table and 
--Inactivate Coaching logs for Termed Employees

BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee Inactive'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)	 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for Employees on Extended Absence


BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee on EA'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2) 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for CSRs and Sup Module eCLs for Employees not arriving in eWFM feed.


SET @EWFMSiteCount = (SELECT count(DISTINCT Emp_Site_Code) FROM [EC].[EmpID_To_SupID_Stage])
IF @EWFMSiteCount >= 14



BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee not in feed'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END
		 

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END


COMMIT TRANSACTION
END TRY

  BEGIN CATCH
  ROLLBACK TRANSACTION
  END CATCH

END  -- [EC].[sp_InactivateCoachingLogsForTerms]


GO
/*
sp_InsertInto_Coaching_Log(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO






--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      02/03/2014
--    Description:     This procedure inserts the e-Coaching records into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Last Modified Date: 07/23/2015
-- Last Updated By: Susmitha Palacherla
-- Modified per TFS 363/402 to update formname from CoachingID after insert. 
-- Modified to support Encryption of sensitive data. Open key and removed LanID. TFS 7856 - 10/23/2017
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
(     @nvcFormName Nvarchar(50),
      @nvcEmpLanID Nvarchar(40),
      @nvcProgramName Nvarchar(50),
      @intSourceID INT,
      @intStatusID INT,
      @SiteID INT,
      @nvcSubmitter Nvarchar(40),
      @dtmEventDate datetime,
      @dtmCoachingDate datetime,
      @bitisAvokeID bit  ,
      @nvcAvokeID Nvarchar(40) ,
      @bitisNGDActivityID bit,
      @nvcNGDActivityID Nvarchar(40) ,
      @bitisUCID bit,
      @nvcUCID Nvarchar(40),
      @bitisVerintID bit,
      @nvcVerintID Nvarchar(255),
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @nvcValue1 Nvarchar(30),
      @intCoachReasonID2 INT ,
      @nvcSubCoachReasonID2 Nvarchar(255),
      @nvcValue2 Nvarchar(30),
      @intCoachReasonID3 INT ,
      @nvcSubCoachReasonID3 Nvarchar(255),
      @nvcValue3 Nvarchar(30),
      @intCoachReasonID4 INT ,
      @nvcSubCoachReasonID4 Nvarchar(255) ,
      @nvcValue4 Nvarchar(30),
      @intCoachReasonID5 INT,
      @nvcSubCoachReasonID5 Nvarchar(255),
      @nvcValue5 Nvarchar(30),
      @intCoachReasonID6 INT,
      @nvcSubCoachReasonID6 Nvarchar(255),
      @nvcValue6 Nvarchar(30),
      @intCoachReasonID7 INT,
      @nvcSubCoachReasonID7 Nvarchar(255),
      @nvcValue7 Nvarchar(30),
      @intCoachReasonID8 INT,
      @nvcSubCoachReasonID8 Nvarchar(255),
      @nvcValue8 Nvarchar(30),
      @intCoachReasonID9 INT,
      @nvcSubCoachReasonID9 Nvarchar(255),
      @nvcValue9 Nvarchar(30),
      @intCoachReasonID10 INT,
      @nvcSubCoachReasonID10 Nvarchar(255),
      @nvcValue10 Nvarchar(30),
      @intCoachReasonID11 INT,
      @nvcSubCoachReasonID11 Nvarchar(255),
      @nvcValue11 Nvarchar(30),
      @intCoachReasonID12 INT,
      @nvcSubCoachReasonID12 Nvarchar(255),
      @nvcValue12 Nvarchar(30),
      @nvcDescription Nvarchar(3000) ,
      @nvcCoachingNotes Nvarchar(3000) ,
      @bitisVerified bit  ,
      @dtmSubmittedDate datetime ,
      @dtmStartDate datetime ,
      @dtmSupReviewedAutoDate datetime ,
      @bitisCSE bit  ,
      @dtmMgrReviewManualDate datetime ,
      @dtmMgrReviewAutoDate datetime ,
      @nvcMgrNotes Nvarchar(3000) ,
      @bitisCSRAcknowledged bit  ,
      @dtmCSRReviewAutoDate datetime ,
      @nvcCSRComments Nvarchar(3000),
      @bitEmailSent bit ,
      @ModuleID INT,
      @Behaviour Nvarchar(30),
      @nvcNewFormName Nvarchar(50)OUTPUT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE @nvcEmpID Nvarchar(10),
	        @nvcSubmitterID	Nvarchar(10),
	        @nvcSupID Nvarchar(10),
	        @nvcMgrID Nvarchar(10),
	        @nvcNotPassedSiteID INT,
	        @dtmDate datetime
	        
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]  
	        
	        
	SET @dtmDate  = GETDATE()   
	SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanID,@dtmDate)
	SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
    SET @nvcSupID = (SELECT [Sup_ID] FROM [EC].[Employee_Hierarchy]WHERE [Emp_ID]= @nvcEmpID)
    SET @nvcMgrID = (SELECT [Mgr_ID] FROM [EC].[Employee_Hierarchy]WHERE [Emp_ID]= @nvcEmpID)
  
         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[CoachingDate]
           ,[isAvokeID]
           ,[AvokeID]
           ,[isNGDActivityID]
           ,[NGDActivityID]
           ,[isUCID]
           ,[UCID]
           ,[isVerintID]
           ,[VerintID]
           ,[Description]
	       ,[CoachingNotes]
           ,[isVerified]
           ,[SubmittedDate]
           ,[StartDate]
           ,[SupReviewedAutoDate]
           ,[isCSE]
           ,[MgrReviewManualDate]
           ,[MgrReviewAutoDate]
           ,[MgrNotes]
           ,[isCSRAcknowledged]
           ,[CSRReviewAutoDate]
           ,[CSRComments]
           ,[EmailSent]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           ,[Behavior])
     VALUES
           (@nvcEmpID 
           ,@nvcProgramName 
           ,@intSourceID 
           ,@intStatusID 
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@dtmEventDate 
           ,@dtmCoachingDate 
		   ,@bitisAvokeID 
           ,@nvcAvokeID 
           ,@bitisNGDActivityID 
		   ,@nvcNGDActivityID 
		   ,@bitisUCID 
		   ,@nvcUCID 
		   ,@bitisVerintID 
		   ,@nvcVerintID 
		   ,@nvcDescription 
		   ,@nvcCoachingNotes
           ,@bitisVerified 
		   ,@dtmSubmittedDate 
		   ,@dtmStartDate 
		   ,@dtmSupReviewedAutoDate 
		   ,@bitisCSE 
		   ,@dtmMgrReviewManualDate 
		   ,@dtmMgrReviewAutoDate 
		   ,@nvcMgrNotes 
		   ,@bitisCSRAcknowledged 
		   ,@dtmCSRReviewAutoDate 
		   ,@nvcCSRComments
		   ,@bitEmailSent
		   ,@ModuleID
		   ,ISNULL(@nvcSupID,'999999')
		   ,ISNULL(@nvcMgrID,'999999')
		   ,@Behaviour)
            
 CLOSE SYMMETRIC KEY [CoachingKey] 
            
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
       
            
--WAITFOR DELAY '00:00:00:02'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [CoachingID] = @I  AND [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:01'  -- Wait for 5 ms

SET @nvcNewFormName = (SELECT [FormName] FROM  [EC].[Coaching_Log] WHERE [CoachingID] = @I)

     /*
           IF NOT @intCoachReasonID1 IS NULL
       BEGIN
            INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
            VALUES (@I, @intCoachReasonID1,@intSubCoachReasonID1,
            CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END) 
        END
        
        */
    
 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END)       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
        
       /*  
        IF NOT @intCoachReasonID2 IS NULL  
        BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,@intSubCoachReasonID2,@nvcValue2)
        END 

*/


 IF NOT @intCoachReasonID2 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ','))
  	   SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ',')where Rowid = @SubReasonRowID )
           ,@nvcValue2)       
         
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 


  IF NOT @intCoachReasonID3 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ','))
  	   SET @SubReasonRowID = 1

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID3,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ',')where Rowid = @SubReasonRowID )
           , @nvcValue3)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END      
   
	 IF NOT @intCoachReasonID4 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID4,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ',')where Rowid = @SubReasonRowID )
           , @nvcValue4)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END  
  
   IF NOT @intCoachReasonID5 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID5,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue5)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END     


 IF NOT @intCoachReasonID6 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID6,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ',')where Rowid = @SubReasonRowID )
           , @nvcValue6) 
                    
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
   IF NOT @intCoachReasonID7 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID7,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ',')where Rowid = @SubReasonRowID )
        , @nvcValue7)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
  IF NOT @intCoachReasonID8 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ','))
   	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID8,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ',')where Rowid = @SubReasonRowID )
          , @nvcValue8)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END  
  
  
   IF NOT @intCoachReasonID9 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID9,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ',')where Rowid = @SubReasonRowID )
          , @nvcValue9)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END 
  
  
   IF NOT @intCoachReasonID10 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID10,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ',')where Rowid = @SubReasonRowID )
            , @nvcValue10)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
		
    END
  END 
  
   IF NOT @intCoachReasonID11 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID11,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ',')where Rowid = @SubReasonRowID )
            , @nvcValue11)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END
  
  
   IF NOT @intCoachReasonID12 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ','))
	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID12,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue12) 
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
    

   
    
  END  
COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Coaching_Log

GO

/*
sp_InsertInto_Coaching_Log_ETS(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data. Removed LanID - TFS 7856 - 10/23/2017


Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_ETS' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_ETS]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO







--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      11/07/2014
--    Description:     This procedure inserts the ETS records into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Revision History: 
-- Changes for incorporating Compliance Reports per SCR 14031- 01/06/2015
-- Modified to support Encryption of sensitive data. Removed LanID. TFS 7856 - 10/23/2017

--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_ETS]
@Count INT OUTPUT
  
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @maxnumID INT
       -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])    
      
      
      -- Inserts records from the Quality_Coaching_Stage table to the Coaching_Log Table

         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSE]
           ,[isCSRAcknowledged]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )

            SELECT DISTINCT
            lower(es.Emp_ID)	[FormName],
            es.Emp_Program   [ProgramName],
            221             [SourceID],
            CASE es.emp_role when 'C' THEN 6 
            WHEN 'S' THEN 5 ELSE -1 END[StatusID],
            [EC].[fn_intSiteIDFromEmpID](LTRIM(es.EMP_ID))[SiteID],
            es.EMP_ID [EmpID],
            '999999'	 [SubmitterID],       
            es.Event_Date [EventDate],
            0			[isAvokeID],
		    0			[isNGDActivityID],
            0			[isUCID],
            0          [isVerintID],
            REPLACE(EC.fn_nvcHtmlEncode(es.TextDescription), CHAR(13) + CHAR(10) ,'<br />')[Description],	
            es.Submitted_Date  [SubmittedDate], 
		    es.Event_Date	[StartDate],
		    0 [isCSE],			
		    0 [isCSRAcknowledged],
		    es.Report_ID [numReportID],
		    es.Report_Code [strReportCode],
		    CASE es.emp_role when 'C' THEN 1
            WHEN 'S' THEN 2 ELSE -1 END [ModuleID],
          	ISNULL(es.[Emp_SupID],'999999')  [SupID],
		    ISNULL(es.[Emp_MgrID],'999999')  [MgrID]
            
FROM [EC].[ETS_Coaching_Stage] es 
left outer join EC.Coaching_Log cf on es.Report_Code = cf.strReportCode
and es.Event_Date = cf.EventDate and  es.Report_ID = cf.numReportID
where cf.strReportCode is null and cf.EventDate is NULL and cf.numReportID is NULL
OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 
  -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.

INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
           22,
           [EC].[fn_intSubCoachReasonIDFromETSRptCode](LEFT(cf.strReportCode,LEN(cf.strReportCode)-8)),
           CASE WHEN LEFT(cf.strReportCode,LEN(cf.strReportCode)-8) IN ('OAE','OAS')
           THEN 'Research Required' ELSE 'Opportunity' END
     FROM [EC].[ETS_Coaching_Stage] es  INNER JOIN  [EC].[Coaching_Log] cf      
    ON (es.[Report_Code] = cf.[strReportCode]
   and es.Event_Date = cf.EventDate and es.Emp_ID = cf.EmpID and es.Report_ID = cf.numReportID)
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)  


-- Truncate Staging Table
Truncate Table [EC].[ETS_Coaching_Stage]
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_ETS





GO

/*
sp_InsertInto_Coaching_Log_Generic(03).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data. Open Key and Removed LanID- TFS 7856 - 10/23/2017

Version 02: Updated to support DTT feed - TFS 7646 -  9/1/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Generic' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        4/11/2016
--  Created per TFS 2470 to load the Generic feed(s)- 4/11/2016
-- Modified to accomodate Attendance feed for seasonal employees per TFS 3972 - 09/15/2016
-- Modified to support ad-hoc loads by adding more values to the file. TFS 4916 - 12/9/2016
-- Modified to support DTT feed. TFS 7646 - 8/31/2017
-- Modified to support Encryption of sensitive data. Open Key and Removed LanID. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic] 
@Count INT OUTPUT

AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
                        
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNULL(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   
  
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert] 

     
-- Inserts records from the Generic_Coaching_Stage table to the Coaching_Log Table

  INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
           ,[isVerified]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
SELECT DISTINCT LOWER(cs.CSR_EMPID)	[FormName],

CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  
 END [ProgramName],
 
 CASE 
		WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
        THEN [EC].[fn_intSourceIDFromSource](cs.[Form_Type],cs.[Source])
        ELSE cs.Source_ID 
  END  [SourceID],
  
  CASE
        WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
        THEN [EC].[fn_strStatusIDFromStatus](cs.Form_Status)
        ELSE cs.Status_ID 
  END   [StatusID],
  
               [EC].[fn_intSiteIDFromEmpID](cs.CSR_EMPID)[SiteID],
        cs.CSR_EMPID                    [EmpID],
        
  CASE
        WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
        THEN [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)
        ELSE cs.Submitter_ID
  END   [SubmitterID],
  
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		-- EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
  CASE 
		 WHEN cs.[Report_Code] like 'SEA%' 
		 THEN REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br /> <br />')
		 WHEN  cs.[Report_Code] like 'OTH%'
		 THEN REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br />')
		 ELSE REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '      '  ,'<br />') 
  END [Description],	-- CHAR(13) + CHAR(10)
  
         1                          [isVerified],
		 cs.Submitted_Date			[SubmittedDate],
		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
CASE 
		 WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
		 THEN 0
		 ELSE cs.isCSE
  END                          [isCSE],
		 
  CASE 
		 WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
		 THEN 0
		 ELSE cs.EmailSent
  END	[EmailSent],
  
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 
CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN 1
		  WHEN cs.[Report_Code] like 'DTT%'
		 THEN 2
		 ELSE  cs.Module_ID
 END		                      [ModuleID],
  
  
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 ISNULL(csr.[Mgr_ID],'999999') [MgrID]
	                   
from [EC].[Generic_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null

OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT
-- Updates the strFormID value

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
    
 CASE 
		 WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')
		 THEN 3
		 ELSE cs.CoachingReason_ID	
 END [CoachingReasonID],
 
 CASE 
		 WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')			
         THEN [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3))
         ELSE cs.SubCoachingReason_ID	
 END [SubCoachingReasonID],
 
  CASE 
		 WHEN (cs.[Report_Code] like 'SEA%' OR cs.[Report_Code] like 'DTT%')		
         THEN  cs.[CoachReason_Current_Coaching_Initiatives]
         ELSE cs.Value 
 END [Value]
 
    FROM [EC].[Generic_Coaching_Stage] cs JOIN  [EC].[Coaching_Log] cf      
    ON cs.[Report_ID] = cf.[numReportID] AND  cs.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
  -- Truncate Staging Table
Truncate Table [EC].[Generic_Coaching_Stage]


CLOSE SYMMETRIC KEY [CoachingKey]   
                  
				                   
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Generic


GO



/*
sp_InsertInto_Coaching_Log_NPN(03).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data. Removed LanID - TFS 7856 - 10/23/2017

Version 02: Additional update from V&V feedback - TFS 5653 - 03/02/2017

Version 01: Document Initial Revision - TFS 5653 - 2/28/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_NPN' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_NPN]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
-- Author:		      Susmitha Palacherla
-- Create date:       02/28/2017
-- Description:	
-- Creates NPN ecls for eligible IQS logs that have been identified and staged.
-- Last update by:   Susmitha Palacherla
-- Initial Revision - Created as part of  TFS 5653 - 02/28/2017
-- Modified to support Encryption of sensitive data. Removed LanID. TFS 7856 - 10/23/2017
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_NPN]

  
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @maxnumID INT
    
       -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])    

  
      -- Inserts records from the Quality_Coaching_Stage table to the Coaching_Log Table

         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[VerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSE]
           ,[isCSRAcknowledged]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           ,[strReportCode])

            SELECT DISTINCT
            lower(qs.User_EMPID)	[FormName],
            CASE qs.Program  
            WHEN NULL THEN csr.Emp_Program
            WHEN '' THEN csr.Emp_Program
            ELSE qs.Program  END       [ProgramName],
            218   [SourceID],
            6     [StatusID],
            [EC].[fn_intSiteIDFromEmpID](LTRIM(qs.User_EMPID))[SiteID],
            qs.User_EMPID [EmpID],
            '999999'	 [SubmitterID],       
            qs.Call_Date [EventDate],
            0			[isAvokeID],
		    0			[isNGDActivityID],
            0			[isUCID],
            1 [isVerintID],
            qs.Journal_ID	[VerintID],
            
            --EC.fn_nvcHtmlEncode(qs.Summary_CallerIssues)[Description],	
            REPLACE(EC.fn_nvcHtmlEncode([EC].[fn_strNPNDescriptionFromCode](qs.[Summary_CallerIssues])), CHAR(13) + CHAR(10) ,'<br />')+ qs.Journal_ID [Description],
            GetDate()  [SubmittedDate], 
		    qs.Call_Date	[StartDate],
		    0	[isCSE],			
		    0 [isCSRAcknowledged],
		    1 [ModuleID],
		    ISNULL(csr.[Sup_ID],'999999') [SupID],
		    ISNULL(csr.[Mgr_ID],'999999')[MgrID],
	        'NPN' + CONVERT(varchar(8),[EC].[fn_intDatetime_to_YYYYMMDD](GETDATE())) [strReportCode]
		    
FROM [EC].[Quality_Coaching_Stage] qs 
join EC.Employee_Hierarchy csr on qs.User_EMPID = csr.Emp_ID
left outer join (Select * from EC.Coaching_Log with (nolock) where SourceID = 218)cf
on qs.Journal_ID = cf.VerintID 
and qs.User_EMPID = cf.EmpID 
and qs.Call_Date = cf.EventDate
where (cf.VerintID is null and cf.EmpID is null and cf.EventDate is null)
OPTION (MAXDOP 1)



WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.

--INSERT INTO [EC].[Coaching_Log_Reason]
--           ([CoachingID]
--           ,[CoachingReasonID]
--           ,[SubCoachingReasonID]
--           ,[Value])
--    SELECT cf.[CoachingID],
--           5,
--           42,
--           'Opportunity'
--    FROM [EC].[Quality_Coaching_Stage] qs JOIN  [EC].[Coaching_Log] cf      
--    ON qs.[Journal_ID] = cf.[VerintID] 
--    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
--    ON cf.[CoachingID] = cr.[CoachingID]  
--    WHERE cr.[CoachingID] IS NULL 
-- OPTION (MAXDOP 1) 
  
 INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
        SELECT cf.[CoachingID],
           5,
           42,
           'Opportunity'
  FROM (SELECT * FROM EC.Coaching_Log with (nolock)
  WHERE SourceID = 218 AND strReportCode LIKE 'NPN%')cf     
  LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
  ON cf.[CoachingID] = cr.[CoachingID]  
  WHERE cr.[CoachingID] IS NULL  
 OPTION (MAXDOP 1)  

 WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

-- Truncate Staging Table
Truncate Table [EC].[Quality_Coaching_Stage]
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Quality
GO



/*
sp_InsertInto_Coaching_Log_Outlier(06).sql
Last Modified Date: 11/23/2017
Last Modified By: Susmitha Palacherla

Version 06: Modified to support Encryption of sensitive data. Opened Key and Removed LanID - TFS 7856 - 11/23/2017

Version 05: Updated to support additional Modules - TFS 8793 - 11/16/2017

Version 04: Updated to support MSR and MSRS Feeds. TFS 6147 - 06/02/2017

Version 03: Support for Sup and quality Modules in 
Breaks feeds and also added Output param to capture count of Loaded records - TFS 6377 - 04/24/2017

Version 02: New Breaks BRN and BRL feeds - TFS 6145 - 4/13/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Outlier' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Outlier]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        03/10/2014
-- Loads records from [EC].[Outlier_Coaching_Stage]to [EC].[Coaching_Log]
-- Last Modified Date: 09/16/2015
-- Last Updated By: Susmitha Palacherla
-- Modified per TFS 644 to add IAE, IAT Feeds
-- Modified per TFS 6145 to add BRN and BRL Feeds - 4/12/2017
-- Modified per TFS 6377 to add support for Sup and quality Modules in 
-- Breaks feeds and also added Output param to capture count of Loaded records - 4/24/2017
-- Updated to support MSR and MSRS Feeds. TFS 6147 - 06/02/2017
-- Updated to support additional Modules - TFS 8793 - 11/16/2017
-- Modified to support Encryption of sensitive data. Opened Key and Removed LanID. TFS 7856 - 11/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Outlier]
@Count INT OUTPUT

AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME,
              @strLCSPretext nvarchar(200),
              @strIAEPretext nvarchar(200),
              @strIATPretext nvarchar(200),
              @strBRText nvarchar(200)
              
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert] 

      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   
      SET @strLCSPretext = 'The call associated with this Low CSAT is Verint ID: '
      SET @strIAEPretext = 'You are receiving this eCL because the ARC received an Inappropriate Escalation for this CSR.  Please review the Verint Call, NGD call record and coach as appropriate. '
      SET @strIATPretext = 'You are receiving this eCL because the ARC received an Inappropriate Transfer for this CSR.  Please review the Verint Call, NGD call record and coach as appropriate. '

      
-- Inserts records from the Outlier_Coaching_Stage table to the Coaching_Log Table

 INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
select  Distinct LOWER(cs.CSR_EMPID)	[FormName],
        CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  END       [ProgramName],
        CASE WHEN cs.Report_Code LIKE 'MSR%'
        THEN 232 ELSE 212 END	[SourceID],                        
        [EC].[fn_strStatusIDFromStatus](cs.Form_Status)[StatusID],
        [EC].[fn_intSiteIDFromEmpID](cs.CSR_EMPID)[SiteID],
        cs.CSR_EMPID                    [EmpID],
        [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)[SubmitterID],
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
	     CASE WHEN cs.Report_Code LIKE 'LCS%' 
		 THEN @strLCSPretext + EC.fn_nvcHtmlEncode(cs.TextDescription)
		 WHEN cs.Report_Code LIKE 'IAE%' 
		 THEN @strIAEPretext + '<br />' + EC.fn_nvcHtmlEncode(cs.TextDescription) + '<br />' + cs.CD1 + '<br />' + cs.CD2
		 WHEN cs.Report_Code LIKE 'IAT%' 
		 THEN @strIATPretext + '<br />' + EC.fn_nvcHtmlEncode(cs.TextDescription) + '<br />' + cs.CD1 + '<br />' + cs.CD2
		 ELSE  EC.fn_nvcHtmlEncode(cs.TextDescription)END		[Description],
		  cs.Submitted_Date			SubmittedDate,
		  		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
		 0                          [isCSE],
		 0                          [EmailSent],
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 [EC].[fn_intModuleIDFromEmpID](cs.CSR_EMPID)  [ModuleID],
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 CASE WHEN cs.Report_Code LIKE 'LCS%' THEN ISNULL(cs.[RMgr_ID],'999999')
		 ELSE ISNULL(csr.[Mgr_ID],'999999')END  [MgrID]
	                   
from [EC].[Outlier_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null
OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT

-- Updates the strFormID value

WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
    CASE 
		WHEN (cf.strReportCode like 'BRN%' OR cf.strReportCode like 'BRL%') 
		THEN 56 
		WHEN cf.strReportCode like 'MSR%' THEN 5
		ELSE 9
     END,
           [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3)),
           os.[CoachReason_Current_Coaching_Initiatives]
    FROM [EC].[Outlier_Coaching_Stage] os JOIN  [EC].[Coaching_Log] cf      
    ON os.[Report_ID] = cf.[numReportID] AND  os.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
 -- Truncate Staging Table
Truncate Table [EC].[Outlier_Coaching_Stage]


CLOSE SYMMETRIC KEY [CoachingKey]   
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Outlier
GO



/*
sp_InsertInto_Coaching_Log_Quality(03).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 02: Updated to Incorporate ATA Scorecards - TFS 7541 - 09/19/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Quality' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
-- Author:           Susmitha Palacherla
-- Create Date:      02/23/2014
-- Description:     This procedure inserts the Quality scorecards into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Modified per TFS 283 to force CRLF in Description value when viewed in UI - 08/31/2015
-- Updated per TFS 3757 to add isCoachingMonitor attribute - 10/28/2016
-- Updated to Incorporate ATA Scorecards - TFS 7541 - 09/19/2017
-- Modified to support Encryption of sensitive data. Removed LanID. TFS 7856 - 10/23/2017
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality]
@Count INT OUTPUT
  
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @maxnumID INT,
      @strSourceType NVARCHAR(20)
       -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])    
      SET @strSourceType = 'Indirect'
      
      -- Inserts records from the Quality_Coaching_Stage table to the Coaching_Log Table

         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[VerintID]
           ,[VerintEvalID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSE]
           ,[isCSRAcknowledged]
           ,[VerintFormName]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           ,[isCoachingMonitor])

            SELECT DISTINCT
            User_EMPID	[FormName],
            CASE qs.Program  
            WHEN NULL THEN csr.Emp_Program
            WHEN '' THEN csr.Emp_Program
            ELSE qs.Program  END       [ProgramName],
            [EC].[fn_intSourceIDFromSource](@strSourceType, qs.Source)[SourceID],
            [EC].[fn_strStatusIDFromIQSEvalID](qs.CSE, qs.Oppor_Rein )[StatusID],
            [EC].[fn_intSiteIDFromEmpID](LTRIM(qs.User_EMPID))[SiteID],
            qs.User_EMPID [EmpID],
            qs.Evaluator_ID	 [SubmitterID],       
            qs.Call_Date [EventDate],
            0			[isAvokeID],
		    0			[isNGDActivityID],
            0			[isUCID],
            1 [isVerintID],
            qs.Journal_ID	[VerintID],
            qs.Eval_ID [VerintEvalID],
            --EC.fn_nvcHtmlEncode(qs.Summary_CallerIssues)[Description],	
            REPLACE(EC.fn_nvcHtmlEncode(qs.[Summary_CallerIssues]), CHAR(13) + CHAR(10) ,'<br />')[Description],
            GetDate()  [SubmittedDate], 
		    qs.Eval_Date	[StartDate],
		    CASE WHEN qs.CSE = '' THEN 0
	            	ELSE 1 END	[isCSE],			
		    0 [isCSRAcknowledged],
		    qs.VerintFormname [verintFormName],
		    qs.Module [ModuleID],
		    ISNULL(csr.[Sup_ID],'999999') [SupID],
		    ISNULL(csr.[Mgr_ID],'999999')[MgrID],
		    qs.isCoachingMonitor [isCoachingMonitor]
		    
FROM [EC].[Quality_Coaching_Stage] qs 
join EC.Employee_Hierarchy csr on qs.User_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on qs.Eval_ID = cf.VerintEvalID
where cf.VerintEvalID is null
OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.

INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
			CASE 
			WHEN (cf.ModuleID = 3) THEN 15 ELSE 10
			END,
        42,
        qs.[Oppor_Rein]
    FROM [EC].[Quality_Coaching_Stage] qs JOIN  [EC].[Coaching_Log] cf      
    ON qs.[Eval_ID] = cf.[VerintEvalID] 
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
 WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms
 --Truncate Staging Table
 Truncate Table [EC].[Quality_Coaching_Stage]

COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Quality
GO


/*
sp_InsertInto_Coaching_Log_Quality_Other(04).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 04: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 03: Add table [EC].[NPN_Description] to Get NPN Description from table. TFS 5649 - 02/20/2017

Version 02: New quality NPN feed - TFS 5309 - 2/3/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Quality_Other' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality_Other]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		        Susmitha Palacherla
-- Last Modified Date: 09/16/2015
-- Last Updated By: Susmitha Palacherla
-- Initial Revision: Setup of CTC Load - TFS 2268 -  6/15/2016
-- Update: HFC and KUD Loads - TFS 3179 and 3186 - 07/15/2016
-- Update: HFC and KUD Load. Start date fix. TFS 3179 - 08/3/2016
-- Update: NPN Load. TFS 5309 - 02/01/2017
-- Update: Get NPN Description from table. TFS 5649 - 02/17/2017
-- Modified to support Encryption of sensitive data. Removed LanID. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality_Other]
@Count INT OUTPUT

AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
                        
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNULL(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   

-- Open the symmetric key with which to encrypt the data.  
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert];  

      
-- Update the value for Pending Acknowledgement

  UPDATE [EC].[Quality_Other_Coaching_Stage]
  SET [Form_Status]= 'Pending Acknowledgement'
  WHERE [Form_Status]= 'Pending Acknowledgment'
  
  WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms
      
-- Inserts records from the Quality_Other_Coaching_Stage table to the Coaching_Log Table

  INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
            ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
select  Distinct LOWER(cs.EMP_ID)	[FormName],
        CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  END       [ProgramName],
        [EC].[fn_intSourceIDFromSource](cs.[Form_Type],cs.[Source])[SourceID],
        [EC].[fn_strStatusIDFromStatus](cs.Form_Status)[StatusID],
        [EC].[fn_intSiteIDFromEmpID](cs.EMP_ID)[SiteID],
        cs.[EMP_ID]                   [EmpID],
        cs.[Submitter_ID]              [Submitter_ID],
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		-- EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
		 CASE WHEN cs.Report_Code LIKE 'CTC%' 
		 THEN  REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br />')
		 WHEN cs.Report_Code LIKE 'NPN%' 
		 THEN  REPLACE(EC.fn_nvcHtmlEncode([EC].[fn_strNPNDescriptionFromCode](cs.TextDescription)), CHAR(13) + CHAR(10) ,'<br />')
		 ELSE  EC.fn_nvcHtmlEncode(cs.TextDescription)END		[Description],
		 cs.Submitted_Date			SubmittedDate,
		 ISNULL(cs.start_Date,cs.Event_Date)				[StartDate],
		 0        				    [isCSRAcknowledged],
		 0                          [isCSE],
		 0                          [EmailSent],
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 CASE WHEN cs.Report_Code LIKE 'CTC%'
		 THEN 2	
		 ELSE 1 END						[ModuleID],
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 ISNULL(csr.[Mgr_ID],'999999') [MgrID]
	                   
from [EC].[Quality_Other_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.[EMP_ID] = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null

SELECT @Count = @@ROWCOUNT

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

-- Updates the strFormID value


UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
           CASE WHEN cf.strReportCode like 'CTC%' THEN 21 
           WHEN cf.strReportCode like 'HFC%' THEN 10 
           WHEN cf.strReportCode like 'KUD%' THEN 11
           WHEN cf.strReportCode like 'NPN%' THEN 5
           ELSE 14 END,
           [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3)),
           qs.[CoachReason_Current_Coaching_Initiatives]
    FROM [EC].[Quality_Other_Coaching_Stage] qs JOIN  [EC].[Coaching_Log] cf      
    ON qs.[Report_ID] = cf.[numReportID] AND  qs.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
-- Close the symmetric key with which to encrypt the data.  
CLOSE SYMMETRIC KEY [CoachingKey]  


 WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

-- Truncate Staging Table
Truncate Table [EC].[Quality_Other_Coaching_Stage]

                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Quality_Other
GO



/*
sp_InsertInto_Coaching_Log_Training(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Training' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Training]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        3/22/2016
--  Created per TFS 2283 to load the Training feed(s) SDR and ODT
-- Modified to support Encryption of sensitive data. Opened Key and Removed LanID. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Training]
@Count INT OUTPUT

AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

-- Open the symmetric key with which to encrypt the data.  
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert];  

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
                        
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNULL(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   
      
-- Inserts records from the Training_Coaching_Stage table to the Coaching_Log Table

  INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
select  Distinct cs.CSR_EMPID	[FormName],
        CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  END       [ProgramName],
        210                             [SourceID],
        [EC].[fn_strStatusIDFromStatus](cs.Form_Status)[StatusID],
        [EC].[fn_intSiteIDFromEmpID](cs.CSR_EMPID)[SiteID],
        cs.CSR_EMPID                    [EmpID],
        [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)[SubmitterID],
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		-- EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
		 REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '      '  ,'<br />')[Description],	-- CHAR(13) + CHAR(10)
		 cs.Submitted_Date			SubmittedDate,
		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
		 0                          [isCSE],
		 0                          [EmailSent],
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 1							[ModuleID],
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 ISNULL(csr.[Mgr_ID],'999999') [MgrID]
	                   
from [EC].[Training_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null

SELECT @Count =@@ROWCOUNT

-- Updates the strFormID value

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
           5,
           [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3)),
           os.[CoachReason_Current_Coaching_Initiatives]
    FROM [EC].[Training_Coaching_Stage] os JOIN  [EC].[Coaching_Log] cf      
    ON os.[Report_ID] = cf.[numReportID] AND  os.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
-- Close the symmetric key with which to encrypt the data.  
CLOSE SYMMETRIC KEY [CoachingKey]  


 WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

-- Truncate Staging Table
Truncate Table [EC].[Training_Coaching_Stage]
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  


END -- sp_InsertInto_Coaching_Log_Training

GO



/*
sp_InsertInto_ETS_Rejected(03).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data - Limited attributes being stored for rejected logs - TFS 7856 - 10/23/2017

Version 02: Updated to incorporate HNC and ICC Reports per TFS 7174 - 07/26/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_ETS_Rejected' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_ETS_Rejected]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 11/19/14
-- Description:	Determines rejection Reason for ETS logs.
-- Populates the records with reject reasons to the Reject table.
-- Last Modified Date - 01/05/2015
-- Last Modified By - Susmitha Palacherla
-- Modified per scr 14031 to incorporate the compliance reports.
-- Modified to support HNC and ICC Reports for CSRs. TFS 7174 - 07/21/2017
-- Modified during Encryption of sensitive data. Limited attributes being stored for rejected logs. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_ETS_Rejected] 

AS
BEGIN

-- Determine and populate Reject Reasons
-- Reject logs with incorrect or non-supported ETS report Code 

BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Reject_Reason]= N'Report Code not valid.'
WHERE LEFT([Report_Code],LEN([Report_Code])-8) NOT IN 
(SELECT DISTINCT ReportCode FROM [EC].[ETS_Description])
	
OPTION (MAXDOP 1)
END  

    
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject Logs with Employee not found.

BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Reject_Reason]= N'Employee Not found in Hierarchy table.'
WHERE EMP_ID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy])
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  
       
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject Logs that can only be for Sup Module and Employee does not have a Sup job code.
BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN LEFT(Report_Code,LEN(Report_Code)-8) IN ('FWHA','HOLA','ITDA', 'ITIA', 'UTLA','OAS','EOT') 
AND [Emp_Role] <> 'S' THEN N'Approver does not have a Supervisor job code.'
ELSE NULL END
WHERE [Emp_Role] <> 'S' and [Reject_Reason]is NULL
OPTION (MAXDOP 1)
END  
       
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject Logs that can only be for CSR Module and Employee does not have a CSR job code.
BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN LEFT(Report_Code,LEN(Report_Code)-8) IN ('HNC', 'ICC')
AND [Emp_Role] <> 'C' THEN N'Employee does not have a CSR job code.'
ELSE NULL END
WHERE [Emp_Role] <> 'C' AND [Reject_Reason]is NULL
OPTION (MAXDOP 1)
END  
       
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

--Reject logs that can be for either CSR or Sup Module and do not have supporting job codes.
BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN LEFT(Report_Code,LEN(Report_Code)-8) IN ('EA','FWH','HOL','ITD', 'ITI', 'UTL', 'OAE')
AND [Emp_Role] not in ( 'C','S') THEN N'Employee does not have a CSR or Supervisor job code.'
ELSE NULL END
WHERE [Emp_Role] NOT in ('C','S')AND [Reject_Reason]is NULL
OPTION (MAXDOP 1)
END  
   
   
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

 

-- Write rejected records to Rejected table.

BEGIN
INSERT INTO [EC].[ETS_Coaching_Rejected]
           ([Report_Code]
           ,[Event_Date]
           ,[Emp_ID]
           ,[FileName]
           ,[Reject_Reason]
           ,[Reject_Date])
          SELECT S.[Report_Code]
           ,S.[Event_Date]
           ,S.[Emp_ID]
           ,S.[FileName]
           ,S.[Reject_Reason]
           ,GETDATE()
           FROM [EC].[ETS_Coaching_Stage] S
           WHERE S.[Reject_Reason] is not NULL
      

OPTION (MAXDOP 1)
END

END  -- [EC].[sp_InsertInto_ETS_Rejected]


GO


/*
sp_InsertInto_IQS_Rejected(02).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 11/27/2017

Version 01: Document Initial Revision - Incorporate ATA forms in IQS feed. - TFS 7541 - 9/18/2017
*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_IQS_Rejected' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_IQS_Rejected]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 9/18/2017
-- Description:	Determines rejection reason and rejects  logs.
-- Revision History:
-- Initial Revision. Incorporate ATA scorecards - TFS 7541 - 09/18/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_IQS_Rejected] 
@Count INT OUTPUT

AS
BEGIN

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  

-- Populate Emp Lan ID, Role and Module
BEGIN
UPDATE [EC].[Quality_Coaching_Stage]
SET [User_LANID] = CONVERT(nvarchar(30),DecryptByKey(EMP.[Emp_LanID]))
    ,[Emp_Role]= 
    CASE WHEN EMP.[Emp_Job_Code]in ('WACS01', 'WACS02','WACS03') THEN 'C'
    WHEN EMP.[Emp_Job_Code] = 'WACS40' THEN 'S'
	WHEN EMP.[Emp_Job_Code] IN ('WACQ02','WACQ03','WACQ12') THEN 'Q'
    WHEN EMP.[Emp_Job_Code] IN ('WIHD01','WIHD02','WIHD03','WIHD04') THEN 'L'
    WHEN EMP.[Emp_Job_Code] IN ('WTID13','WTTI02','WTTR12','WTTR13') THEN 'T'
    ELSE 'O' END
	, [Module] = CASE WHEN [VerintFormName] like '%ATA%' THEN 3 ELSE 1 END
FROM [EC].[Quality_Coaching_Stage] STAGE JOIN [EC].[Employee_Hierarchy]EMP
ON LTRIM(STAGE.User_EMPID) = LTRIM(EMP.Emp_ID)

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Reject Logs where Active Employee record does not exist

BEGIN
UPDATE [EC].[Quality_Coaching_Stage]
SET [Reject_Reason]= N'Record does not belong to Active Employee.'
WHERE (User_EMPID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]
 WHERE Active = 'A'))
 OR User_EMPID = '999999'
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  
       
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject Logs that are  for Quality Module and Employee does not have a Qualityjob code-(ATA)
BEGIN
UPDATE [EC].[Quality_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN [Module] = 3
AND [Emp_Role] <> 'Q' THEN N'Employee does not have a Quality job code.'
ELSE NULL END
WHERE [Emp_Role] <> 'Q' and [Reject_Reason]is NULL
OPTION (MAXDOP 1)
END  
       
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject Logs that are for CSR Module and Employee does not have a CSR job code.(Non ATA)
BEGIN
UPDATE [EC].[Quality_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN [Module] = 1
AND [Emp_Role] <> 'C' THEN N'Employee does not have a CSR job code.'
ELSE NULL END
WHERE [Emp_Role] <> 'C' AND [Reject_Reason]is NULL
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



-- Write rejected records to Rejected table.

BEGIN
INSERT INTO [EC].[Quality_Coaching_Rejected]
           ([Eval_ID]
		   ,[Eval_Date]
		   ,[Eval_Site_ID]
		   ,[User_EmpID]
		   ,[Journal_ID]
		   ,[Call_Date]
		   ,[VerintFormName]
		   ,[Reject_reason]
		   ,[Date_Rejected])
            SELECT s.[Eval_ID]
		   ,s.[Eval_Date]
		   ,s.[Eval_Site_ID]
		   ,s.[User_EmpID]
		   ,s.[Journal_ID]
		   ,s.[Call_Date]
		   ,s.[VerintFormName]
		   ,s.[Reject_reason]
		   ,GETDATE()
           FROM [EC].[Quality_Coaching_Stage] s
           WHERE s.[Reject_Reason] is not NULL
      

OPTION (MAXDOP 1)
END

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
-- Delete rejected records

BEGIN
DELETE FROM [EC].[Quality_Coaching_Stage]
WHERE [Reject_reason]is not NULL
SELECT @Count = @@ROWCOUNT

OPTION (MAXDOP 1)
END

END  -- [EC].[sp_InsertInto_Quality_Rejected]

GO



/*
sp_InsertInto_Outlier_Rejected(04).sql
Last Modified Date: 11/23/2017
Last Modified By: Susmitha Palacherla

Version 05: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 11/23/2017

Version 04: Removed status check for BRL and BRN feeds  - TFS 8793 - 11/16/2017

Version 03: Updated to add rejection logic for invalid LCS Review Mgr ID - Suzy Palacherla -  TFS 6612 - 05/22/2017

Version 02: Missed Program insert into Rejected Table - Suzy Palacherla -  TFS 6377 - 04/25/2017

Version 01: Document Initial Revision - Suzy Palacherla -  TFS 6377 - 04/24/2017
*/



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Outlier_Rejected' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Outlier_Rejected]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        4/24/2017
-- Description:	 
-- Populates Reject Reason(s) and Inserts Rejected logs to Rejected table.
-- Initial revision. TFS 6377 - 04/24/2017
-- Updated to add rejection logic for invalid LCS Review Mgr ID - TFS 6612 - 05/22/2017
-- Removed status check for BRL and BRN feeds  - TFS 8793 - 11/16/2017
-- Modified during Encryption of sensitive data. Limited attributes being stored for rejected logs. TFS 7856 - 11/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Outlier_Rejected]
AS
BEGIN


-- Determine and populate Reject Reasons

-- Employee not found in Hierrachy table

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Reject_Reason]= N'Employee Not found in Hierarchy table.'
WHERE (CSR_EMPID = '' OR
CSR_EMPID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]))
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

-- Employee not Active

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Reject_Reason]= CASE WHEN Emp_Active = 'N' THEN 'Employee not Active'
    ELSE NULL END
WHERE [Reject_Reason]is NULL
  OPTION (MAXDOP 1)
END  
    
  
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms
    
-- Incorrect Module

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Reject_Reason]= 
CASE 
WHEN [Emp_Role] = 'O' THEN 'Invalid Role for Log generation'
--WHEN (LEFT(Report_Code,LEN(Report_Code)-8) IN ('BRL', 'BRN') AND [Form_Status]= 'Pending Supervisor Review') AND [Emp_Role] <> 'C'
--THEN 'Employee not a CSR'
--WHEN (LEFT(Report_Code,LEN(Report_Code)-8) IN ('BRL', 'BRN') AND [Form_Status]= 'Pending Manager Review') AND [Emp_Role] <> 'S'
--THEN 'Employee not a Supervisor'
--WHEN (LEFT(Report_Code,LEN(Report_Code)-8) IN ('BRL', 'BRN') AND [Form_Status]= 'Pending Quality Lead Review') AND [Emp_Role] <> 'Q'
--THEN 'Employee not a Quality Specialist'
WHEN LEFT(Report_Code,LEN(Report_Code)-8) = 'MSRS'  AND [Emp_Role] <> 'S'
THEN 'Employee not a Supervisor'
WHEN LEFT(Report_Code,LEN(Report_Code)-8) NOT IN ('BRL', 'BRN', 'MSRS')  AND [Emp_Role] <> 'C'
THEN 'Employee not a CSR' 
  ELSE NULL END
WHERE [Reject_Reason]is NULL
  OPTION (MAXDOP 1)
END  
    
  
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms


-- Employee not found in Hierrachy table

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Reject_Reason]= N'Review Manager not active or valid.'
WHERE Report_Code LIKE 'LCS%'
AND (RMgr_ID = '' OR
RMgr_ID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]
 WHERE Emp_Job_Code = 'WACS50'
 AND Active = 'A'))
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  

--Insert Rejected Records into Rejected Table
BEGIN
INSERT INTO [EC].[Outlier_Coaching_Rejected]
           ([Report_ID]
           ,[Report_Code]
           ,[Source]
           ,[Event_Date]
           ,[Submitted_Date]
           ,[FileName]
           ,[Rejected_Reason]
           ,[Rejected_Date]
       )
 SELECT S.[Report_ID]
      ,S.[Report_Code]
      ,S.[Source]
      ,S.[Event_Date]
      ,S.[Submitted_Date]
      ,S.[FileName]
      ,s.[Reject_Reason]
      ,GETDATE()
   FROM [EC].[Outlier_Coaching_Stage]S left outer join [EC].[Outlier_Coaching_Rejected] R 
  ON S.Report_ID = R.Report_ID and S.Report_Code = R.Report_Code 
  WHERE R.Report_ID is NULL and R.Report_Code is NULL 
  AND S.[Reject_Reason] is not NULL                

OPTION (MAXDOP 1)
END


END -- sp_InsertInto_Outlier_Rejected

GO



/*
sp_InsertInto_Survey_Response_Header(03).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 02: Modified during Encryption of sensitive data. Used Emp LanID from Emp table. TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Survey_Response_Header' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Survey_Response_Header]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        8/21/2015
-- Checks for Completed eCLs in [EC].[Coaching_Log]table and generates a 
-- Survey Header record based on a randomly selected completed ecl
-- and inserts into [EC].[Survey_Response_Header]
-- This procedure checks to make sure that a survey has not been generated for the
-- calendar month for that employee.
-- After a survey is generated for an ecl, the coaching log is updated
-- in the Coaching_log to indicate that a Survey has been generated based on this ecl.
-- Created  per TFS 549 to setup CSR survey.
-- Modified during Encryption of sensitive data. Used Emp LanID from Emp table. TFS 7856 - 10/23/2017
-- Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Survey_Response_Header]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @EndOfPeriod DATETIME
      DECLARE @StartOfPeriod DATETIME
      DECLARE @i INT
      DECLARE @j INT
      DECLARE @SurveyTypeID INT
      DECLARE @SurveyTypeID_Table table (idx INT Primary Key IDENTITY(1,1), SurveyTypeID INT)
	  DECLARE @numirows INT
      DECLARE @ModuleID INT
      DECLARE @Modules_Table table (idx INT Primary Key IDENTITY(1,1), ModuleID INT)
      DECLARE @numjrows INT




  SET @EndOfPeriod  = DATEADD(day, DATEDIFF(DD, 0, GetDate()),0) 
  -- For Start of Current Month
  --SET @StartOfMonth = DATEADD(month, DATEDIFF(month, 0, GetDate()),0) 
  -- For testing setting to beginning of year. 
  --SET @StartOfMonth = DATEADD(year, DATEDIFF(year, 0, GetDate()),0) 
  -- For n months in the past GetDate())-n
    --SET @StartOfMonth = DATEADD(month, DATEDIFF(month, 0, GetDate())-4,0) 
  SET @StartOfPeriod = DATEADD(day, DATEDIFF(DD, 0, GetDate())-7,0) 
 
 --PRINT @StartOfPeriod
 --PRINT @EndOfPeriod   
 
-- Populate SurveyTypeID_Table 
INSERT @SurveyTypeID_Table
SELECT DISTINCT SurveyTypeID FROM [EC].[Survey_DIM_Type]WHERE [isActive] = 1
  
  -- Enumerate the SurveyTypeID_Table
  -- For generating a Survey per Active Survey Type.
SET @i = 1
SET @numirows = (SELECT COUNT(*) FROM @SurveyTypeID_Table)
IF @numirows > 0
    WHILE (@i <= (SELECT MAX(idx) FROM @SurveyTypeID_Table))
    BEGIN
SET @SurveyTypeID = (SELECT [SurveyTypeID] FROM @SurveyTypeID_Table WHERE idx = @i)

-- Looping through and checking for Modules that need the Survey generated for the above Survey Type.

INSERT   @Modules_Table
SELECT DISTINCT X.ModuleID FROM
(
SELECT CASE WHEN [CSR]= 1 THEN 1 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Supervisor]= 1 THEN 2 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Quality]= 1 THEN 3 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [LSA]= 1 THEN 4 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Training]= 1 THEN 5 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID)X
WHERE X.ModuleID IS NOT NULL

 SET @j = 1
 SET @numjrows = (SELECT COUNT(*) FROM @Modules_Table)
IF @numjrows > 0

 WHILE (@j <= (SELECT MAX(idx) FROM @Modules_Table))
 
BEGIN
  SET @ModuleID = (SELECT [ModuleID] FROM @Modules_Table WHERE idx = @j)

--PRINT @ModuleID

 -- eCLs meeting criteria for Survey generation are first selected.
 -- Records for each employee are ordered by a new randomly generated ID.
 -- First row from the randomly ordered records is selected for each Employee.
 
 /*
 BEGIN 
  ;WITH SurveyPool AS
  (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
   AND SourceID <> 224 -- Verint-TQC
  AND isCSRAcknowledged = 1
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)
*/



 BEGIN 
  ;WITH Selected AS
  (SELECT DISTINCT @SurveyTypeID SurveyTypeID, 
                   CL.CoachingID,
                   CL.Formname, 
                   CL.EmpID,
                   CL.SiteID, 
                   CL.SourceID, 
                   CL.ModuleID,
                   CL.Submitteddate, 
                   DD.MonthOfYear, 
                   DD.CalendarYear 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN EC.DIM_Date DD
  ON DATEADD(dd, DATEDIFF(dd, 0, CL.CSRReviewAutoDate),0) = DD.Fulldate JOIN 
 (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
  AND SiteID NOT IN (SELECT SiteID FROM [EC].[Survey_Sites] WHERE isPilot = 1) -- Exclude sites with Pilot Survey here
   AND SourceID <> 224 -- Verint-TQC
    AND isCSRAcknowledged = 1
  AND SurveySent = 0
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)SP
 ON CL.CoachingID = SP.CoachingID
 AND CL.EmpID = SP.EmpID
 
 UNION
 
 SELECT DISTINCT @SurveyTypeID SurveyTypeID, 
                   CL.CoachingID,
                   CL.Formname, 
                   CL.EmpID,
                   CL.SiteID, 
                   CL.SourceID, 
                   CL.ModuleID,
                   CL.Submitteddate, 
                   DD.MonthOfYear, 
                   DD.CalendarYear 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN EC.DIM_Date DD
  ON DATEADD(dd, DATEDIFF(dd, 0, CL.CSRReviewAutoDate),0) = DD.Fulldate JOIN 
 (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Coaching_Log_Reason] CLR WITH (NOLOCK)
  ON CLR.CoachingID  = CL.CoachingID  JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
  AND SiteID IN (SELECT SiteID FROM [EC].[Survey_Sites] WHERE isPilot = 1) -- Include sites with Pilot Survey here
  AND CLR.CoachingReasonID in (4, 5, 8, 10, 11, 13, 55)
    AND isCSRAcknowledged = 1
  AND SurveySent = 0
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)SP
 ON CL.CoachingID = SP.CoachingID
 AND CL.EmpID = SP.EmpID)
 
 
--SELECT * FROM Selected
-- Insert selected random completions for each Employee into Survey header.
-- Check that no Survey exists for current month and year.

-- SCL: Selecetd Coaching logs
---SP: Survey pool
-- SRH: Survey Response Header



   
INSERT INTO [EC].[Survey_Response_Header]
           ([SurveyTypeID]
           ,[CoachingID]
           ,[FormName]
           ,[EmpID]
           ,[EmpLanID]
           ,[SiteID]
           ,[SourceID]
           ,[ModuleID]
           ,[CreatedDate]
           ,[MonthOfYear]
           ,[CalendarYear]
           ,[Status]
         )
SELECT  SCL.SurveyTypeID [SurveyTypeID],
		SCL.CoachingID  [CoachingID],
		SCL.FormName    [FormName],
        SCL.EmpID       [EmpID],
        EH.Emp_LanID    [EmpLanID],
        SCL.SiteID      [SiteID],
        SCL.SourceID    [SourceID],
        SCL.ModuleID    [ModuleID],
        GETDATE()       [CreatedDate],
        SCL.MonthOfYear,
        SCL.CalendarYear,
        'Open'         [Status]
 FROM Selected SCL JOIN [EC].[Employee_Hierarchy] EH
 ON SCL.EmpID = EH.Emp_ID LEFT OUTER JOIN [EC].[Survey_Response_Header] SRH 
  ON SCL.EmpID = SRH.EmpID
  AND SCL.ModuleID = SRH.ModuleID
  AND SCL.MonthOfYear = SRH.MonthOfYear
  AND SCL.CalendarYear = SRH.CalendarYear 
  AND SCL.[SurveyTypeID]= SRH.[SurveyTypeID]
--WHERE SCL.ModuleID = @ModuleID
--AND SCL.SurveyTypeID = @SurveyTypeID
WHERE (SRH.[SurveyTypeID] IS NULL AND SRH.EmpID is NULL AND SRH.MonthOfYear IS NULL AND SRH.CalendarYear IS NULL)
OPTION (MAXDOP 1)
END

SET @j = @j + 1
END

SET @i = @i + 1
END



WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [SurveySent] = 1
FROM [EC].[Survey_Response_Header]SRH JOIN [EC].[Coaching_Log] CL
ON SRH.[CoachingID] = CL.[CoachingID]
AND SRH.[Formname] = CL.[Formname]
AND [SurveySent] = 0
OPTION (MAXDOP 1)
END

                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Survey_Response_Header

GO



/*
sp_InsertInto_Survey_Response_Header_Resend(03).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 03: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 02: Modified during Encryption of sensitive data. Used Emp LanID from Emp table. TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Survey_Response_Header_Resend' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Survey_Response_Header_Resend]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        8/21/2015
-- Checks for Completed eCLs in [EC].[Coaching_Log]table and generates a 
-- Survey Header record and inserts into [EC].[Survey_Response_Header]
-- This procedure is used for resending a Survey, so it will regenerate a Survey 
-- even when a Survey has previously been generated in the same month.
-- After a survey is generated for an ecl, the coaching log is updated
-- in the Coaching_log to indicate that a Survey has been generated based on this ecl.
-- Created  per TFS 549 to setup CSR survey.
-- Modified during Encryption of sensitive data. Used Emp LanID from Emp table. TFS 7856 - 10/23/2017
-- Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Survey_Response_Header_Resend]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @EndOfPeriod DATETIME
      DECLARE @StartOfPeriod DATETIME
      DECLARE @DMonth INT
      DECLARE @DYear INT
      DECLARE @i INT
      DECLARE @j INT
      DECLARE @SurveyTypeID INT
      DECLARE @SurveyTypeID_Table table (idx INT Primary Key IDENTITY(1,1), SurveyTypeID INT)
	  DECLARE @numirows INT
      DECLARE @ModuleID INT
      DECLARE @Modules_Table table (idx INT Primary Key IDENTITY(1,1), ModuleID INT)
      DECLARE @numjrows INT
    



  SET @EndOfPeriod  = DATEADD(day, DATEDIFF(DD, 0, GetDate()),0) 
  -- For Start of Current Month
  --SET @StartOfMonth = DATEADD(month, DATEDIFF(month, 0, GetDate()),0) 
  -- For testing setting to beginning of year. 
  --SET @StartOfMonth = DATEADD(year, DATEDIFF(year, 0, GetDate()),0) 
  -- For n months in the past GetDate())-n
    --SET @StartOfMonth = DATEADD(month, DATEDIFF(month, 0, GetDate())-4,0) 
  SET @StartOfPeriod = DATEADD(day, DATEDIFF(DD, 0, GetDate())-7,0) 
 
 --PRINT @StartOfPeriod
 --PRINT @EndOfPeriod 
   SET @DMonth = datepart(month,getdate())
   SET @DYear = datepart(year,getdate())  
 
-- Populate SurveyTypeID_Table 
INSERT @SurveyTypeID_Table
SELECT DISTINCT SurveyTypeID FROM [EC].[Survey_DIM_Type]WHERE [isActive] = 1
  
  -- Enumerate the SurveyTypeID_Table
  -- For generating a Survey per Active Survey Type.
SET @i = 1
SET @numirows = (SELECT COUNT(*) FROM @SurveyTypeID_Table)
IF @numirows > 0
    WHILE (@i <= (SELECT MAX(idx) FROM @SurveyTypeID_Table))
    BEGIN
SET @SurveyTypeID = (SELECT [SurveyTypeID] FROM @SurveyTypeID_Table WHERE idx = @i)

-- Looping through and checking for Modules that need the Survey generated for the above Survey Type.

INSERT   @Modules_Table
SELECT DISTINCT X.ModuleID FROM
(
SELECT CASE WHEN [CSR]= 1 THEN 1 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Supervisor]= 1 THEN 2 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Quality]= 1 THEN 3 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [LSA]= 1 THEN 4 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID
UNION 
SELECT CASE WHEN [Training]= 1 THEN 5 ELSE NULL END AS ModuleID FROM [EC].[Survey_DIM_Type] WHERE [SurveyTypeID]= @SurveyTypeID)X
WHERE X.ModuleID IS NOT NULL

 SET @j = 1
 SET @numjrows = (SELECT COUNT(*) FROM @Modules_Table)
IF @numjrows > 0

 WHILE (@j <= (SELECT MAX(idx) FROM @Modules_Table))
 
BEGIN
  SET @ModuleID = (SELECT [ModuleID] FROM @Modules_Table WHERE idx = @j)

--PRINT @ModuleID

 -- eCLs meeting criteria for Survey generation are first selected.
 -- Records for each employee are ordered by a new randomly generated ID.
 -- First row from the randomly ordered records is selected for each Employee.
 
 /*
 BEGIN 
  ;WITH SurveyPool AS
  (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
   AND SourceID <> 224 -- Verint-TQC
  AND isCSRAcknowledged = 1
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)
*/



 BEGIN 
  ;WITH Selected AS
  (SELECT DISTINCT @SurveyTypeID SurveyTypeID, 
                   CL.CoachingID,
                   CL.Formname, 
                   CL.EmpID,
                   CL.SiteID, 
                   CL.SourceID, 
                   CL.ModuleID,
                   CL.Submitteddate, 
                   DD.MonthOfYear, 
                   DD.CalendarYear 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN EC.DIM_Date DD
  ON DATEADD(dd, DATEDIFF(dd, 0, CL.CSRReviewAutoDate),0) = DD.Fulldate JOIN 
 (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
    AND SiteID NOT IN (SELECT SiteID FROM [EC].[Survey_Sites] WHERE isPilot = 1) -- Exclude sites with Pilot Survey here
   AND SourceID <> 224 -- Verint-TQC
  AND isCSRAcknowledged = 1
  AND SurveySent = 0
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)SP
 ON CL.CoachingID = SP.CoachingID
 AND CL.EmpID = SP.EmpID
 
  UNION
 
 
 SELECT DISTINCT @SurveyTypeID SurveyTypeID, 
                   CL.CoachingID,
                   CL.Formname, 
                   CL.EmpID,
                   CL.SiteID, 
                   CL.SourceID, 
                   CL.ModuleID,
                   CL.Submitteddate, 
                   DD.MonthOfYear, 
                   DD.CalendarYear 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN EC.DIM_Date DD
  ON DATEADD(dd, DATEDIFF(dd, 0, CL.CSRReviewAutoDate),0) = DD.Fulldate JOIN 
 (SELECT x.EmpID, x.CoachingID FROM
  (SELECT  CL.EMPID EmpID, CL.CoachingID CoachingID,ROW_NUMBER() OVER( PARTITION BY CL.EMPID
   ORDER BY NewID()) AS Rn 
  FROM [EC].[Coaching_Log] CL WITH (NOLOCK) JOIN [EC].[Coaching_Log_Reason] CLR WITH (NOLOCK)
  ON CLR.CoachingID  = CL.CoachingID  JOIN [EC].[Employee_Hierarchy]EH
  ON CL.EmpID = EH.Emp_ID
  WHERE Statusid = 1 -- Completed
  AND ModuleID = @ModuleID -- Each Module 
  AND SiteID IN (SELECT SiteID FROM [EC].[Survey_Sites] WHERE isPilot = 1) -- Include sites with Pilot Survey here
  AND CLR.CoachingReasonID in (4, 5, 8, 10, 11, 13, 55)
  AND isCSRAcknowledged = 1
  AND SurveySent = 0
  AND CSRReviewAutoDate BETWEEN @StartOfPeriod and @EndOfPeriod
  AND EH.Active = 'A'
 )x
 WHERE x.Rn=1)SP
 ON CL.CoachingID = SP.CoachingID
 AND CL.EmpID = SP.EmpID 
  )
 
 
--SELECT * FROM Selected
-- Insert selected random completions for each Employee into Survey header.
-- Check that no Survey exists for current month and year.

-- SCL: Selecetd Coaching logs
---SP: Survey pool
-- SRH: Survey Response Header




INSERT INTO [EC].[Survey_Response_Header]
           ([SurveyTypeID]
           ,[CoachingID]
           ,[FormName]
           ,[EmpID]
           ,[EmpLanID]
           ,[SiteID]
           ,[SourceID]
           ,[ModuleID]
           ,[CreatedDate]
           ,[MonthOfYear]
           ,[CalendarYear]
           ,[Status]
         )
SELECT  SCL.SurveyTypeID [SurveyTypeID],
		SCL.CoachingID  [CoachingID],
		SCL.FormName    [FormName],
        SCL.EmpID       [EmpID],
        EH.Emp_LanID    [EmpLanID],
        SCL.SiteID      [SiteID],
        SCL.SourceID    [SourceID],
        SCL.ModuleID    [ModuleID],
        GETDATE()       [CreatedDate],
        SCL.MonthOfYear,
        SCL.CalendarYear,
        'Open'         [Status]
 FROM Selected SCL JOIN [EC].[Employee_Hierarchy] EH
 ON SCL.EmpID = EH.Emp_ID JOIN 
 --[EC].[Survey_Response_Header] SRH 
 (SELECT [SurveyTypeID],[CalendarYear],[MonthOfYear],[ModuleID],[EmpID], COUNT(*)SCount
FROM [EC].[Survey_Response_Header]
WHERE MonthOfYear = @DMonth
AND CalendarYear = @DYear
AND SurveyTypeID = @SurveyTypeID
GROUP BY [SurveyTypeID],[CalendarYear],[MonthOfYear],[ModuleID],[EmpID]
Having COUNT(*)= 1
) SRH
  ON SCL.EmpID = SRH.EmpID
  AND SCL.ModuleID = SRH.ModuleID
  AND SCL.MonthOfYear = SRH.MonthOfYear
  AND SCL.CalendarYear = SRH.CalendarYear 
  AND SCL.[SurveyTypeID]= SRH.[SurveyTypeID]
OPTION (MAXDOP 1)
END

SET @j = @j + 1
END

SET @i = @i + 1
END



WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [SurveySent] = 1
FROM [EC].[Survey_Response_Header]SRH JOIN [EC].[Coaching_Log] CL
ON SRH.[CoachingID] = CL.[CoachingID]
AND SRH.[Formname] = CL.[Formname]
AND [SurveySent] = 0
OPTION (MAXDOP 1)
END

             
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Survey_Response_Header_Resend

GO



/*
sp_InsertInto_Warning_Log(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      10/03/2014
--    Description:     This procedure inserts the Warning records into the Warning_Log table. 
--                     The main attributes of the Warning are written to the warning_Log table.
--                     The Warning Reasons are written to the Warning_Reasons Table.
--  Last Modified By: Susmitha Palacherla
--  Modified  to add Behavior to the insert to support warnings for Training Module - per TFS 861 - 10/21/2015 
 -- Modified to support Encryption of sensitive data. Open key and removed LanID. TFS 7856 - 10/23/2017
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Warning_Log]
(     @nvcFormName Nvarchar(50),
      @nvcProgramName Nvarchar(50),
      @nvcEmpLanID Nvarchar(40),
      @SiteID INT,
      @nvcSubmitter Nvarchar(40),
      @dtmEventDate datetime,
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @dtmSubmittedDate datetime ,
      @ModuleID INT,
      @nvcBehavior Nvarchar(30),
      @isDup BIT OUTPUT,
      @nvcNewFormName Nvarchar(50) OUTPUT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE @nvcEmpID Nvarchar(10),
	        @nvcSubmitterID	Nvarchar(10),
	        @nvcSupID nvarchar(10),
	        @nvcMgrID nvarchar(10),
	        @nvcNotPassedSiteID INT,
	        @dtmDate datetime,
	        @intWarnIDExists BIGINT
	        
	OPEN SYMMETRIC KEY [CoachingKey]  
    DECRYPTION BY CERTIFICATE [CoachingCert]    
	 	        
	SET @dtmDate  = GETDATE()   
	SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanID,@dtmDate)
	SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcSupID = (Select Sup_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)
	SET @nvcMgrID = (Select Mgr_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)  
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
	SET @isDup = 1
	
SET @intWarnIDExists = (SELECT WL.WarningID
FROM [EC].[Warning_Log]WL join [EC].[Warning_Log_Reason]WLR
ON WL.WarningID = WLR.WarningID
WHERE WL.[EmpID]= @nvcEmpID
AND WL.[WarningGivenDate]= @dtmEventDate 
AND WLR.[CoachingReasonID] = @intCoachReasonID1
AND WLR.[SubCoachingReasonID]= @nvcSubCoachReasonID1
AND [Active] = 1)


IF @intWarnIDExists IS NULL 
        
 BEGIN 
         INSERT INTO [EC].[Warning_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[SupID]
           ,[MgrID]
           ,[WarningGivenDate]
           ,[SubmittedDate]
           ,[ModuleID]
           ,[Behavior])
     VALUES
           (@nvcEmpID 
           ,@nvcProgramName 
           ,120
           ,1
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@nvcSupID
           ,@nvcMgrID
           ,@dtmEventDate 
	       ,@dtmSubmittedDate 
		   ,@ModuleID
		   ,@nvcBehavior)
            
  CLOSE SYMMETRIC KEY [CoachingKey] 
     
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
    
UPDATE [EC].[Warning_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,WarningID)
where [WarningID] = @I  AND [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:01'  -- Wait for 5 ms

SET @nvcNewFormName = (SELECT [FormName] FROM  [EC].[Warning_Log] WHERE [WarningID] = @I)


 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Warning_Log_Reason]
            ([WarningID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             'Opportunity')       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
 SET @isDup = 0
 END       

COMMIT TRANSACTION


END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Warning_Log





GO




/*
sp_Insert_Into_Coaching_Log_Archive(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data - Open key - TFS 7856 - 10/23/2017


Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Insert_Into_Coaching_Log_Archive' 
)
   DROP PROCEDURE [EC].[sp_Insert_Into_Coaching_Log_Archive]
GO


SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:   10/10/2016
-- Description:	Archive Inactive Coaching logs older than 1 year
-- Last Modified By: Susmitha Palacherla
-- Revision History:
-- Intial Revision: Created per TFS 3932 - 10/10/2016
--  Modified to support Encryption of sensitive data - Removed EmpLanID. TFS 7856 - 10/23/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Insert_Into_Coaching_Log_Archive]@strArchivedBy nvarchar(50)= 'Automated Process'

AS
BEGIN


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION

BEGIN TRY
PRINT @strArchivedBy

-- Archive coaching logs older than 1 year

BEGIN
INSERT INTO [EC].[Coaching_Log_Archive]
           ([CoachingID]
           ,[FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[CoachingDate]
           ,[isAvokeID]
           ,[AvokeID]
           ,[isNGDActivityID]
           ,[NGDActivityID]
           ,[isUCID]
           ,[UCID]
           ,[isVerintID]
           ,[VerintID]
           ,[VerintEvalID]
           ,[Description]
           ,[CoachingNotes]
           ,[isVerified]
           ,[SubmittedDate]
           ,[StartDate]
           ,[SupReviewedAutoDate]
           ,[isCSE]
           ,[MgrReviewManualDate]
           ,[MgrReviewAutoDate]
           ,[MgrNotes]
           ,[isCSRAcknowledged]
           ,[CSRReviewAutoDate]
           ,[CSRComments]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[isCoachingRequired]
           ,[strReasonNotCoachable]
           ,[txtReasonNotCoachable]
           ,[VerintFormName]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           ,[Review_SupID]
           ,[Review_MgrID]
           ,[Behavior]
           ,[SurveySent]
           ,[NotificationDate]
           ,[ReminderSent]
           ,[ReminderDate]
           ,[ReminderCount]
           ,[ReassignDate]
           ,[ReassignCount]
           ,[ReassignedToID]
           ,[isCoachingMonitor] 
           ,[ArchivedBy]
           ,[ArchivedDate])
     SELECT [CoachingID]
      ,[FormName]
      ,[ProgramName]
      ,[SourceID]
      ,[StatusID]
      ,[SiteID]
      ,[EmpID]
      ,[SubmitterID]
      ,[EventDate]
      ,[CoachingDate]
      ,[isAvokeID]
      ,[AvokeID]
      ,[isNGDActivityID]
      ,[NGDActivityID]
      ,[isUCID]
      ,[UCID]
      ,[isVerintID]
      ,[VerintID]
      ,[VerintEvalID]
      ,[Description]
      ,[CoachingNotes]
      ,[isVerified]
      ,[SubmittedDate]
      ,[StartDate]
      ,[SupReviewedAutoDate]
      ,[isCSE]
      ,[MgrReviewManualDate]
      ,[MgrReviewAutoDate]
      ,[MgrNotes]
      ,[isCSRAcknowledged]
      ,[CSRReviewAutoDate]
      ,[CSRComments]
      ,[EmailSent]
      ,[numReportID]
      ,[strReportCode]
      ,[isCoachingRequired]
      ,[strReasonNotCoachable]
      ,[txtReasonNotCoachable]
      ,[VerintFormName]
      ,[ModuleID]
      ,[SupID]
      ,[MgrID]
      ,[Review_SupID]
      ,[Review_MgrID]
      ,[Behavior]
      ,[SurveySent]
      ,[NotificationDate]
      ,[ReminderSent]
      ,[ReminderDate]
      ,[ReminderCount]
      ,[ReassignDate]
      ,[ReassignCount]
      ,[ReassignedToID]
      ,[isCoachingMonitor] 
      ,@strArchivedBy
      ,GetDate()
  FROM [EC].[Coaching_Log] CL
  WHERE CL.StatusID = 2
  and CL.[SubmittedDate] < dateadd(year,-1,getdate())
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms



-- Archive coaching log reasons for coaching logs older than 1 year

BEGIN
INSERT INTO [EC].[Coaching_Log_Reason_Archive]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value]
           ,[ArchivedBy]
           ,[ArchivedDate])
    SELECT CLR.[CoachingID]
      ,[CoachingReasonID]
      ,[SubCoachingReasonID]
      ,ISNULL([Value],'')
      ,@strArchivedBy
      ,GETDATE()
  FROM [EC].[Coaching_Log_Reason]CLR JOIN [EC].[Coaching_Log] CL
  ON CLR.CoachingID = CL.CoachingID
    WHERE CL.StatusID = 2
  and CL.[SubmittedDate] < dateadd(year,-1,getdate())
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

-- Delete archived coaching log reason records

BEGIN
	DELETE CLR
	FROM [EC].[Coaching_Log_Reason]CLR JOIN [EC].[Coaching_Log_Reason_Archive]CLRA 
    ON CLR.[CoachingID] = CLRA.[CoachingID] JOIN [EC].[Coaching_Log] CL
    ON CLR.[CoachingID] = CL.[CoachingID]
   WHERE CL.StatusID = 2
  and CL.[SubmittedDate] < dateadd(year,-1,getdate())
	
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms



-- Delete archived coaching log records

BEGIN
	DELETE CL
	FROM [EC].[Coaching_Log] CL JOIN [EC].[Coaching_Log_Archive]CLA
	ON CL.[CoachingID] = CLA.[CoachingID]
  WHERE CL.StatusID = 2
  and CL.[SubmittedDate] < dateadd(year,-1,getdate())
OPTION (MAXDOP 1)
END


COMMIT TRANSACTION
END TRY

  BEGIN CATCH
  ROLLBACK TRANSACTION
  END CATCH

END  -- [EC].[sp_Insert_Into_Coaching_Log_Archive]



GO

/*
sp_Populate_Employee_Hierarchy(05).sql
Last Modified Date: 11/17/2017
Last Modified By: Susmitha Palacherla

Version 05:  Updated to support Encryption of sensitive data - TFS 7856 - 11/17/2017

Version 04:  Updated to add two new columns from People Soft feed - TFS 8974  - 11/10/2017

Version 03: Updated to populate preferred name and Hire date attributes. TFS 8228 - 09/21/2017

Version 02: Change how email addresses with apostrophes are stored - TFS 6614 - 5/17/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Populate_Employee_Hierarchy' 
)
   DROP PROCEDURE [EC].[sp_Populate_Employee_Hierarchy]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date: 07/25/2013
-- Description:	Performs the following actions.
-- Updates existing records and Inserts New records from the Staging table.
-- Last Modified By: Susmitha Palacherla
-- updated during TFS 1710 to populate SrLvlMgr IDs - 2/18/2016
-- updated during TFS 6614 to Change how email addresses with apostrophes are stored - 05/16/2017
-- Updated to populate preferred name and Hire date attributes. TFS 8228 - 09/21/2017
-- Updated to add two new columns from People Soft feed - TFS 8974  - 11/10/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/17/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Populate_Employee_Hierarchy] 
AS
BEGIN

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

 --Assigns End_Date to Inactive Records with status change in feed
 
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [END_DATE] = CONVERT(nvarchar(10),getdate(),112)
	FROM [EC].[Employee_Hierarchy_Stage] S JOIN [EC].[Employee_Hierarchy]H
	ON H.Emp_ID = S.Emp_ID
	AND S.Active in ('T', 'D')
	AND H.END_DATE= '99991231'
OPTION (MAXDOP 1)
END


-- Assigns End_Date to Inactive Records that stop arriving in feed
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [END_DATE] = CONVERT(nvarchar(10),getdate(),112)
	,[Active] = 'T'
	 WHERE END_DATE = '99991231' AND Active = 'A'
	 AND Emp_ID <> '999999'
	 AND EMP_ID NOT IN
	(SELECT Emp_ID FROM [EC].[Employee_Hierarchy_Stage])

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

-- Assigns Open Ended End_Date for Rehire records
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [Active]= S.Active
	,[Start_Date] = S.Start_Date
	,[END_DATE] = '99991231'
	FROM [EC].[Employee_Hierarchy_Stage] S JOIN [EC].[Employee_Hierarchy]H
	ON H.Emp_ID = S.Emp_ID
	AND S.Active not in ('T', 'D')
	AND H.END_DATE  <> '99991231'
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

-- Updates Existing Records
BEGIN
	UPDATE [EC].[Employee_Hierarchy]
	   SET [Emp_Name] = EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Emp_Name],'''', ''))
	      ,[Emp_Email] = EncryptByKey(Key_GUID('CoachingKey'), S.[Emp_Email])
		  ,[Emp_LanID] = EncryptByKey(Key_GUID('CoachingKey'), S.Emp_LanID)
		  ,[Emp_Site] =  [EC].[fn_strSiteNameFromSiteLocation](S.Emp_Site)
		  ,[Emp_Job_Code] = S.Emp_Job_Code
		  ,[Emp_Job_Description] = S.Emp_Job_Description
		  ,[Emp_Program] = S.Emp_Program
		  ,[Sup_ID] = S.Sup_EMP_ID
		  ,[Sup_Name] = EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Sup_Name],'''', ''))
		  ,[Sup_Email] = EncryptByKey(Key_GUID('CoachingKey'), S.[Sup_Email])
		  ,[Sup_LanID] = EncryptByKey(Key_GUID('CoachingKey'), S.Sup_LanID)
		  ,[Sup_Job_Code] = S.Sup_Job_Code 
		  ,[Sup_Job_Description] = S.Sup_Job_Description
		  ,[Mgr_ID] = S.Mgr_EMP_ID 
		  ,[Mgr_Name] = EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Mgr_Name],'''', ''))
		  ,[Mgr_Email] = EncryptByKey(Key_GUID('CoachingKey'), S.[Mgr_Email])
		  ,[Mgr_LanID] = EncryptByKey(Key_GUID('CoachingKey'), S.Mgr_LanID)
		  ,[Mgr_Job_Code] = S.Mgr_Job_Code 
		  ,[Mgr_Job_Description] = S.Mgr_Job_Description
		  ,[Start_Date] = CONVERT(nvarchar(8),S.[Start_Date],112)
		  ,[Active] = S.Active
		  ,[Emp_Pri_Name] = EncryptByKey(Key_GUID('CoachingKey'), S.Emp_Pri_Name)
		  ,Dept_ID = S.Dept_ID
		  ,Dept_Description = S.Dept_Description
		  ,Reg_Temp = S.Reg_Temp
		  ,Full_Part_Time = S.Full_Part_Time
		  ,Term_Date = CONVERT(nvarchar(8),S.[Term_Date],112)
		  ,FLSA_Status = S.FLSA_Status
	 FROM [EC].[Employee_Hierarchy]H JOIN [EC].[Employee_Hierarchy_Stage]S
	 ON H.[Emp_ID] = S.[EMP_ID]
	 WHERE H.[Emp_ID] is NOT NULL
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Inserts New Records
BEGIN
	INSERT INTO [EC].[Employee_Hierarchy]
			  ([Emp_ID]
			   ,[Emp_Name]
			   ,[Emp_Email]
			   ,[Emp_LanID]
			   ,[Emp_Site]
			   ,[Emp_Job_Code]
			   ,[Emp_Job_Description]
			   ,[Emp_program]
			   ,[Sup_ID]
			   ,[Sup_Name]
			   ,[Sup_Email]
			   ,[Sup_LanID]
			   ,[Sup_Job_Code]
			   ,[Sup_Job_Description]
			   ,[Mgr_ID]
			   ,[Mgr_Name]
			   ,[Mgr_Email]
			   ,[Mgr_LanID]
			   ,[Mgr_Job_Code]
			   ,[Mgr_Job_Description]
			   ,[Start_Date]
			   ,[Active]
			   ,[Emp_ID_Prefix]
			   ,[Hire_Date]
			   ,[Emp_Pri_Name]
		       ,[Dept_ID]
		       ,[Dept_Description]
		       ,[Reg_Temp]
			   ,[Full_Part_Time]
			   ,[Term_Date]
			   ,[FLSA_Status]
			  )
							 SELECT S.[Emp_ID]
						      ,EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Emp_Name],'''', ''))
                              ,EncryptByKey(Key_GUID('CoachingKey'), S.[Emp_Email])
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.Emp_LanID)
							  ,[EC].[fn_strSiteNameFromSiteLocation](S.[Emp_Site])
							  ,S.[Emp_Job_Code]
							  ,S.[Emp_Job_Description]
							  ,S.[Emp_Program]
							  ,S.[Sup_Emp_ID]
							  ,EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Sup_Name],'''', ''))
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.[Sup_Email])
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.Sup_LanID)
							  ,S.[Sup_Job_Code]
							  ,S.[Sup_Job_Description]
							  ,S.[Mgr_Emp_ID]
							  ,EncryptByKey(Key_GUID('CoachingKey'), Replace(S.[Mgr_Name],'''', ''))
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.[Mgr_Email])
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.Mgr_LanID)
							  ,S.[Mgr_Job_Code]
							  ,S.[Mgr_Job_Description]
							  ,CONVERT(nvarchar(8),S.[Start_Date],112)
							  ,S.[Active]
							  ,S.[Emp_ID_Prefix]
							  ,CONVERT(nvarchar(8),S.[Hire_Date],112)
							  ,EncryptByKey(Key_GUID('CoachingKey'), S.Emp_Pri_Name)
							  ,S.[Dept_ID]
							  ,S.[Dept_Description]
							  ,S.[Reg_Temp]
							  ,S.[Full_Part_Time]
							  ,CONVERT(nvarchar(8),S.[Term_Date],112)
			                  ,S.[FLSA_Status]
						  FROM [EC].[Employee_Hierarchy_Stage]S Left outer Join [EC].[Employee_Hierarchy]H
						  ON S.Emp_ID = H.Emp_ID
						  WHERE (H.EMP_ID IS NULL and S.Emp_ID <> '')

OPTION (MAXDOP 1)
END

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	 

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Populate SrMgr IDs
BEGIN
              UPDATE [EC].[Employee_Hierarchy]
              SET [SrMgrLvl1_ID]=	[EC].[fn_strSrMgrLvl1EmpIDFromEmpID]([H].[Emp_ID])		  
				 ,[SrMgrLvl2_ID]=	[EC].[fn_strSrMgrLvl2EmpIDFromEmpID]([H].[Emp_ID])	
	             ,[SrMgrLvl3_ID]=	[EC].[fn_strSrMgrLvl3EmpIDFromEmpID]([H].[Emp_ID])
	FROM [EC].[Employee_Hierarchy]H

     OPTION (MAXDOP 1)
     END

END --sp_Populate_Employee_Hierarchy



GO



/*
sp_rptAdminActivitySummary(02).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla


Version 02: Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
Version 01: Document Initial Revision - Suzy Palacherla -  TFS 5621 - 04/11/2017

*/



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptAdminActivitySummary' 
)
   DROP PROCEDURE [EC].[sp_rptAdminActivitySummary]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	3/27/2017
--	Description: Displays the Admin Activity Logs for selected Type, Action and Date Range.
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - TFS 5621 - 4/10/2017
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptAdminActivitySummary] 
(
@strTypein nvarchar(10),
@strActivityin nvarchar(20),
@strFormin nvarchar(50),
@strSDatein datetime,
@strEDatein datetime,

 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***



SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10)

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)


-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  

-- Create a temp table to hold all Coaching admin activity logs for selected period

CREATE TABLE #CoachingAdminActivity ([Module Id] int, [Module Name] nvarchar(20),[Form Name] nvarchar(50), [Last Known Status]nvarchar(100),
[Action] nvarchar(20), [Action Date] datetime, [Requester ID] nvarchar(20), [Requester Name] nvarchar(50), [Assigned To ID] nvarchar(20),
[Assigned To Name] nvarchar(50), [Reason] nvarchar(250), [Requester Comments] nvarchar(4000) )

IF @strTypein in ('Coaching', 'All')

BEGIN

-- Insert logs from Coaching inactivation reactivation audit table

INSERT INTO #CoachingAdminActivity 
([Module Id],[Module Name], [Form Name], [Last Known Status],
[Action], [Action Date], [Requester ID], [Requester Name], [Assigned To ID],
[Assigned To Name], [Reason], [Requester Comments])
(
SELECT cl.ModuleID AS [Module ID], dm.Module AS [Module Name], cira.FormName AS [Form Name],
ds.Status AS [Last Known status], cira.Action AS [Action], cira.ActionTimestamp AS [action Date],
cira.RequesterID AS [Requester ID], 
CASE WHEN cira.RequesterID = '999998' 
THEN 'Hierarchy Load Process'
ELSE CONVERT(nvarchar(50),DecryptByKey(rh.Emp_Name)) END AS [Requester Name], 'NA' AS [Assigned To ID], 'NA' AS [Assigned To Name],
cira.Reason AS [Reason], ISNULL(cira.RequesterComments,'-') AS [Requester Comments]
FROM [EC].[AT_Coaching_Inactivate_Reactivate_Audit]cira JOIN [EC].[Coaching_Log]cl
  ON cira.CoachingID = cl.CoachingID JOIN [EC].[DIM_Module] dm
  ON cl.ModuleID = dm.ModuleID JOIN [EC].[DIM_Status]ds
  ON cira.LastKnownStatus = ds.StatusID LEFT OUTER JOIN [EC].[Employee_Hierarchy]rh
  ON cira.RequesterID = rh.Emp_ID
WHERE convert(varchar(8),cira.ActionTimestamp,112) >= @strSDate
AND convert(varchar(8),cira.ActionTimestamp,112) <= @strEDate

UNION

-- Insert logs from Coaching reassign audit table

SELECT cl.ModuleID AS [Module ID], dm.Module AS [Module Name], cra.FormName AS [Form Name],
ds.Status AS [Last Known status], 'Reassign' AS [Action], cra.ActionTimestamp AS [action Date],
cra.RequesterID AS [Requester ID],
CASE WHEN cra.RequesterID = '999998' 
THEN 'Hierarchy Load Process'
ELSE CONVERT(nvarchar(50),DecryptByKey(rh.Emp_Name)) END AS [Requester Name], cra.AssignedToID AS [Assigned To ID],
CONVERT(nvarchar(50),DecryptByKey(ah.Emp_Name)) AS [Assigned To Name],cra.Reason AS [Reason], ISNULL(cra.RequesterComments,'-') AS [Requester Comments]
FROM [EC].[AT_Coaching_Reassign_Audit]cra JOIN [EC].[Coaching_Log]cl
  ON cra.CoachingID = cl.CoachingID JOIN [EC].[DIM_Module] dm
  ON cl.ModuleID = dm.ModuleID JOIN [EC].[DIM_Status]ds
  ON cra.LastKnownStatus = ds.StatusID LEFT OUTER JOIN [EC].[Employee_Hierarchy]rh
  ON cra.RequesterID = rh.Emp_ID LEFT OUTER JOIN [EC].[Employee_Hierarchy]ah
  ON cra.AssignedToID = ah.Emp_ID
WHERE convert(varchar(8),cra.ActionTimestamp,112) >= @strSDate
AND convert(varchar(8),cra.ActionTimestamp,112) <= @strEDate
)

END

-- Create a temp table to hold all Warning admin activity logs for selected period


CREATE TABLE #WarningAdminActivity ([Module Id] int, [Module Name] nvarchar(20),[Form Name] nvarchar(50), [Last Known Status]nvarchar(100),
[Action] nvarchar(20), [Action Date] datetime, [Requester ID] nvarchar(20), [Requester Name] nvarchar(50), [Assigned To ID] nvarchar(20),
[Assigned To Name] nvarchar(50), [Reason] nvarchar(250), [Requester Comments] nvarchar(4000) )

IF @strTypein in ('Warning', 'All')

BEGIN

-- Insert logs from warning Inactivation Reactivation audit table

INSERT INTO #WarningAdminActivity 
([Module Id],[Module Name], [Form Name], [Last Known Status],
[Action], [Action Date], [Requester ID], [Requester Name], [Assigned To ID],
[Assigned To Name], [Reason], [Requester Comments])
(
SELECT wl.ModuleID AS [Module ID], dm.Module AS [Module Name], wira.FormName AS [Form Name],
ds.Status AS [Last Known status], wira.Action AS [Action], wira.ActionTimestamp AS [action Date],
wira.RequesterID AS [Requester ID], 
CASE WHEN wira.RequesterID = '999998' 
THEN 'Hierarchy Load Process'
ELSE CONVERT(nvarchar(50),DecryptByKey(rh.Emp_Name)) END AS [Requester Name], 'NA' AS [Assigned To ID], 'NA' AS [Assigned To Name],
wira.Reason AS [Reason], ISNULL(wira.RequesterComments,'-') AS [Requester Comments]
FROM [EC].[AT_Warning_Inactivate_Reactivate_Audit]wira JOIN [EC].[Warning_Log]wl
  ON wira.WarningID = wl.WarningID JOIN [EC].[DIM_Module] dm
  ON wl.ModuleID = dm.ModuleID JOIN [EC].[DIM_Status]ds
  ON wira.LastKnownStatus = ds.StatusID LEFT OUTER JOIN [EC].[Employee_Hierarchy]rh
  ON wira.RequesterID = rh.Emp_ID
WHERE convert(varchar(8),wira.ActionTimestamp,112) >= @strSDate
AND convert(varchar(8),wira.ActionTimestamp,112) <= @strEDate
)
END

-- Display all selected coaching audit logs

IF @strTypein = 'Coaching'

SELECT * FROM #CoachingAdminActivity 
WHERE ([Form Name] =(@strFormin) or @strFormin = 'All') 
AND ([Action] =(@strActivityin) or @strActivityin = 'All') 
ORDER BY [Action Date]

-- Display all selected warning audit logs

IF @strTypein = 'Warning'

SELECT * FROM #WarningAdminActivity 
WHERE ([Form Name] =(@strFormin) or @strFormin = 'All') 
AND ([Action] =(@strActivityin) or @strActivityin = 'All') 
ORDER BY [Action Date]

-- Display all selected coaching and warning audit logs

IF @strTypein = 'All'

SELECT s.* FROM
(SELECT * FROM #CoachingAdminActivity 
UNION
SELECT * FROM #WarningAdminActivity 
)s
WHERE ([Form Name] =(@strFormin) or @strFormin = 'All') 
AND ([Action] =(@strActivityin) or @strActivityin = 'All') 
ORDER BY [Action Date]

  -- Drop the temp tables
  
  DROP TABLE #CoachingAdminActivity 
  DROP TABLE #WarningAdminActivity 

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------


GO



/*
sp_rptCoachingEmployeesBySiteAndModule(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptCoachingEmployeesBySiteAndModule' 
)
   DROP PROCEDURE [EC].[sp_rptCoachingEmployeesBySiteAndModule]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	01/19/2018
--	Description: Selects list of Employees having Coaching logs for selected site and module combination
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - Encryption of sensitive data.TFS 7856 - 01/19/2018
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptCoachingEmployeesBySiteAndModule] 
(
@intModulein INT= NULL,
@intSitein INT = NULL,
 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET NOCOUNT ON



-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 

	

SELECT s.EmpID, s.EmpName
FROM (Select '-1' as EmpID, 'All' as EmpName
UNION
SELECT DISTINCT CL.EmpID EmpID, CONVERT(nvarchar(70),DecryptByKey(Emp_Name)) AS EmpName 
FROM  EC.Coaching_Log AS cl JOIN  EC.Employee_Hierarchy eh
ON cl.EmpID = eh.Emp_ID
WHERE  (cl.ModuleID =(@intModulein) or @intModulein = -1) 
and  (cl.SiteID =(@intSitein) or @intSitein = -1) 
)as S
ORDER BY CASE WHEN EmpID = '-1' THEN 0 ELSE 1 END, EmpName


 
  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------



GO



/*
sp_rptCoachingSummary(06).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla

Version 06:  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 05: Updated during 2012 upgrade to add distinct clause - TFS 7106 - 08/16/2017

Version 04: Updated Joins to use left join - Suzy -  TFS 5621 - 04/19/2017

Version 03: Updated formatting - Suzy -  TFS 5621 - 03/17/2017

Version 02: Updated parameters - Suzy -  TFS 5621 - 03/14/2017

Version 01: Document Initial Revision - Lili -  TFS 5621 - 03/09/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptCoachingSummary' 
)
   DROP PROCEDURE [EC].[sp_rptCoachingSummary]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	3/14/2017
--	Description: Selects list of Coaching Log Attributes for Coaching Summary Report.
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - TFS 5621 -  03/14/2017 (Modified 04/19/2017)
--  Updated during 2012 upgrade to add distinct clause - TFS 7106 - 08/16/2017
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/

CREATE PROCEDURE [EC].[sp_rptCoachingSummary] 
(
@intModulein int = -1,
@intStatusin int = -1, 
@intSitein int = -1,
@strEmpin nvarchar(10)= '-1',
@intCoachReasonin int = -1,
@intSubCoachReasonin int = -1,
@strSDatein datetime,
@strEDatein datetime,
 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***

SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10)

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  

  SELECT DISTINCT p.ModuleID AS [Module ID]
              ,c.Module AS [Module Name]
              ,p.CoachingID AS [Coaching ID]
			  ,p.FormName AS [Form Name]
			  ,c.Status
			  ,p.EmpID AS [Employee ID]
    	      ,CONVERT(nvarchar(50),DecryptByKey(c.EmpName)) AS [Employee Name]
    	      ,c.Site
    	      ,ISNULL(c.LogSupID,'-') AS [Supervisor Employee ID]
			  ,CASE WHEN c.LogSupID IS NULL THEN '-'
			   ELSE CONVERT(nvarchar(50),DecryptByKey(c.LogSupName)) END AS [Supervisor Name]
			  ,ISNULL(c.LogMgrID,'-') AS [Manager Employee ID]
			  ,CASE WHEN c.LogMgrID IS NULL THEN '-'
			   ELSE CONVERT(nvarchar(50),DecryptByKey(c.LogMgrName))  END AS [Manager Name]
			  ,ISNULL(c.HierarchySupID,'-') AS [Current Supervisor Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey( c.HierarchySupName)),'-')  AS [Current Supervisor Name]
			  ,ISNULL(c.HierarchyMgrID,'-') AS [Current Manager Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(c.HierarchyMgrName)),'-')  AS [Current Manager Name]
		      ,ISNULL(c.ReviewSupID,'-')AS [Review Supervisor Employee ID]
	          ,CASE 
	           WHEN c.ReviewSupID IS NULL THEN '-' 
	           ELSE CONVERT(nvarchar(50),DecryptByKey(c.ReviewSupName)) END AS [Review Supervisor Name]
	          ,ISNULL(c.ReviewMgrID,'-')AS [Review Manager Employee ID]
		      ,CASE 
		       WHEN c.ReviewMgrID IS NULL  THEN '-'
		       ELSE CONVERT(nvarchar(50),DecryptByKey(c.ReviewMgrName)) END AS [Review Manager Name]
		       ,LTRIM(RTRIM(REPLACE(p.Description, '<br />', ''))) AS [Description]
              ,COALESCE(p.CoachingNotes,'-') AS [Coaching Notes]    
              ,ISNULL(CONVERT(varchar,p.EventDate,121),'-') AS [Event Date]
              ,ISNULL(CONVERT(varchar,p.CoachingDate,121),'-') AS [Coaching Date]
              ,ISNULL(CONVERT(varchar,p.SubmittedDate,121),'-') AS [Submitted Date]
		      ,c.Source AS [Coaching Source]
		      ,c.SubSource AS [Sub Coaching Source]
		      ,[EC].[fn_strCoachingReasonFromCoachingID](c.CoachingID) AS [Coaching Reason]
	          ,[EC].[fn_strSubCoachingReasonFromCoachingID](c.CoachingID)AS [SubCoaching Reason]
	          ,[EC].[fn_strValueFromCoachingID](c.CoachingID)AS [Value]
		      ,c.SubmitterID AS [Submitter ID]
		      ,CONVERT(nvarchar(50),DecryptByKey(c.SubmitterName)) AS [Submitter Name]
		      ,ISNULL(CONVERT(varchar,p.SupReviewedAutoDate,121),'-') AS [Supervisor Reviewed Date]
              ,ISNULL(CONVERT(varchar,p.MgrReviewManualDate,121),'-') AS [Manager Reviewed Manual Date]
			  ,ISNULL(CONVERT(varchar,p.MgrReviewAutoDate,121),'-') AS [Manager Reviewed Auto Date]
              ,COALESCE(p.MgrNotes,'-') AS [Manager Notes]
              ,ISNULL(CONVERT(varchar,p.CSRReviewAutoDate,121),'-') AS [Employee Reviewed Date]
              ,COALESCE(p.CSRComments,'-') AS [Employee Comments]
              ,ISNULL(p.ProgramName ,'-') AS [ProgramName]
              ,ISNULL(p.Behavior,'-')AS [Behavior]
              ,ISNULL(p.strReportCode,'-') AS [Report Code]
              ,ISNULL(p.VerintID,'-') AS [Verint ID]
              ,ISNULL(p.VerintFormName,'-') AS [Verint Form Name]
              ,ISNULL(p.isCoachingMonitor,'-') AS [Coaching Monitor]
      FROM [EC].[Coaching_Log] p WITH(NOLOCK)
      JOIN  (SELECT distinct [cl].[ModuleID] ModuleID
              ,[mo].[Module]Module
              ,[cl].[CoachingID] CoachingID
			  ,[cl].[FormName]	FormName
			  ,[s].[Status]	Status
			  ,[cl].[EmpID]	EmpID
    	      ,[eh].[Emp_Name]	EmpName
    	      ,[si].[City]	Site
    	      ,[cl].[SupID]	LogSupID
			  ,[suph].[Emp_Name]	LogSupName
			  ,[cl].[MgrID]	LogMgrID
			  ,[mgrh].[Emp_Name]	LogMgrName
			  ,[eh].[Sup_ID]	HierarchySupID
			  ,[eh].[Sup_Name]	HierarchySupName
			  ,[eh].[Mgr_ID]	HierarchyMgrID
			  ,[eh].[Mgr_Name]	HierarchyMgrName
		      ,[cl].[Review_SupID]	ReviewSupID
	          ,[rsuph].[Emp_Name]	ReviewSupName
	          ,[cl].[Review_MgrID]	ReviewMgrID
		      ,[rmgrh].[Emp_Name]	ReviewMgrName
		      ,[so].[CoachingSource] Source
		      ,[so].[SubCoachingSource]	SubSource
		      ,[dcr].[CoachingReason]CoachingReason
		      ,[dscr].[SubCoachingReason]SubCoachingReason
		      ,[clr].[Value]Value
		      ,[cl].[SubmitterID]	SubmitterID
		      ,[sh].[Emp_Name]	SubmitterName
		FROM [EC].[Coaching_Log] cl WITH(NOLOCK)JOIN [EC].[DIM_Status] s 
		ON cl.StatusID = s.StatusID JOIN [EC].[DIM_Source] so 
		ON cl.SourceID = so.SourceID JOIN [EC].[DIM_Module] mo
		ON cl.ModuleID = mo.ModuleID JOIN [EC].[DIM_Site] si 
		ON cl.SiteID = si.SiteID JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK)
		ON cl.CoachingID = clr.CoachingID JOIN [EC].[DIM_Coaching_Reason]dcr 
		ON dcr.CoachingReasonID = clr.CoachingReasonID JOIN [EC].[DIM_Sub_Coaching_Reason]dscr
		ON dscr.SubCoachingReasonID = clr.SubCoachingReasonID JOIN [EC].[Employee_Hierarchy] eh 
		ON cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy] sh
		ON cl.SubmitterID = sh.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] suph
		ON cl.SupID = suph.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] mgrh 
		ON cl.MgrID = mgrh.EMP_ID  LEFT JOIN [EC].[Employee_Hierarchy] rsuph
		ON cl.Review_SupID = rsuph.EMP_ID  LEFT JOIN [EC].[Employee_Hierarchy] rmgrh
		ON cl.Review_MgrID = rmgrh.EMP_ID 
		WHERE convert(varchar(8),[cl].[SubmittedDate],112) >= @strSDate
	    AND convert(varchar(8),[cl].[SubmittedDate],112) <= @strEDate
		AND [cl].[StatusID] <> 2
  	    AND  (([cl].[ModuleID] =(@intModulein) or @intModulein = -1) 
		AND  ([cl].[StatusID] =(@intStatusin) or @intStatusin = -1) 
		AND  ([cl].[SiteID] =(@intSitein) or @intSitein = -1) 
        AND  ([clr].[CoachingReasonID] = (@intCoachReasonin) or @intCoachReasonin = -1) 
        AND  ([clr].[SubCoachingReasonID] = (@intSubCoachReasonin)or @intSubCoachReasonin = -1)
        AND ([cl].[EmpID]= (@strEmpin)or @strEmpin = '-1'))
            GROUP BY [cl].[ModuleID],[mo].[Module],[cl].[CoachingID],[cl].[FormName],[s].[Status]	
			  ,[cl].[EmpID],[eh].[Emp_Name],[si].[City],[cl].[SupID],[suph].[Emp_Name],[cl].[MgrID]	
			  ,[mgrh].[Emp_Name],[eh].[Sup_ID],[eh].[Sup_Name] ,[eh].[Mgr_ID],[eh].[Mgr_Name]	
		      ,[cl].[Review_SupID],[rsuph].[Emp_Name],[cl].[Review_MgrID],[rmgrh].[Emp_Name]	
		      ,[so].[CoachingSource],[so].[SubCoachingSource],[dcr].[CoachingReason]
		      ,[dscr].[SubCoachingReason],[clr].[Value],[cl].[SubmitterID],[sh].[Emp_Name])c
		ON p.CoachingID = c.CoachingID
        ORDER BY [Submitted Date] DESC

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
  
  	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------

GO



/*
sp_rptCoachingSummaryForModule(02).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla


Version 02:  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
Version 01: Document Initial Revision - TFS 6066 - 10/06/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptCoachingSummaryForModule' 
)
   DROP PROCEDURE [EC].[sp_rptCoachingSummaryForModule]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




/******************************************************************************* 
--	Author:			Susmitha Palacherla
-- Create date:       10/5/2017
-- Description:	
--  Given a Module and Begin and End Dates 
--  Selects list of Coaching Log Attributes for Coaching Summary Report.
-- Revision History
-- Initial Revision. Created during summary report scheduling. TFS 6066 - 10/05/2017
-- Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptCoachingSummaryForModule] 
(
@intModulein int = -1,
@intBeginDate int = NULL,  -- YYYYMMDD
@intEndDate int = NULL,     -- YYYYMMDD
 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int = NULL OUTPUT ,
   @returnMessage varchar(80) = NULL OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***

SET NOCOUNT ON

-- Uncomment below lines for Testing 
--SET @intBeginDate = 20170901  -- YYYYMMDD
--SET @intEndDate = 20170930     -- YYYYMMDD

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  

  SELECT DISTINCT p.ModuleID AS [Module ID]
              ,c.Module AS [Module Name]
              ,p.CoachingID AS [Coaching ID]
			  ,p.FormName AS [Form Name]
			  ,c.Status
			  ,p.EmpID AS [Employee ID]
    	      ,CONVERT(nvarchar(50),DecryptByKey(c.EmpName)) AS [Employee Name]
    	      ,c.Site
    	      ,ISNULL(c.LogSupID,'-') AS [Supervisor Employee ID]
			  ,CASE WHEN c.LogSupID IS NULL THEN '-'
			    ELSE CONVERT(nvarchar(50),DecryptByKey(c.LogSupName)) END AS [Supervisor Name]
			  ,ISNULL(c.LogMgrID,'-') AS [Manager Employee ID]
			  ,CASE WHEN c.LogMgrID IS NULL THEN '-'
			     ELSE CONVERT(nvarchar(50),DecryptByKey(c.LogMgrName))  END AS [Manager Name]
			  ,ISNULL(c.HierarchySupID,'-') AS [Current Supervisor Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey( c.HierarchySupName)),'-')  AS [Current Supervisor Name]
			  ,ISNULL(c.HierarchyMgrID,'-') AS [Current Manager Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(c.HierarchyMgrName)),'-')  AS [Current Manager Name]
		      ,ISNULL(c.ReviewSupID,'-')AS [Review Supervisor Employee ID]
	          ,CASE 
	           WHEN c.ReviewSupID IS NULL THEN '-' 
	          ELSE CONVERT(nvarchar(50),DecryptByKey(c.ReviewSupName)) END AS [Review Supervisor Name]
	          ,ISNULL(c.ReviewMgrID,'-')AS [Review Manager Employee ID]
		      ,CASE 
		       WHEN c.ReviewMgrID IS NULL  THEN '-'
		         ELSE CONVERT(nvarchar(50),DecryptByKey(c.ReviewMgrName)) END AS [Review Manager Name]
		       ,LTRIM(RTRIM(REPLACE(lEFT(p.Description,4000), '<br />', ''))) AS [Description]
              ,COALESCE(p.CoachingNotes,'-') AS [Coaching Notes]    
              ,ISNULL(CONVERT(varchar,p.EventDate,121),'-') AS [Event Date]
              ,ISNULL(CONVERT(varchar,p.CoachingDate,121),'-') AS [Coaching Date]
              ,ISNULL(CONVERT(varchar,p.SubmittedDate,121),'-') AS [Submitted Date]
			    --,p.EventDate AS [Event Date]
       --       ,p.CoachingDate AS [Coaching Date]
       --       ,p.SubmittedDate AS [Submitted Date]
		      ,c.Source AS [Coaching Source]
		      ,c.SubSource AS [Sub Coaching Source]
		      ,[EC].[fn_strCoachingReasonFromCoachingID](c.CoachingID) AS [Coaching Reason]
	          ,[EC].[fn_strSubCoachingReasonFromCoachingID](c.CoachingID)AS [SubCoaching Reason]
	          ,[EC].[fn_strValueFromCoachingID](c.CoachingID)AS [Value]
		      ,c.SubmitterID AS [Submitter ID]
		        ,CONVERT(nvarchar(50),DecryptByKey(c.SubmitterName)) AS [Submitter Name]
		     ,ISNULL(CONVERT(varchar,p.SupReviewedAutoDate,121),'-') AS [Supervisor Reviewed Date]
              ,ISNULL(CONVERT(varchar,p.MgrReviewManualDate,121),'-') AS [Manager Reviewed Manual Date]
			  ,ISNULL(CONVERT(varchar,p.MgrReviewAutoDate,121),'-') AS [Manager Reviewed Auto Date]
              ,COALESCE(p.MgrNotes,'-') AS [Manager Notes]
              ,ISNULL(CONVERT(varchar,p.CSRReviewAutoDate,121),'-') AS [Employee Reviewed Date]
              ,COALESCE(p.CSRComments,'-') AS [Employee Comments]
              ,ISNULL(p.ProgramName ,'-') AS [ProgramName]
              ,ISNULL(p.Behavior,'-')AS [Behavior]
              ,ISNULL(p.strReportCode,'-') AS [Report Code]
              ,ISNULL(p.VerintID,'-') AS [Verint ID]
              ,ISNULL(p.VerintFormName,'-') AS [Verint Form Name]
              ,ISNULL(p.isCoachingMonitor,'-') AS [Coaching Monitor]
      FROM [EC].[Coaching_Log] p WITH(NOLOCK)
      JOIN  (SELECT distinct [cl].[ModuleID] ModuleID
              ,[mo].[Module]Module
              ,[cl].[CoachingID] CoachingID
			  ,[cl].[FormName]	FormName
			  ,[s].[Status]	Status
			  ,[cl].[EmpID]	EmpID
    	      ,[eh].[Emp_Name]	EmpName
    	      ,[si].[City]	Site
    	      ,[cl].[SupID]	LogSupID
			  ,[suph].[Emp_Name]	LogSupName
			  ,[cl].[MgrID]	LogMgrID
			  ,[mgrh].[Emp_Name]	LogMgrName
			  ,[eh].[Sup_ID]	HierarchySupID
			  ,[eh].[Sup_Name]	HierarchySupName
			  ,[eh].[Mgr_ID]	HierarchyMgrID
			  ,[eh].[Mgr_Name]	HierarchyMgrName
		      ,[cl].[Review_SupID]	ReviewSupID
	          ,[rsuph].[Emp_Name]	ReviewSupName
	          ,[cl].[Review_MgrID]	ReviewMgrID
		      ,[rmgrh].[Emp_Name]	ReviewMgrName
		      ,[so].[CoachingSource] Source
		      ,[so].[SubCoachingSource]	SubSource
		      ,[dcr].[CoachingReason]CoachingReason
		      ,[dscr].[SubCoachingReason]SubCoachingReason
		      ,[clr].[Value]Value
		      ,[cl].[SubmitterID]	SubmitterID
		      ,[sh].[Emp_Name]	SubmitterName
		FROM [EC].[Coaching_Log] cl WITH(NOLOCK)JOIN [EC].[DIM_Status] s 
		ON cl.StatusID = s.StatusID JOIN [EC].[DIM_Source] so 
		ON cl.SourceID = so.SourceID JOIN [EC].[DIM_Module] mo
		ON cl.ModuleID = mo.ModuleID JOIN [EC].[DIM_Site] si 
		ON cl.SiteID = si.SiteID JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK)
		ON cl.CoachingID = clr.CoachingID JOIN [EC].[DIM_Coaching_Reason]dcr 
		ON dcr.CoachingReasonID = clr.CoachingReasonID JOIN [EC].[DIM_Sub_Coaching_Reason]dscr
		ON dscr.SubCoachingReasonID = clr.SubCoachingReasonID JOIN [EC].[Employee_Hierarchy] eh 
		ON cl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy] sh
		ON cl.SubmitterID = sh.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] suph
		ON cl.SupID = suph.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] mgrh 
		ON cl.MgrID = mgrh.EMP_ID  LEFT JOIN [EC].[Employee_Hierarchy] rsuph
		ON cl.Review_SupID = rsuph.EMP_ID  LEFT JOIN [EC].[Employee_Hierarchy] rmgrh
		ON cl.Review_MgrID = rmgrh.EMP_ID 
		WHERE [EC].[fn_intDatetime_to_YYYYMMDD]([cl].[SubmittedDate]) between @intBeginDate and @intEndDate
		AND [cl].[StatusID] <> 2
  	    AND  ([cl].[ModuleID] =(@intModulein) or @intModulein = -1) 
     GROUP BY [cl].[ModuleID],[mo].[Module],[cl].[CoachingID],[cl].[FormName],[s].[Status]	
			  ,[cl].[EmpID],[eh].[Emp_Name],[si].[City],[cl].[SupID],[suph].[Emp_Name],[cl].[MgrID]	
			  ,[mgrh].[Emp_Name],[eh].[Sup_ID],[eh].[Sup_Name] ,[eh].[Mgr_ID],[eh].[Mgr_Name]	
		      ,[cl].[Review_SupID],[rsuph].[Emp_Name],[cl].[Review_MgrID],[rmgrh].[Emp_Name]	
		      ,[so].[CoachingSource],[so].[SubCoachingSource],[dcr].[CoachingReason]
		      ,[dscr].[SubCoachingReason],[clr].[Value],[cl].[SubmitterID],[sh].[Emp_Name])c
		ON p.CoachingID = c.CoachingID
        ORDER BY [Submitted Date] DESC

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
  
  	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------



GO




/*
sp_rptEmployeesBySite(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptEmployeesBySite' 
)
   DROP PROCEDURE [EC].[sp_rptEmployeesBySite]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	01/19/2018
--	Description: Selects list of Employees by site for SSRS Hierarchy Report
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - Encryption of sensitive data.TFS 7856 - 01/19/2018
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptEmployeesBySite] 
(
@strEmpSitein nvarchar(30) = NULL,

 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET NOCOUNT ON



-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 

	

SELECT s.Emp_ID, s.Emp_Name
FROM (SELECT '-1' as Emp_ID, 'All' as Emp_Name
UNION
SELECT DISTINCT eh.Emp_ID EmpID, CONVERT(nvarchar(70),DecryptByKey(eh.Emp_Name)) AS EmpName 
FROM    EC.Employee_Hierarchy eh
WHERE  (eh.emp_site =(@strEmpSitein) or @strEmpSitein= 'All' ))AS s
ORDER BY CASE WHEN Emp_ID = '-1' THEN 0 ELSE 1 END, Emp_Name


 
  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------


GO



/*
sp_rptHierarchySummary(04).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla

Version 04:  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 03: Added Aspect fields and removed Module name - TFS 5621 - 04/10/2017

Version 02: Added Site filter - TFS 5621 - 03/31/2017

Version 01: Document Initial Revision - Suzy Palacherla -  TFS 5621 - 03/29/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptHierarchySummary' 
)
   DROP PROCEDURE [EC].[sp_rptHierarchySummary]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO








/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	3/27/2017
--	Description: Displays the hierarchy for a given employee.
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - TFS 5621 - 03/27/2017 (Modified 04/10/2017)
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptHierarchySummary] 
(
@strEmpSitein nvarchar(20),
@strEmpin nvarchar(10),


 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***

SET NOCOUNT ON

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 


       SELECT  eh.Emp_ID AS [Employee ID]
              ,CONVERT(nvarchar(50),DecryptByKey(eh.Emp_Name)) AS [Employee Name]
              ,ISNULL(eh.Emp_Site,'Unknown') AS [Site]
              ,ISNULL(eh.Emp_Job_Code,'-') AS [Employee Job Code]
              ,ISNULL(eh.Emp_Job_Description,'-') AS [Employee Job Description]
              ,ISNULL(eh.Emp_Program,'NA') AS [Program]
			  ,ISNULL(eh.Sup_ID,'-') AS [Supervisor Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(eh.Sup_Name)),'-')  AS [Supervisor Name]
			  ,ISNULL(eh.Sup_Job_Code,'-') AS [Supervisor Job Code]
              ,ISNULL(eh.Sup_Job_Description, '-') AS [Supervisor Job Description]
			  ,ISNULL(eh.Mgr_ID,'-') AS [Manager Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(eh.Mgr_Name)),'-')  AS [Manager Name]
			  ,ISNULL(eh.Mgr_Job_Code,'-') AS [Manager Job Code]
              ,ISNULL(eh.Mgr_Job_Description, '-') AS [Manager Job Description]
		      ,ISNULL(eh.Start_Date,'-')AS [Start Date]
		      ,ISNULL(eh.End_Date,'-') AS [End Date]
		      ,eh.Active AS [Status]
		      ,ISNULL(ess.Emp_Job_Code, '-') AS [Aspect Job Title]
		      ,ISNULL(ess.Emp_Program, '-') AS [Aspect Skill]
		      ,ISNULL(ess.Emp_Status, '-') AS [Aspect Status]
        FROM [EC].[Employee_Hierarchy] eh LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage]ess
        ON eh.Emp_ID = LTRIM(ess.Emp_ID)
		WHERE ([eh].[Emp_ID]= (@strEmpin)or @strEmpin = '-1')
		       AND ([eh].[Emp_Site] = (@strEmpSitein)or @strEmpSitein = 'All')
        ORDER BY eh.Emp_Name

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------






GO




/*
sp_rptModulesByRole(03).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla

Version 03: Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 02: Additional Update. TFS 5621. Updated parameter name for lanID - 03/23/2017

Version 01: Document Initial Revision - Lili -  TFS 5621 - 03/09/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptModulesByRole' 
)
   DROP PROCEDURE [EC].[sp_rptModulesByRole]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	3/14/2017
--	Description: Selects list of Modules based on Role of logged in User.
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - TFS 5621 - 03/14/2017
--  Updated parameter to @LanID - TFS 5621 - 03/23/2017
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptModulesByRole] 
(
@LanID nvarchar(30)= null,
 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET NOCOUNT ON

DECLARE	

	@nvcEmpID nvarchar(10),
	@intRoleID nvarchar(30),
	@dtmDate datetime

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 

IF @LanID = '211palasu'
BEGIN
SET @LanID = 'susmitha.palacherla'
END	

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@LanID,@dtmDate)


 SELECT DISTINCT ModuleID, CASE WHEN [ModuleID] = -1 THEN 'All' ELSE [Module] END AS Module
               FROM [EC].[DIM_Module]
               WHERE [ModuleId] IN (
   -- To display the 'All' option for SysAdmins only
                
       SELECT  DISTINCT -1 as [ModuleID] 
                     FROM [EC].[AT_Role_Module_Link]
		             WHERE [RoleId] IN (
                            SELECT DISTINCT(ur.[RoleId]) 
                            FROM [EC].[AT_User_Role_Link] ur 
		                    JOIN [EC].[AT_User]u ON u.UserId = ur.UserId 
		                    JOIN [EC].[AT_Role] r ON ur.RoleId = r.RoleId
		                     WHERE u.UserID = @nvcEmpID
		                     AND R.IsSysAdmin=1)
UNION        

-- To display the individual Module list for Role code

					 SELECT DISTINCT([ModuleID]) 
                     FROM [EC].[AT_Role_Module_Link]
		             WHERE [RoleId] IN (
                            SELECT DISTINCT([RoleId]) 
                            FROM [EC].[AT_User_Role_Link] ur 
		                    JOIN [EC].[AT_User]u ON u.UserId = ur.UserId 
		                     WHERE u.UserID = @nvcEmpID))
		                    
  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
GO




/*
sp_rptWarningEmployeesBySiteAndModule(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptWarningEmployeesBySiteAndModule' 
)
   DROP PROCEDURE [EC].[sp_rptWarningEmployeesBySiteAndModule]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	01/19/2018
--	Description: Selects list of Employees having Warning logs for selected site and module combination
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - Encryption of sensitive data.TFS 7856 - 01/19/2018
 *******************************************************************************/
CREATE PROCEDURE [EC].[sp_rptWarningEmployeesBySiteAndModule] 
(
@intModulein INT= NULL,
@intSitein INT = NULL,
 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET NOCOUNT ON



-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 

	

SELECT s.EmpID, s.EmpName
FROM (Select '-1' as EmpID, 'All' as EmpName
UNION
SELECT DISTINCT WL.EmpID EmpID, CONVERT(nvarchar(70),DecryptByKey(Emp_Name)) AS EmpName 
FROM  EC.Warning_Log AS wl JOIN  EC.Employee_Hierarchy eh
ON wl.EmpID = eh.Emp_ID
WHERE  (wl.ModuleID =(@intModulein) or @intModulein = -1) 
and  (wl.SiteID =(@intSitein) or @intSitein = -1) 
)as S
ORDER BY CASE WHEN EmpID = '-1' THEN 0 ELSE 1 END, EmpName


 
  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------



GO



/*
sp_rptWarningSummary(04).sql
Last Modified Date: 11/28/2017
Last Modified By: Susmitha Palacherla

Version 04: Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 03: Updated Joins to use left join - Suzy -  TFS 5621 - 04/19/2017

Version 02: Added State - TFS 5621 - 04/10/2017

Version 01: Document Initial Revision - Suzy Palacherla -  TFS 5621 - 03/27/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_rptWarningSummary' 
)
   DROP PROCEDURE [EC].[sp_rptWarningSummary]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/******************************************************************************* 
--	Author:			Susmitha Palacherla
--	Create Date:	3/27/2017
--	Description: Selects list of Warning Log Attributes for Warning Summary Report.
--  Last Modified: 
--  Last Modified By:
--  Revision History:
--  Initial Revision - TFS 5621 - 03/27/2017 (Modified 04/19/2017)
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
 *******************************************************************************/

CREATE PROCEDURE [EC].[sp_rptWarningSummary] 
(
@intModulein int = -1,
@intStatusin int = -1, 
@intSitein int = -1,
@strEmpin nvarchar(10)= '-1',
@intWarnReasonin int = -1,
@intSubWarnReasonin int = -1,
@strActive nvarchar(3) = '-1',
@strSDatein datetime,
@strEDatein datetime,

 ------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   @returnCode int OUTPUT,
   @returnMessage varchar(80) OUTPUT
)
AS
   DECLARE @storedProcedureName varchar(80)
   DECLARE @transactionCount int

   SET @transactionCount = @@TRANCOUNT
   SET @returnCode = 0

   --Only start a transaction if one has not already been started
   IF @transactionCount = 0
   BEGIN
      BEGIN TRANSACTION currentTransaction
   END
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   SET @storedProcedureName = OBJECT_NAME(@@PROCID)
   SET @returnMessage = @storedProcedureName + ' completed successfully'
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***

SET NOCOUNT ON

DECLARE	
@strSDate nvarchar(10),
@strEDate nvarchar(10)

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)


-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 


  SELECT p.ModuleID AS [Module ID]
              ,w.Module AS [Module Name]
              ,p.WarningID AS [Warning ID]
			  ,p.FormName AS [Form Name]
			  ,w.Status
			  ,p.EmpID AS [Employee ID]
    	      ,CONVERT(nvarchar(50),DecryptByKey(w.EmpName)) AS [Employee Name]
    	      ,w.Site
    	      ,ISNULL(w.LogSupID,'-') AS [Supervisor Employee ID]
			  ,CASE WHEN w.LogSupID IS NULL THEN '-'
			   ELSE CONVERT(nvarchar(50),DecryptByKey(w.LogSupName)) END AS [Supervisor Name]
			  ,ISNULL(w.LogMgrID,'-') AS [Manager Employee ID]
			  ,CASE WHEN w.LogMgrID IS NULL THEN '-'
			   ELSE CONVERT(nvarchar(50),DecryptByKey(w.LogMgrName)) END AS [Manager Name]
			  ,ISNULL(w.HierarchySupID,'-') AS [Current Supervisor Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(w.HierarchySupName)),'-')  AS [Current Supervisor Name]
			  ,ISNULL(w.HierarchyMgrID,'-') AS [Current Manager Employee ID]
			  ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(w.HierarchyMgrName)),'-')  AS [Current Manager Name]
		      ,ISNULL(CONVERT(varchar,w.WarningGivenDate,121),'-') AS [Warning given Date]
              ,ISNULL(CONVERT(varchar,w.SubmittedDate,121),'-') AS [Submitted Date]
              ,ISNULL(CONVERT(varchar,w.WarningExpiryDate,121),'-') AS [Expiration Date]
		      ,w.Source AS [Warning Source]
		      ,w.SubSource AS [Sub Warning Source]
		      ,[EC].[fn_strCoachingReasonFromWarningID](w.WarningID) AS [Warning Reason]
	          ,[EC].[fn_strSubCoachingReasonFromWarningID](w.WarningID)AS [Warning SubReason]
	          ,[EC].[fn_strValueFromwarningID](w.WarningID)AS [Value]
		      ,ISNULL(w.SubmitterID,'Unknown') AS [Submitter ID]
		      ,ISNULL(CONVERT(nvarchar(50),DecryptByKey(w.SubmitterName)),'Unknown') AS [Submitter Name]
		      ,ISNULL(w.ProgramName,'-') AS [Program Name]
              ,ISNULL(w.Behavior,'-')AS [Behavior]
              ,ISNULL(w.[State],'-')AS [State]
      FROM [EC].[Warning_Log] p WITH(NOLOCK)
      JOIN  (SELECT [wl].[ModuleID] ModuleID
              ,[mo].[Module]Module
              ,[wl].[WarningID] WarningID
			  ,[wl].[FormName]	FormName
			  ,[s].[Status]	Status
			  ,[wl].[EmpID]	EmpID
    	      ,[eh].[Emp_Name]	EmpName
    	      ,[si].[City]	Site
    	      ,[wl].[SupID]	LogSupID
			  ,[suph].[Emp_Name]	LogSupName
			  ,[wl].[MgrID]	LogMgrID
			  ,[mgrh].[Emp_Name]	LogMgrName
			  ,[eh].[Sup_ID]	HierarchySupID
			  ,[eh].[Sup_Name]	HierarchySupName
			  ,[eh].[Mgr_ID]	HierarchyMgrID
			  ,[eh].[Mgr_Name]	HierarchyMgrName
		      ,[wl].[WarningGivenDate]	WarningGivenDate
		      ,[wl].[SubmittedDate]	SubmittedDate
		      ,DATEADD(D,91,[wl].[WarningGivenDate])	WarningExpiryDate
		      ,[so].[CoachingSource] Source
		      ,[so].[SubCoachingSource]	SubSource
		      ,[dcr].[CoachingReason]WarningReason
		      ,[dscr].[SubCoachingReason]SubWarnReason
		      ,[wlr].[Value]Value
		      ,[wl].[SubmitterID]	SubmitterID
		      ,[sh].[Emp_Name]	SubmitterName
		      ,[wl].[ProgramName]	ProgramName
              ,[wl].[Behavior]	Behavior
              ,CASE WHEN [wl].[Active] = 1 THEN 'Active' 
               ELSE 'Expired' END AS [State]
        FROM [EC].[Warning_Log] wl WITH(NOLOCK) JOIN [EC].[DIM_Status] s 
		ON wl.StatusID = s.StatusID JOIN [EC].[DIM_Source] so 
		ON wl.SourceID = so.SourceID JOIN [EC].[DIM_Module] mo
		ON wl.ModuleID = mo.ModuleID JOIN [EC].[DIM_Site] si 
		ON wl.SiteID = si.SiteID JOIN [EC].[Warning_Log_Reason] wlr WITH (NOLOCK)
		ON wl.WarningID = wlr.WarningID JOIN [EC].[DIM_Coaching_Reason]dcr 
		ON dcr.CoachingReasonID = wlr.CoachingReasonID JOIN [EC].[DIM_Sub_Coaching_Reason]dscr 
		ON dscr.SubCoachingReasonID = wlr.SubCoachingReasonID JOIN [EC].[Employee_Hierarchy] eh 
		ON wl.EmpID = eh.Emp_ID JOIN [EC].[Employee_Hierarchy] sh
		ON wl.SubmitterID = sh.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] suph
		ON wl.SupID = suph.EMP_ID LEFT JOIN [EC].[Employee_Hierarchy] mgrh
		ON wl.MgrID = mgrh.EMP_ID 
		WHERE convert(varchar(8),[wl].[SubmittedDate],112) >= @strSDate
	    AND convert(varchar(8),[wl].[SubmittedDate],112) <= @strEDate
	    AND  (([wl].[ModuleID] =(@intModulein) or @intModulein = -1) 
		AND  ([wl].[StatusID] =(@intStatusin) or @intStatusin = -1) 
		AND  ([wl].[SiteID] =(@intSitein) or @intSitein = -1) 
		AND (CONVERT(NVARCHAR,[wl].[Active]) = (@strActive)or @strActive = '-1')
	    AND  ([wlr].[CoachingReasonID] = (@intWarnReasonin) or @intWarnReasonin = -1) 
        AND  ([wlr].[SubCoachingReasonID] = (@intSubWarnReasonin)or @intSubWarnReasonin = -1)
        AND ([wl].[EmpID]= (@strEmpin)or @strEmpin = '-1'))
		)w
		ON p.WarningID = w.WarningID
        ORDER BY p.SubmittedDate DESC



  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 
  	    
-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
ENDPROC:
--  Commit or Rollback Transaction Only If We were NOT already in a Transaction
IF @transactionCount = 0
BEGIN
	IF @returnCode = 0
	BEGIN
		-- Commit Transaction
		commit transaction currentTransaction
	END
	ELSE 
	BEGIN
		-- Rollback Transaction
		rollback transaction currentTransaction
	END
END

PRINT STR(@returnCode) + ' ' + @returnMessage
RETURN @returnCode

-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectCoaching4Contact' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Contact]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Jourdain Augustin
--	Create Date:	   6/10/2013
--	Description: 	   This procedure queries db for feed records to send out mail
--  Last Updated By: Susmitha Palacherla
--  last Modified date: 7/15/2016
--  Modified per TFS 644 to add extra attribute 'OMRARC' to support IAE, IAT Feeds -- 09/21/2015
--  Modified per TFS 2283 to add Source 210 for Training feed -- 3/22/2016
--  Modified per TFS 2268 to add Source 231 for CTC Quality Other feed - 6/15/2016
--  Modified per TFS 3179 & 3186 to add Source 218 for HFC & KUD Quality Other feeds - 7/15/2016
--  Modified to make allow more ad-hoc loads by adding more values to the file. TFS 4916 -12/9/2016
--  Modified to add condition for IQS(Quality logs)per TFS 5085 - 12/29/2016
--  Modified to add support for QS Lead Email for OMR Breaks feeds per TFS 6377 - 04/24/2017
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
-- --	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Contact]
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strFormStatus1 nvarchar(30),
  @strFormStatus2 nvarchar(30),
  @intSource1 int,
  @intSource2 int,
  @strFormType nvarchar(30),
  @strFormMail nvarchar(30);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT cl.CoachingID numID	
  ,cl.FormName strFormID
  ,s.Status strFormStatus
  ,veh.Emp_Email strCSREmail
  ,veh.Sup_Email strCSRSupEmail
  ,CASE 
     WHEN cl.[strReportCode] LIKE ''LCS%'' THEN [EC].[fn_strEmpEmailFromEmpID](cl.[MgrID])
	 ELSE veh.Mgr_Email 
   END strCSRMgrEmail
  ,so.SubCoachingSource	strSource
  ,veh.Emp_Name strCSRName
  ,so.CoachingSource strFormType
  ,cl.SubmittedDate	SubmittedDate
  ,cl.CoachingDate CoachingDate
  ,cl.EmailSent	EmailSent
  ,cl.sourceid
  ,cl.isCSE
  ,mo.Module
  ,CASE 
     WHEN SUBSTRING(cl.strReportCode, 1, 3) IN (''IAT'', ''IAE'') THEN 1 
	 ELSE 0 
   END OMRARC
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON eh.Emp_ID = veh.Emp_ID
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON eh.Emp_ID = cl.EMPID 
JOIN [EC].[DIM_Status] s ON s.StatusID = cl.StatusID 
JOIN [EC].[DIM_Source] so ON so.SourceID = cl.SourceID 
JOIN [EC].[DIM_Module] mo ON mo.ModuleID = cl.ModuleID 
WHERE S.Status NOT IN (''Completed'',''Inactive'')
  AND (cl.strReportCode IS NOT NULL OR cl.SourceID IN (211, 222, 223, 224, 230))
  AND cl.EmailSent = ''False''
  AND (
        (s.status =''Pending Acknowledgement'' AND veh.Emp_Email IS NOT NULL AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
        OR (s.Status =''Pending Supervisor Review'' AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
        OR ((s.Status =''Pending Manager Review'' OR s.Status =''Pending Sr. Manager Review'') AND veh.Mgr_Email IS NOT NULL AND veh.Mgr_Email <> ''Unknown'')
        OR (s.Status =''Pending Employee Review'' AND veh.Emp_Email IS NOT NULL AND veh.Emp_Email <> ''Unknown'')
        OR (s.Status =''Pending Quality Lead Review'' AND veh.Sup_Email IS NOT NULL AND veh.Sup_Email <> ''Unknown'')
      )
  AND LEN(cl.FormName) > 10
ORDER BY cl.SubmittedDate DESC';

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	
	    
PRINT @nvcsql	    
	    
END --sp_SelectCoaching4Contact
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectCoaching4Reminder' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Reminder]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Susmitha Palacherla
--	Create Date:	   02/09/2016
--	Description: 	   This procedure queries db for Failed Quality and LCSAT records that are past 
--  the Coaching SLA and sends Reminders to Supervisors and or Managers.
--  Initial revision per TFS Change request 1710 - 02/09/2016
--  Updated to limit to 2 reminders per status per TFS 2145 - 3/2/2016
--  Updated to replace Hierarchy mgr with Review mgr for LCS Mgr recipients per TFS 2182 - 3/8/2016
--  Modified per TFS 4353 to update recipients for reassigned logs - 10/21/2016
--  Modified per TFS 7646 to add reminders for DTT logs - 09/14/2017
--  Modified per TFS 8597 to modify DTT reminders to use Notification date - 10/12/2017
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Reminder]
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @nvcSQL1 nvarchar(max),
  @nvcSQL2 nvarchar(max),
  @nvcSQL3 nvarchar(max),
  @nvcSQL4 nvarchar(max),
  @intHrs1 int,
  @intHrs2 int;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

-- Variables used for the diferent reminder periods.
-- Quality and DTT reminders are set at 48 hrs
-- OMR reminders are set at 72 hrs
SET @intHrs1 = 48;
SET @intHrs2 = 72;
SET @nvcSQL1 = '
;WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID 
    ,x.numID 
    ,x.strEmpID 
    ,x.strStatus 
    ,x.strSubCoachingSource
    ,x.strvalue 
    ,x.strMgr
    ,x.Remind 
    ,x.RemindCC 
    ,x.NotificationDate	
    ,x.ReminderSent	
    ,x.ReminderDate	
    ,x.ReminderCount   
    ,x.ReassignDate   
    ,x.ReassignCount
    ,x.ReassignToID
FROM 
-- Verint-GDIT Logs
  (  
    SELECT cl.CoachingID numID	
      ,cl.FormName strFormID
      ,cl.EmpID strEmpID
      ,s.Status strStatus
      ,so.SubCoachingSource strSubCoachingSource
      ,clr.value strValue
      ,ISNULL(cl.MgrID,''999999'') strMgr
      ,cl.NotificationDate NotificationDate
      ,cl.ReminderSent ReminderSent
      ,cl.ReminderDate ReminderDate
      ,cl.ReminderCount ReminderCount
      ,cl.ReassignDate ReassignDate 
      ,cl.ReassignCount ReassignCount
      ,cl.ReassignedToID ReassignToID
      ,CASE
         WHEN (ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate], [NotificationDate]), GetDate()) >  ''' + CONVERT(VARCHAR, @intHrs1) + ''' ) THEN ''Sup''
         WHEN (ReminderSent = ''True'' AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) >''' + CONVERT(VARCHAR, @intHrs1) + ''' ) THEN ''Sup''
         ELSE ''NA'' 
       END Remind
      ,CASE
         WHEN (ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate], [NotificationDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''' ) THEN ''Mgr''
         WHEN (ReminderSent = ''True'' AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''' ) THEN ''Mgr/SrMgr''
         ELSE ''NA'' 
       END RemindCC
    FROM [EC].[Coaching_Log] cl WITH (NOLOCK)
    JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.coachingid = clr.coachingid 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID
    WHERE cl.Statusid = 6
      AND cl.SourceID = 223
      AND cl.EmailSent = ''True''
      AND clr.Value = ''Did not meet goal''
      AND (
	        (ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate], [NotificationDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''')
	        OR (ReminderSent = ''True'' AND [ReminderCount] < 2 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''')
          )
';

-- LCS OMR Logs
SET @nvcSQL2 = ' 
    UNION 
    SELECT cl.CoachingID numID	
      ,cl.FormName strFormID
      ,cl.EmpID strEmpID
      ,s.Status strStatus
      ,so.SubCoachingSource strSubCoachingSource
      ,clr.value strValue
      ,ISNULL(cl.MgrID, ''999999'') strMgr
      ,cl.NotificationDate NotificationDate
      ,cl.ReminderSent ReminderSent
      ,cl.ReminderDate ReminderDate
      ,cl.ReminderCount ReminderCount
      ,cl.ReassignDate ReassignDate 
      ,cl.ReassignCount ReassignCount
      ,cl.ReassignedToID ReassignToID
      ,CASE
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''ReviewMgr''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 5 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2)+''') THEN ''ReviewMgr''
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate], [MgrReviewAutoDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''Sup''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 6 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''Sup''
         ELSE ''NA'' 
       END Remind
      ,CASE
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate], [NotificationDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''ReviewSrMgr''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 5 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''ReviewSrMgr''
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate],[MgrReviewAutoDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''Mgr''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 6 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''') THEN ''Mgr/SrMgr''
         ELSE ''NA'' 
       END RemindCC
    FROM  [EC].[Coaching_Log] cl WITH (NOLOCK)
    JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.coachingid = clr.coachingid 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID
    WHERE clr.SubCoachingreasonID = 34 
      AND (
	        (cl.Statusid = 5 AND clr.Value   = ''Research Required'') 
			OR (cl.Statusid = 6 AND clr.Value   = ''Opportunity'')
          )
      AND cl.EmailSent = ''True''
      AND (
	        (ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate], [NotificationDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''')
			OR (ReminderSent = ''True'' AND [ReminderCount] < 2 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate], [ReminderDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''')
			OR (ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate], [MgrReviewAutoDate]), GetDate()) > ''' + CONVERT(VARCHAR, @intHrs2) + ''')
          )
';

--DTT Logs
SET @nvcSQL3 = ' 
    UNION 
    SELECT cl.CoachingID numID	
      ,cl.FormName strFormID
      ,cl.EmpID strEmpID
      ,s.Status strStatus
      ,so.SubCoachingSource strSubCoachingSource
      ,clr.value strValue
      ,ISNULL(cl.MgrID,''999999'') strMgr
      ,cl.NotificationDate NotificationDate
      ,cl.ReminderSent ReminderSent
      ,cl.ReminderDate ReminderDate
      ,cl.ReminderCount ReminderCount
      ,cl.ReassignDate ReassignDate 
      ,cl.ReassignCount ReassignCount
      ,cl.ReassignedToID ReassignToID
      ,CASE
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 4 AND DATEDIFF(HH, cl.NotificationDate, GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''') THEN ''Emp''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 4 AND DATEDIFF(HH, cl.ReminderDate, GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''') THEN ''Emp''
         ELSE ''NA'' 
       END Remind
      ,CASE
         WHEN (ReminderSent = ''False'' AND cl.Statusid = 4 AND DATEDIFF(HH, cl.NotificationDate, GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''') THEN ''Sup''
         WHEN (ReminderSent = ''True'' AND cl.Statusid = 4 AND DATEDIFF(HH, cl.ReminderDate,GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''') THEN ''Sup/Mgr''
         ELSE ''NA'' 
       END RemindCC
    FROM  [EC].[Coaching_Log] cl WITH (NOLOCK)
    JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.coachingid = clr.coachingid 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID
    WHERE clr.CoachingreasonID = 3
      AND clr.SubCoachingreasonID = 242
      AND cl.Statusid = 4 
      AND cl.NotificationDate IS NOT NULL
      AND (
	        (ReminderSent = ''False'' AND DATEDIFF(HH, cl.NotificationDate,GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''')
			OR (ReminderSent = ''True'' AND [ReminderCount] < 2 AND DATEDIFF(HH, cl.ReminderDate, GetDate()) > ''' + CONVERT(VARCHAR, @intHrs1) + ''')
      )
';

SET @nvcSQL4 = '
  ) x )
  SELECT 
    numid CoachingID
    ,strFormID
    ,strStatus
    ,strSubCoachingSource
    ,strValue
    ,CASE 
	   WHEN (Remind = ''Emp'') THEN veh.Emp_Email
       WHEN ( ReassignCount = 0  AND Remind = ''Sup'') THEN veh.Sup_Email
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND Remind = ''Sup'') THEN [EC].[fn_strEmpEmailFromEmpID](ReassignToID)		
       WHEN ( ReassignCount = 0  AND Remind = ''Mgr'') THEN veh.Mgr_Email
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND Remind = ''Mgr'') THEN [EC].[fn_strEmpEmailFromEmpID](ReassignToID)	
       WHEN ( ReassignCount = 0  AND Remind = ''ReviewMgr'') THEN [EC].[fn_strEmpEmailFromEmpID](strMgr)
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND Remind = ''ReviewMgr'') THEN [EC].[fn_strEmpEmailFromEmpID](ReassignToID)		
       ELSE '''' 
	 END strToEmail
    ,CASE 
	   WHEN (RemindCC = ''Sup'') THEN veh.Sup_Email
       WHEN  (RemindCC = ''Sup/Mgr'') THEN veh.Sup_Email + '';'' + veh.Mgr_Email
       WHEN ( ReassignCount = 0  AND RemindCC = ''Mgr'') THEN veh.Mgr_Email	
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND RemindCC = ''Mgr'') THEN [EC].[fn_strSupEmailFromEmpID](ReassignToID)
       WHEN ( ReassignCount = 0  AND RemindCC = ''SrMgr'') THEN [EC].[fn_strEmpEmailFromEmpID](eh.SrMgrLvl1_ID)
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND RemindCC = ''SrMgr'') THEN [EC].[fn_strMgrEmailFromEmpID](ReassignToID)
       WHEN ( ReassignCount = 0  AND RemindCC = ''ReviewSrMgr'') THEN [EC].[fn_strSupEmailFromEmpID](strMgr)
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND RemindCC = ''ReviewSrMgr'') THEN [EC].[fn_strSupEmailFromEmpID](ReassignToID)
       WHEN ( ReassignCount = 0  AND RemindCC = ''Mgr/SrMgr'') THEN veh.Mgr_Email + '';'' + [EC].[fn_strEmpEmailFromEmpID](eh.SrMgrLvl1_ID)
       WHEN ( ReassignCount <> 0 AND ReassignToID IS NOT NULL AND RemindCC = ''Mgr/SrMgr'') THEN [EC].[fn_strSupEmailFromEmpID](ReassignToID) + '';'' + [EC].[fn_strMgrEmailFromEmpID](ReassignToID)
       ELSE '''' 
	 END strCCEmail
    ,NotificationDate	
    ,ReminderSent	
    ,ReminderDate	
    ,ReminderCount   
    ,ReassignDate
  FROM TempMain T
  JOIN [EC].[Employee_Hierarchy] eh ON T.strEmpID = eh.Emp_ID
  JOIN [EC].[View_Employee_Hierarchy] veh ON eh.Emp_ID = veh.Emp_ID
  WHERE veh.emp_Email IS NOT NULL 
    OR veh.Emp_Email <> '''' 
	OR veh.Sup_Email IS NOT NULL 
	OR veh.Sup_Email <> '''' 
	OR veh.Mgr_Email IS NOT NULL 
	OR veh.Mgr_Email <> ''''
  ORDER BY NotificationDate desc
';
        
SET @nvcSQL = @nvcSQL1 + @nvcSQL2 + @nvcSQL3 + @nvcSQL4
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	 
	    
END --sp_SelectCoaching4Reminder
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectCSRsbyLocation' 
)
   DROP PROCEDURE [EC].[sp_SelectCSRsbyLocation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	12/13/13
--	Description: 	This procedure selects the CSRs from a table by location
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCSRsbyLocation] 
(
  @strCSRSitein nvarchar(30)
)
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strEDate nvarchar(8),
  @strRole1 nvarchar(30),
  @strRole2 nvarchar(30),
  @strRole3 nvarchar(30),
  @strRole4 nvarchar(30);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @strEDate = '99991231';
SET @strRole1 = 'WACS01';
SET @strRole2 = 'WACS02';
SET @strRole3 = 'WACS03';
SET @strRole4 = '%Engineer%';

SET @nvcSQL = '
SELECT veh.Emp_Name + '' ('' + veh.Emp_LanID + '') '' + Emp_Job_Description AS FrontRow1
  ,veh.Emp_Name + ''$'' + veh.Emp_Email + ''$'' + veh.Emp_LanID + ''$'' + veh.Sup_Name + ''$'' + veh.Sup_Email + ''$'' + veh.Sup_LanID + ''$'' + Sup_Job_Description + ''$'' + veh.Mgr_Name + ''$'' + veh.Mgr_Email + ''$'' + veh.Mgr_LanID + ''$'' + Mgr_Job_Description AS BackRow1
  ,Emp_Site
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON veh.Emp_ID = eh.Emp_ID
WHERE (Emp_Job_Code LIKE ''' + @strRole1 + ''' OR Emp_Job_Code LIKE ''' + @strRole2 + ''' OR Emp_Job_Code LIKE ''' + @strRole3 + ''' OR Emp_Job_Description LIKE ''' + @strRole4+''') 
  AND End_Date = ''99991231''
  AND Emp_Site = ''' + @strCSRSitein + '''
  AND veh.Emp_LanID IS NOT NULL 
  AND veh.Sup_LanID IS NOT NULL 
  AND veh.Mgr_LanID IS NOT NULL
ORDER BY Emp_Site ASC, veh.Emp_Name ASC';

EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	
	    
END -- sp_SelectCSRsbyLocation
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctCSRCompleted_All' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted_All]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of all Employees who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--  Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted_All] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.CSRText, X.CSRValue 
FROM (
       SELECT ''All Employees'' CSRText, ''%'' CSRValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Emp_Name CSRText, cl.EmpID CSRValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
       WHERE cl.StatusID <> 2 
	     AND cl.EmpID IS NOT NULL
) X
ORDER BY X.Sortorder, X.CSRText'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END --sp_SelectFrom_Coaching_LogDistinctCSRCompleted_All
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctCSRCompleted_Site' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted_Site]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of Employees at a selected site who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--  Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted_Site] 
@strCSRSitein nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.CSRText, X.CSRValue 
FROM (
       SELECT ''All Employees'' CSRText, ''%'' CSRValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Emp_Name	CSRText, cl.EmpID CSRValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
       WHERE cl.StatusID <> 2 
	     AND cl.EmpID IS NOT NULL 
		 AND CONVERT(nvarchar,cl.SiteID) = '''+@strCSRSitein+'''
) X
ORDER BY X.Sortorder, X.CSRText'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogDistinctCSRCompleted_Site
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctMGRCompleted_All' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted_All]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of all Managers who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--   Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE  PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted_All] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM (
       SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.MGR_Name	MGRText, eh.MGR_ID MGRValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
       WHERE cl.StatusID <> 2 
	     AND veh.MGR_Name IS NOT NULL 
		 AND eh.Mgr_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.MGRText'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogDistinctMGRCompleted_All
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctMGRCompleted_Site' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted_Site]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of Managers at a selected site who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--  Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted_Site] 
@strCSRSitein nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue
FROM (
       SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.MGR_Name	MGRText, eh.MGR_ID MGRValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
       WHERE cl.StatusID <> 2
         AND veh.MGR_Name IS NOT NULL 
         AND eh.Mgr_ID  <> ''999999''
         AND CONVERT(nvarchar,cl.SiteID) = '''+@strCSRSitein+'''
) X
ORDER BY X.Sortorder, X.MGRText'
		
EXEC (@nvcSQL)	
--PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

End --sp_SelectFrom_Coaching_LogDistinctMGRCompleted_Site
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctSubmitterCompleted2' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSubmitterCompleted2]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	03/10/2015
--  Description: Populates the Submitter values in the dashboard filter dropdown.
--  Created as part of SCR 14422 for the dashboard redesign.
--  Last Modified Date: 05/28/2015
--  Modified to add unknown as a constant per SCr 14893 Round 2 perf improvement.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSubmitterCompleted2] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

-- UNION of 3 separate selects for ordering.
-- Wild card value followed by regular data followed by unknown values.

SET @nvcSQL = '
SELECT X.SubmitterText, X.SubmitterValue 
FROM (
       SELECT ''All Submitters'' SubmitterText, ''%'' SubmitterValue, 01 Sortorder 
       UNION
       SELECT DISTINCT veh.Emp_Name SubmitterText, cl.SubmitterID SubmitterValue, 02 Sortorder
       FROM [EC].[Employee_Hierarchy] eh
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	   JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON cl.SubmitterID = veh.Emp_ID
       WHERE cl.SubmitterID IS NOT NULL AND cl.SubmitterID  <> ''999999'' AND cl.StatusID <> 2
       UNION
       SELECT ''Unknown'' SubmitterText, ''999999'' SubmitterValue, 03 Sortorder
) X
ORDER BY X.Sortorder, X.SubmitterText'

--Print @nvcSQL
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogDistinctSubmitterCompleted2
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctSUPCompleted_All' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted_All]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of all Supervisors who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--  Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted_All] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM (
       SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Sup_Name	SUPText, eh.Sup_ID SUPValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
       WHERE cl.StatusID <> 2 AND veh.Sup_Name IS NOT NULL AND eh.Sup_ID <> ''999999'' 
) X
ORDER BY X.Sortorder, X.SUPText'

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END --sp_SelectFrom_Coaching_LogDistinctSUPCompleted_All
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctSUPCompleted_Site' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted_Site]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/10/2015
--	Description: *	This procedure selects a list of Supervisors at a selected site who have completed or pending 
--  eCoaching records to display in the Historical dashboard filter dropdown.
--  Created during SCR 14893 Round 2 Performance improvements.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted_Site] 
@strCSRSitein nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM (
       SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Sup_Name	SUPText, eh.Sup_ID SUPValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
       WHERE cl.StatusID <> 2 AND veh.Sup_Name IS NOT NULL AND eh.Sup_ID <> ''999999'' AND CONVERT(nvarchar,cl.SiteID) = '''+@strCSRSitein+'''
) X
ORDER BY X.Sortorder, X.SUPText';
	
EXEC (@nvcSQL);	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogDistinctSUPCompleted_Site
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR] @strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Pending Manager Review'
SET @strFormStatus2 = 'Pending Supervisor Review'
SET @strFormStatus3 = 'Pending Acknowledgement'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM (
       SELECT ''All Employees'' EmpText, ''%'' EmpValue, 01 Sortorder
       UNION
       SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_Name EmplValue, 02 Sortorder
       FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	   JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	   JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	   JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
       WHERE (([eh].[Mgr_ID] =   '''+@nvcMGRID+''' AND [S].[Status] = '''+@strFormStatus+''')
                 OR ([eh].[Sup_ID] =   '''+@nvcMGRID+''' AND ([S].[Status] = '''+@strFormStatus2+''' OR [S].[Status] = '''+@strFormStatus3+''')))
         AND veh.Emp_Name IS NOT NULL
         AND ([eh].[Mgr_ID] <> ''999999'' AND [eh].[Sup_ID] <> ''999999'')
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)
--PRINT @nvcSQL
	
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogMgrDistinctCSR
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Modified during dashboard redesign SCR 14422.
--  Last Modified Date: 04/16/2015
--   1. To Replace old style joins.
--   2. Added All employees to the return
--   3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.EMPText, X.EMPValue 
FROM 
(
    SELECT ''All Employees'' EMPText, ''%'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_Name EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID =  '''+@nvcMGRID+''' AND s.Status <> '''+@strFormStatus+''' AND veh.EMP_Name IS NOT NULL AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

END --sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam] 

@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL =  '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''%'' EmpValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_Name EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.[Mgr_ID] = '''+@nvcMGRID+''' AND [S].[Status] LIKE ''Pending%'' AND veh.Emp_Name IS NOT NULL AND eh.[Mgr_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 	

End -- sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted] 

@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
SET @strFormStatus = 'Completed'

SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''%'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_Name EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.[Mgr_ID] = '''+@nvcMGRID+''' AND [S].[Status] = '''+@strFormStatus+''' AND veh.Emp_Name IS NOT NULL AND eh.[Mgr_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End --sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, veh.Mgr_Name MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+''' AND s.Status <> '''+@strFormStatus+''' AND veh.Mgr_Name IS NOT NULL AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End -- sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP] @strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Pending Manager Review'
SET @strFormStatus2 = 'Pending Supervisor Review'
SET @strFormStatus3 = 'Pending Acknowledgement'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
		
SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder From [EC].[Employee_Hierarchy]
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID  
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE 
	  (
	    ([eh].[Mgr_ID] =  '''+@nvcMGRID+''' AND [S].[Status] = '''+@strFormStatus+''') 
        OR 
		([eh].[Sup_ID] =  '''+@nvcMGRID+'''  AND ([S].[Status] = '''+@strFormStatus2+''' OR [S].[Status] = '''+@strFormStatus3+'''))
      )
      AND veh.SUP_Name IS NOT NULL
      AND [eh].[Mgr_ID] <> ''999999'' 
	  AND [eh].[Sup_ID] <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End -- sp_SelectFrom_Coaching_LogMgrDistinctSUP
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
      AND s.Status <> '''+@strFormStatus+'''
      AND veh.SUP_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END --sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE eh.Mgr_ID = '''+@nvcMGRID+'''
      AND S.Status like ''Pending%''
      AND veh.SUP_Name is NOT NULL
      AND eh.Mgr_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End --sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam
GO





IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted] 

@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE eh.Mgr_ID = '''+@nvcMGRID+'''
      AND S.Status = '''+@strFormStatus+'''
      AND veh.SUP_Name is NOT NULL
      AND eh.Mgr_ID <> ''999999'' 
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

END -- sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
		
SET @nvcSQL = '
SELECT X.EMPText, X.EMPValue 
FROM
(
    SELECT ''All Employees'' EMPText, ''%'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_Name EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
      AND s.[Status] = '''+@strFormStatus+'''
      AND veh.EMP_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText';	

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END -- sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted] 
@strCSRMGRin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, veh.Mgr_Name MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
      AND s.Status = '''+@strFormStatus+'''
      AND veh.Mgr_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.MgrText';

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End -- sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct Supervisors from e-Coaching records to display on staff dashboard for filter. 
--  Last Modified Date: 04/16/2015
--  Last Updated By: Susmitha Palacherla
--  Modified to rename CSRID to EmpID to support the Modular design.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted] 
@strCSRMGRin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
 	
SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
      AND S.Status = '''+@strFormStatus+'''
      AND veh.SUP_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';

EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	

END --sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Employees to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @strFormStatus2 = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.EMPText, X.EMPValue 
FROM
(
    SELECT ''All Employees'' EMPText, ''%'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_Name EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
    AND s.[Status] <> '''+@strFormStatus+'''
    AND S.Status <> '''+@strFormStatus2+'''
    AND veh.EMP_Name is NOT NULL
    AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText';	
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @strFormStatus2 = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, veh.Mgr_Name MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    where sh.Emp_ID = '''+@nvcMGRID+'''
      AND S.Status <> '''+@strFormStatus+'''
      AND S.Status <> '''+@strFormStatus2+'''
      AND veh.Mgr_Name IS NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
Order By X.Sortorder, X.MgrText';	
 
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

END -- sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct Supervisors from e-Coaching records to display on staff dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Supervisors to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]  
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @strFormStatus2 = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
 
SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcMGRID+'''
      AND S.Status <> '''+@strFormStatus+'''
      AND S.Status <> '''+@strFormStatus2+'''
      AND veh.SUP_Name is NOT NULL
      AND sh.Emp_ID  <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
 
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted
GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All employees to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR] @strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.EMPText, X.EMPValue 
FROM
(
    SELECT ''All Employees'' EMPText, ''%'' EMPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.EMP_Name EMPText, veh.EMP_Name EMPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcSUPID+'''
      AND s.Status <> '''+@strFormStatus+'''
      AND veh.EMP_Name IS NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EMPText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 

END -- sp_SelectFrom_Coaching_LogSupDistinctCSR
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam] 
@strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''%'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_Name EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.Sup_ID = '''+@nvcSUPID+'''
      AND [S].[Status] LIKE ''Pending%''
      AND veh.Emp_Name IS NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';

EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeam
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 08/25/2015
--  Modified per TFS 599 to fix typo for 'All Employees'
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted] 
@strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.EmpText, X.EmpValue 
FROM
(
    SELECT ''All Employees'' EmpText, ''%'' EmpValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Emp_Name EmpText, veh.Emp_Name EmplValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
    WHERE eh.Sup_ID = '''+@nvcSUPID+'''
      AND [S].[Status] = '''+@strFormStatus+'''
      AND veh.Emp_Name IS NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.EmpText';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR] @strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, veh.Mgr_Name MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID = '''+@nvcSUPID+'''
      AND s.Status <> '''+@strFormStatus+'''
      AND veh.Mgr_Name IS NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

END --sp_SelectFrom_Coaching_LogSupDistinctMGR
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers for supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All Managers to the return.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]
 @strCSRSUPin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.MGRText, X.MGRValue 
FROM
(
    SELECT ''All Managers'' MGRText, ''%'' MGRValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.Mgr_Name MGRText, veh.Mgr_Name MGRValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE eh.Sup_ID = '''+@nvcSUPID+'''
      AND s.Status = '''+@strFormStatus+'''
      AND veh.Mgr_Name is NOT NULL
      AND eh.Sup_ID <> ''999999''
) X
Order By X.Sortorder, X.MgrText';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

End  --sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted
GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added All supervisors to the return
--    3. Lan ID association by date
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP] @strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = '
SELECT X.SUPText, X.SUPValue 
FROM
(
    SELECT ''All Supervisors'' SUPText, ''%'' SUPValue, 01 Sortorder
    UNION
    SELECT DISTINCT veh.SUP_Name SUPText, veh.SUP_Name SUPValue, 02 Sortorder
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh WITH (NoLOCK) ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE sh.Emp_ID ='''+@nvcSUPID+'''
      AND s.Status <> '''+@strFormStatus+'''
      AND veh.SUP_Name is NOT NULL
      AND sh.Emp_ID <> ''999999''
) X
ORDER BY X.Sortorder, X.SUPText';
		
EXEC (@nvcSQL)
print @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	

END -- sp_SelectFrom_Coaching_LogSupDistinctSUP
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_CSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
-- Author:			Susmitha Palacherla
-- Create Date:	11/16/11
-- Description: Displays an Employee's Completed logs in the My Dashboard.
-- Last Modified Date: 04/16/2015
-- Last Updated By: Susmitha Palacherla
-- Modified during dashboard redesign SCR 14422.
-- 1. To Replace old style joins.
-- 2. Lan ID association by date.
-- Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
-- Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
-- TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRCompleted] @strCSRin nvarchar(30)
AS


BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@strFormStatus nvarchar(30),
@nvcEmpID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strCSRin,@dtmDate)
SET @strFormStatus = 'Completed'

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strCoachingID
    ,x.strCSRName
    ,x.strCSRSupName
    ,x.strCSRMgrName
    ,x.strFormStatus
    ,x.SubmittedDate				  
  FROM 
  (
    SELECT [cl].[FormName] strFormID,
      [cl].[CoachingID] strCoachingID,
      [veh].[Emp_Name] strCSRName,
      [veh].[Sup_Name] strCSRSupName, 
      [veh].[Mgr_Name] strCSRMgrName, 
      [s].[Status] strFormStatus,
      [cl].[SubmittedDate] SubmittedDate
	FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = veh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
	WHERE cl.EmpID = @nvcEmpIDparam 
      AND [S].[Status] = ''' + @strFormStatus + '''
      AND  cl.EmpID <> ''999999''
    GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [S].[Status], [cl].[SubmittedDate]
  ) X 
)

SELECT strFormID
  ,strCSRName
  ,strCSRSupName
  ,strCSRMgrName
  ,strFormStatus
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	
FROM TempMain T              
ORDER BY SubmittedDate DESC';
		
SET @ParmDefinition = N'@nvcEmpIDparam  nvarchar(10)';

EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition,
  @nvcEmpIDparam = @nvcEmpID;
	    
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_CSRCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_CSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--  Description: Displays an Employees Pending logs in the My Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encrypt/decrypt - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRPending] @strCSRin nvarchar(30)
AS

BEGIN

SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@nvcEmpID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strCSRin,@dtmDate)
SET @strFormStatus = 'Pending Employee Review'
SET @strFormStatus2 = 'Pending Acknowledgement'

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strCoachingID
    ,x.strCSRName
    ,x.strFormStatus
    ,x.SubmittedDate				  
  FROM 
  (
    SELECT [cl].[FormName] strFormID,
      [cl].[CoachingID] strCoachingID,
	  [veh].[Emp_Name] strCSRName,
	  [s].[Status] strFormStatus,
	  [cl].[SubmittedDate] SubmittedDate
	FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
    JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
    WHERE  cl.EmpID = @nvcEmpIDparam 
      AND ([S].[Status] = '''+@strFormStatus+''' or [S].[Status] = '''+@strFormStatus2+''')
      AND cl.EmpID <> ''999999''
    GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [S].[Status], [cl].[SubmittedDate]
  ) X
)

SELECT strFormID
  ,strCSRName
  ,strFormStatus
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	
FROM TempMain T              
ORDER BY SubmittedDate DESC';

SET @ParmDefinition = N'@nvcEmpIDparam  nvarchar(10)';
	
EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition,
  @nvcEmpIDparam = @nvcEmpID;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey] 	    

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_CSRPending
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_HistoricalSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	4/30/2012
--	Description: *	This procedure selects the CSR e-Coaching completed records to display on SUP historical page
--  Last Modified: 4/6/2016
--  Last Modified By: Susmitha Palacherla
--  Modified to add additional HR job code WHHR70 - TFS 1423 - 12/15/2015
--  Modified to reference table for HR job codes - TFS 2332 - 4/6/2016
--  TFS 7856 encrypt/decrypt - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP] 

@strUserin nvarchar(30),
@strSourcein nvarchar(100),
@strCSRSitein nvarchar(30),
@strCSRin nvarchar(30),
@strSUPin nvarchar(30),
@strMGRin nvarchar(30),
@strSubmitterin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@strStatusin nvarchar(30), 
@strjobcode  nvarchar(20),
@strvalue  nvarchar(30),
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1)
AS


BEGIN


SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcSQL4 nvarchar(max),
@nvcSQL5 nvarchar(max),
@nvcEmpID nvarchar(10),
@dtmDate datetime,
@strSDate nvarchar(10),
@strEDate nvarchar(10),
@nvcDisplayWarnings nvarchar(5),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@OrderKey nvarchar(10),
@where nvarchar(max);        

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strSDate = convert(varchar(8), @strSDatein,112)
Set @strEDate = convert(varchar(8), @strEDatein,112)
SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)
SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcEmpID), 'NO')) 
SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  
			 ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' +
			 ' AND [cl].[StatusID] <> 2'
			 
IF @strSourcein <> '%'
BEGIN
	SET @where = @where + ' AND [so].[SubCoachingSource] = ''' + @strSourcein + ''''
END
IF @strStatusin <> '%'
BEGIN
	SET @where = @where + ' AND [s].[Status] = ''' + @strStatusin + ''''
END
IF @strvalue <> '%'
BEGIN
	SET @where = @where + ' AND [clr].[value] = ''' + @strvalue + ''''
END
IF @strCSRin <> '%' 
BEGIN
	SET @where = @where + ' AND [cl].[EmpID] =   ''' + @strCSRin + '''' 
END
IF @strSUPin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_ID] = ''' + @strSUPin + '''' 
END
IF @strMGRin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_ID] = ''' + @strMGRin + '''' 
END	
IF @strSubmitterin <> '%'
BEGIN
	SET @where = @where + ' AND [cl].[SubmitterID] = ''' + @strSubmitterin + '''' 
END
IF @strCSRSitein <> '%'
BEGIN
	SET @where = @where + ' AND CONVERT(varchar,[cl].[SiteID]) = ''' + @strCSRSitein + ''''
END			 

--PRINT @UpperBand
IF @sortASC = 'y' 
SET @SortOrder = ' ASC' ELSE 
SET @SortOrder = ' DESC' 
SET @OrderKey = 'orderkey, '
SET  @SortExpression = @OrderKey + @sortBy +  @SortOrder

--PRINT @SortExpression

SET @nvcSQL1 = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strCoachingID
    ,x.strCSRName
    ,x.strCSRSupName
    ,x.strCSRMgrName
    ,x.strFormStatus
    ,x.strSource
    ,x.SubmittedDate
    ,x.strSubmitterName
    ,x.orderkey
    ,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber    
  FROM 
  (
    SELECT DISTINCT [cl].[FormName] strFormID
      ,[cl].[CoachingID] strCoachingID
      ,[veh].[Emp_Name]	strCSRName
	  ,[veh].[Sup_Name]	strCSRSupName
	  ,[veh].[Mgr_Name] strCSRMgrName
	  ,[s].[Status] strFormStatus
	  ,[so].[SubCoachingSource]	strSource
	  ,[cl].[SubmittedDate]	SubmittedDate
	  ,[vehs].[Emp_Name] strSubmitterName
	  ,''ok1'' orderkey
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID' +  
	@where + ' ' + '
	GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate], [vehs].[Emp_Name]'

SET @where = 
' WHERE convert(varchar(8),[wl].[SubmittedDate],112) >= ''' + @strSDate + '''' +  
' AND convert(varchar(8),[wl].[SubmittedDate],112) <= ''' + @strEDate + '''' +
' AND [wl].[StatusID] <> 2';
			 
IF @strSourcein <> '%'
BEGIN
	SET @where = @where + ' AND [so].[SubCoachingSource] = ''' + @strSourcein + ''''
END
IF @strStatusin <> '%'
BEGIN
	SET @where = @where + ' AND [s].[Status] = ''' + @strStatusin + ''''
END
IF @strvalue <> '%'
BEGIN
	SET @where = @where + ' AND [wlr].[value] = ''' + @strvalue + ''''
END
IF @strCSRin <> '%' 
BEGIN
	SET @where = @where + ' AND [wl].[EmpID] = ''' + @strCSRin + '''' 
END
IF @strSUPin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_ID] = ''' + @strSUPin + '''' 
END
IF @strMGRin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_ID] = ''' + @strMGRin + ''''
END	
IF @strSubmitterin <> '%'
BEGIN
	SET @where = @where + ' AND [wl].[SubmitterID] = ''' + @strSubmitterin + '''' 
END
IF @strCSRSitein <> '%'
BEGIN
	SET @where = @where + ' AND CONVERT(varchar,[wl].[SiteID]) = ''' + @strCSRSitein + '''';
END	

SET @nvcSQL2 = ' 
UNION
  SELECT DISTINCT [wl].[FormName]	strFormID
    ,[wl].[WarningID]	strCoachingID
    ,[veh].[Emp_Name]	strCSRName
	,[veh].[Sup_Name]	strCSRSupName
	,[veh].[Mgr_Name]	strCSRMgrName
	,[s].[Status]		strFormStatus
	,[so].[SubCoachingSource]	strSource
	,[wl].[SubmittedDate]	SubmittedDate
	,[vehs].[Emp_Name]	strSubmitterName
	,''ok2'' orderkey
  FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
  JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
  JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
  JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON wl.SubmitterID = vehs.EMP_ID 
  JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
  JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID
  JOIN [EC].[Warning_Log_Reason] wlr WITH (NOLOCK) ON wl.WarningID = wlr.WarningID' + 
  @where + ' ' + '
  GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [so].[SubCoachingSource], [wl].[SubmittedDate], [vehs].[Emp_Name]'

SET @nvcSQL3 = ' 
  ) x 
)

SELECT strFormID
  ,strCSRName
  ,strCSRSupName
  ,strCSRMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,strSubmitterName
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID)
	 ELSE [EC].[fn_strCoachingReasonFromWarningID](T.strCoachingID) 
   END strCoachingReason
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)
	 ELSE [EC].[fn_strSubCoachingReasonFromWarningID](T.strCoachingID) 
   END strSubCoachingReason
  ,CASE WHEN T.orderkey = ''ok1'' THEN [EC].[fn_strValueFromCoachingID](T.strCoachingID)
	 ELSE [EC].[fn_strValueFromWarningID](T.strCoachingID)
   END strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + '''
ORDER BY ' + @SortExpression  

--print @nvcDisplayWarnings
IF @nvcDisplayWarnings = 'YES'
  SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3; 
ELSE
  SET @nvcSQL = @nvcSQL1 + @nvcSQL3;

EXEC (@nvcSQL)	
PRINT @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- SelectFrom_Coaching_Log_HistoricalSUP
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_HistoricalSUP_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/28/2015
--	Description: *	This procedure returns the count of completed   e-Coaching  records that will be 
--  displayed for the selected criteria on the SUP historical page.
-- Create per SCR 14893 dashboard redesign performance round 2.
--  Last Modified: 4/6/2016
--  Last Modified By: Susmitha Palacherla
--  Modified to add additional HR job code WHHR70 - TFS 1423 - 12/15/2015
--  Modified to reference table for HR job codes - TFS 2332 - 4/6/2016
--  TFS 7856 encrypt/decrypt - emp name, lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP_Count] 

@strUserin nvarchar(30),
@strSourcein nvarchar(100),
@strCSRSitein nvarchar(30),
@strCSRin nvarchar(30),
@strSUPin nvarchar(30),
@strMGRin nvarchar(30),
@strSubmitterin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@strStatusin nvarchar(30), 
@strjobcode  nvarchar(20),
@strvalue  nvarchar(30)
--@intRecordCount int OUT

AS

BEGIN

SET NOCOUNT ON;

DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcEmpID nvarchar(10),
@dtmDate datetime,
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcDisplayWarnings nvarchar(5),
@where nvarchar(max); 

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
   
SET @dtmDate  = GETDATE();  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate);
 
SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcEmpID),'NO')); 
   
SET @strFormStatus = 'Inactive';
SET @strSDate = convert(varchar(8),@strSDatein,112);
SET @strEDate = convert(varchar(8),@strEDatein,112);

SET @where = ' WHERE convert(varchar(8), [cl].[SubmittedDate],112) >= ''' + @strSDate + '''' +  
			 ' AND convert(varchar(8), [cl].[SubmittedDate],112) <= ''' + @strEDate + '''' +
			 ' AND [cl].[StatusID] <> 2';
			 
IF @strSourcein <> '%'
BEGIN
	SET @where = @where + ' AND [so].[SubCoachingSource] = ''' + @strSourcein + '''';
END
IF @strStatusin <> '%'
BEGIN
	SET @where = @where + ' AND [s].[Status] = ''' + @strStatusin + '''';
END
IF @strvalue <> '%'
BEGIN
	SET @where = @where + ' AND [clr].[value] = ''' + @strvalue + '''';
END
IF @strCSRin <> '%' 
BEGIN
	SET @where = @where + ' AND [cl].[EmpID] =   ''' + @strCSRin + ''''; 
END
IF @strSUPin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_ID] = ''' + @strSUPin + ''''; 
END
IF @strMGRin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_ID] = ''' + @strMGRin + '''' 
END	
IF @strSubmitterin <> '%'
BEGIN
	SET @where = @where + ' AND [cl].[SubmitterID] = ''' + @strSubmitterin + ''''; 
END
IF @strCSRSitein <> '%'
BEGIN
	SET @where = @where + ' AND CONVERT(varchar, [cl].[SiteID]) = ''' + @strCSRSitein + '''';
END;			 

SET @nvcSQL1 = 'WITH TempCoaching
AS 
(
  SELECT DISTINCT x.strFormID
  FROM 
  (
    SELECT DISTINCT [cl].[FormName]	strFormID
	FROM [EC].[Employee_Hierarchy] eh 
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON cl.EmpID = eh.Emp_ID 
	JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
	JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
	JOIN [EC].[DIM_Site] si ON cl.SiteID = si.SiteID 
	JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID' + 
    @where

SET @where = ' WHERE convert(varchar(8), [wl].[SubmittedDate],112) >= ''' + @strSDate + '''' +  
			 ' AND convert(varchar(8), [wl].[SubmittedDate],112) <= ''' + @strEDate + '''' +
			 ' AND [wl].[StatusID] <> 2';
			 
IF @strSourcein <> '%'
BEGIN
	SET @where = @where + ' AND [so].[SubCoachingSource] = ''' + @strSourcein + '''';
END
IF @strStatusin <> '%'
BEGIN
	SET @where = @where + ' AND [s].[Status] = ''' + @strStatusin + '''';
END
IF @strvalue <> '%'
BEGIN
	SET @where = @where + ' AND [wlr].[value] = '''+@strvalue+'''';
END
IF @strCSRin <> '%' 
BEGIN
	SET @where = @where + ' AND [wl].[EmpID] = ''' + @strCSRin + ''''; 
END
IF @strSUPin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_ID] = ''' + @strSUPin + ''''; 
END
IF @strMGRin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_ID] = ''' + @strMGRin + '''';
END	
IF @strSubmitterin <> '%'
BEGIN
	SET @where = @where + ' AND [wl].[SubmitterID] = ''' + @strSubmitterin + ''''; 
END
IF @strCSRSitein <> '%'
BEGIN
	SET @where = @where + ' AND CONVERT(varchar,[wl].[SiteID]) = ''' + @strCSRSitein + '''';
END;	

SET @nvcSQL2 = ' 
UNION
SELECT DISTINCT [wl].[FormName]	strFormID
FROM [EC].[Employee_Hierarchy] eh 
  JOIN [EC].[Warning_Log] wl WITH(NOLOCK) ON wl.EmpID = eh.Emp_ID 
  JOIN [EC].[Employee_Hierarchy] sh ON wl.SubmitterID = sh.EMP_ID 
  JOIN [EC].[DIM_Status] s ON wl.StatusID = s.StatusID 
  JOIN [EC].[DIM_Source] so ON wl.SourceID = so.SourceID 
  JOIN [EC].[DIM_Site] si ON wl.SiteID = si.SiteID 
  JOIN [EC].[Warning_Log_Reason] wlr WITH (NOLOCK) ON wl.WarningID = wlr.WarningID' +
@where 

SET @nvcSQL3 = '
  ) x
) SELECT count(strFormID) FROM TempCoaching';
	   
IF @nvcDisplayWarnings = 'YES'
  SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3; 
ELSE
  SET @nvcSQL = @nvcSQL1 + @nvcSQL3;

print @nvcSQL;
EXEC (@nvcSQL);	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey] 	 
    
END; -- sp_SelectFrom_Coaching_Log_HistoricalSUP_Count
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_Historical_Export' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Export]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/14/2015
--	Description: *	This procedure selects the  e-Coaching completed records for export.
-- Last Modified Date:06/2/2015
-- Last Updated By: Susmitha Palacherla
-- Modified per SCR 14893 dashboard redesign performance round 2.
-- TFS 7856 encrypt/decrypt - names
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_Historical_Export] 

@strSourcein nvarchar(100),
@strCSRSitein nvarchar(30),
@strCSRin nvarchar(30),
@strSUPin nvarchar(30),
@strMGRin nvarchar(30),
@strSubmitterin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@strStatusin nvarchar(30), 
@strvalue  nvarchar(30)

AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@where nvarchar(max);  

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strSDate = convert(varchar(8), @strSDatein,112)
SET @strEDate = convert(varchar(8), @strEDatein,112)
SET @where = ' '
			 
IF @strSourcein <> '%'
BEGIN
	SET @where = @where + ' AND [so].[SubCoachingSource] = ''' + @strSourcein + ''''
END
IF @strStatusin <> '%'
BEGIN
	SET @where = @where + ' AND [s].[Status] = ''' + @strStatusin + ''''
END
IF @strvalue <> '%'
BEGIN
	SET @where = @where + ' AND [clr].[value] = ''' + @strvalue + ''''
END
IF @strCSRin <> '%' 
BEGIN
	SET @where = @where + ' AND [cl].[EmpID] =   ''' + @strCSRin + '''' 
END
IF @strSUPin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Sup_ID] = ''' + @strSUPin + '''' 
END
IF @strMGRin <> '%'
BEGIN
	SET @where = @where + ' AND [eh].[Mgr_ID] = ''' + @strMGRin + '''' 
END	
IF @strSubmitterin <> '%'
BEGIN
	SET @where = @where + ' AND [cl].[SubmitterID] = ''' + @strSubmitterin + '''' 
END
IF @strCSRSitein <> '%'
BEGIN
	SET @where = @where + ' AND CONVERT(varchar, [cl].[SiteID]) = ''' + @strCSRSitein + ''''
END			 

SET @nvcSQL = ';WITH CL 
AS 
(
  SELECT * From [EC].[Coaching_Log] WITH (NOLOCK)
  WHERE convert(varchar(8), [SubmittedDate], 112) >= ''' + @strSDate + '''
    AND convert(varchar(8), [SubmittedDate], 112) <= ''' + @strEDate + '''
    AND [StatusID] <> 2
)
SELECT [cl].[CoachingID] CoachingID
  ,[cl].[FormName] FormName
  ,[cl].[ProgramName] ProgramName
  ,[cl].[EmpID]	EmpID
  ,[veh].[Emp_Name]	CSRName
  ,[veh].[Sup_Name]	CSRSupName
  ,[veh].[Mgr_Name]	CSRMgrName
  ,[si].[City] FormSite
  ,[so].[CoachingSource] FormSource
  ,[so].[SubCoachingSource]	FormSubSource
  ,[dcr].[CoachingReason] CoachingReason
  ,[dscr].[SubCoachingReason] SubCoachingReason
  ,[clr].[Value] Value
  ,[s].[Status] FormStatus
  ,[vehs].[Emp_Name] SubmitterName
  ,[cl].[EventDate]	EventDate
  ,[cl].[CoachingDate] CoachingDate
  ,[cl].[VerintID] VerintID
  ,[cl].[Description] Description
  ,[cl].[CoachingNotes]	CoachingNotes
  ,[cl].[SubmittedDate]	SubmittedDate
  ,[cl].[SupReviewedAutoDate] SupReviewedAutoDate
  ,[cl].[MgrReviewManualDate] MgrReviewManualDate
  ,[cl].[MgrReviewAutoDate]	MgrReviewAutoDate
  ,[cl].[MgrNotes] MgrNotes
  ,[cl].[CSRReviewAutoDate]	CSRReviewAutoDate
  ,[cl].[CSRComments] CSRComments
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON eh.[EMP_ID] = veh.[EMP_ID]
JOIN cl ON cl.EmpID = eh.Emp_ID 
JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON cl.SubmitterID = vehs.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
JOIN [EC].[DIM_Source] so ON cl.SourceID = so.SourceID 
JOIN [EC].[DIM_Site] si ON cl.SiteID = si.SiteID 
JOIN [EC].[Coaching_Log_Reason]clr WITH (NOLOCK) ON cl.CoachingID = clr.CoachingID 
JOIN [EC].[DIM_Coaching_Reason]dcr ON clr.CoachingReasonID = dcr.CoachingReasonID
JOIN [EC].[DIM_Sub_Coaching_Reason]dscr ON clr.SubCoachingReasonID = dscr.SubCoachingReasonID ' +
@where + ' ' + '
ORDER BY [cl].[CoachingID]'

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey] 	
	    
END -- sp_SelectFrom_Coaching_Log_Historical_Export
GO
/*
sp_SelectFrom_Coaching_Log_MGRCSRCompleted(03).sql
Last Modified Date: 01/18/2018
Last Modified By: Susmitha Palacherla

Version 03 : TFS 7856 encryption/decryption - emp name, landid, email- 12/13/2017
Version 02: Modified to support additional Modules (show logs where Mgr is sup of log owner) - TFS 8793 - 11/16/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the completed e-Coaching records 
--  for a given Manager's employees in the Manager Dashboard.
-- Last Updated By: Susmitha Palacherla
-- Last Modified Date: 04/16/2015
-- Modified during dashboard redesign SCR 14422.
-- 1. To Replace old style joins.
-- 2. Lan ID association by date.
-- Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
-- Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
-- Modified to support additional Modules (show logs where Mgr is sup of log owner) per TFS 8793 - 11/16/2017
-- TFS 7856 encryption/decryption - emp name, landid, email- 12/13/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRCompleted] 

@strSourcein nvarchar(100),
@strCSRMGRin nvarchar(30),
@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime
 
AS

BEGIN

SET NOCOUNT ON;

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed';
SET @strSDate = convert(varchar(8),@strSDatein,112);
SET @strEDate = convert(varchar(8),@strEDatein,112);
SET @dtmDate  = GETDATE();
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate);

SET @nvcSQL = 'WITH TempMain 
AS 
( 
  SELECT DISTINCT x.strFormID
    ,x.strCoachingID
    ,x.strCSRName
    ,x.strCSRSupName
    ,x.strCSRMgrName
    ,x.strFormStatus
    ,x.strSource
    ,x.SubmittedDate				  
  FROM 
  (
    SELECT [cl].[FormName] strFormID,
      [cl].[CoachingID] strCoachingID,
      [veh].[Emp_Name] strCSRName,
      [veh].[Sup_Name] strCSRSupName, 
      [veh].[Mgr_Name] strCSRMgrName, 
      [s].[Status] strFormStatus,
      [sc].[SubCoachingSource] strSource,
      [cl].[SubmittedDate] SubmittedDate
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON [cl].[EmpID] = [eh].[Emp_ID]
	JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
	JOIN  [EC].[DIM_Source] sc ON [cl].[SourceID] = [sc].[SourceID] 
    WHERE (eh.[Mgr_ID] = @nvcMGRIDparam OR eh.[Sup_ID] = @nvcMGRIDparam)
      AND [S].[Status] = ''' + @strFormStatus+'''
      AND [sc].[SubCoachingSource] LIKE @strSourceinparam
      AND [veh].[Emp_Name] LIKE @strCSRinparam
      AND [veh].[Sup_Name] LIKE  @strCSRSUPinparam
      AND convert(varchar(8), [cl].[SubmittedDate], 112) >= @strSDateinparam
      AND convert(varchar(8), [cl].[SubmittedDate], 112) <= @strEDateinparam
      AND eh.[Mgr_ID] <> ''999999''
    GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [S].[Status], [sc].[SubCoachingSource], [cl].[SubmittedDate]
  ) X 
)

SELECT strFormID
  ,strCSRName
  ,strCSRSupName
  ,strCSRMgrName
  ,strFormStatus
  ,strSource
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
  ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	
FROM TempMain T              
ORDER BY SubmittedDate DESC';
	
SET @ParmDefinition = N'
  @strSourceinparam nvarchar(100),
  @nvcMGRIDparam nvarchar(10),
  @strCSRSUPinparam nvarchar(30),
  @strCSRinparam nvarchar(30), 
  @strSDateinparam datetime, 
  @strEDateinparam datetime';	

EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition,
  @strSourceinparam = @strSourcein, 
  @nvcMGRIDparam = @nvcMGRID, 
  @strCSRSUPinparam = @strCSRSUPin,
  @strCSRinparam = @strCSRin, 
  @strSDateinparam = @strSDatein, 
  @strEDateinparam = @strEDatein;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;
Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MGRCSRCompleted
GO



/*
sp_SelectFrom_Coaching_Log_MGRCSRPending(02).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support additional Modules (show logs where Mgr is sup of log owner)- TFS 8793 - 11/16/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRCSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the Pendingd e-Coaching records 
--  for a given Manager's employees in the Manager Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Revision History:
--  Modified per scr 14422 - dashboard redesign - 04/16/2015
--  1. To Replace old style joins.
--  2. Lan ID association by date.
--  Modified per TFS 1709 - Admin tool setup to add non hierarchy sups - 5/4/2016
--  Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  Modified to support additional Modules (show logs where Mgr is sup of log owner) per TFS 8793 - 11/16/2017
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending] 

@strCSRMGRin nvarchar(30),
@strCSRSUPin nvarchar(30),
@strSourcein nvarchar(100),
@strCSRin nvarchar(30) 

AS

BEGIN

Set NoCount ON

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = N'
SELECT [cl].[FormName] strFormID,
       [veh].[Emp_Name] strCSRName,
       CASE 
         WHEN (cl.[statusId]in (6,8) AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID]is NOT NULL AND [ReassignCount]<> 0)
           THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
         WHEN (cl.[statusId]= 5 AND cl.[ModuleID] = 2 AND cl.[ReassignedToID]is NOT NULL AND [ReassignCount]<> 0)
           THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
         ELSE [veh].[Sup_Name]
       END strCSRSupName,	
       [veh].[Mgr_Name] strCSRMgrName, 
       [s].[Status]	strFormStatus,
       [sc].[SubCoachingSource] strSource,
       [cl].[SubmittedDate]	SubmittedDate,
       [EC].[fn_strCoachingReasonFromCoachingID]([cl].[CoachingID]) strCoachingReason,
       [EC].[fn_strSubCoachingReasonFromCoachingID]([cl].[CoachingID]) strSubCoachingReason,
	   [EC].[fn_strValueFromCoachingID]([cl].[CoachingID]) strValue
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON [cl].[EmpID] = [eh].[Emp_ID] 
JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
JOIN  [EC].[DIM_Source] sc ON [cl].[SourceID] = [sc].[SourceID] 
WHERE (eh.[Mgr_ID] = @nvcMGRIDparam OR eh.[Sup_ID] = @nvcMGRIDparam OR (cl.[ReassignedToID] IN (SELECT DISTINCT Emp_ID FROM EC.Employee_Hierarchy WHERE Sup_ID = @nvcMGRIDparam)))
  AND [veh].[Emp_Name] LIKE @strCSRinparam
  AND [veh].[Sup_Name] LIKE @strCSRSUPinparam
  AND [S].[Status] LIKE ''Pending%''
  AND [sc].[SubCoachingSource] LIKE @strSourceinparam
  AND @nvcMGRIDparam <> ''999999''
ORDER BY [SubmittedDate] DESC'

	
SET @ParmDefinition = N'
  @nvcMGRIDparam nvarchar(10),
  @strCSRSUPinparam nvarchar(30),
  @strSourceinparam nvarchar(100),
  @strCSRinparam nvarchar(30)';

EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition, 
  @nvcMGRIDparam = @nvcMGRID, 
  @strCSRSUPinparam = @strCSRSUPin, 
  @strSourceinparam = @strSourcein, 
  @strCSRinparam = @strCSRin;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MGRCSRPending
GO

/*
sp_SelectFrom_Coaching_Log_MGRPending(02).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla


Version 02: Modified to support additional Modules per TFS 8793 - 11/16/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- ====================================================================
-- Author:			Susmitha Palacherla
-- Create Date:	11/16/11
-- Description: This procedure selects the Pending e-Coaching records 
-- for a given Manager in the Manager Dashboard.
-- Last Updated By: Susmitha Palacherla
-- Modified per SCR 14422 during dashboard resdesign - 04/16/2015
-- 1. To Replace old style joins.
-- 2. Lan ID association by date.
-- Updated per SCR 14818 to support rotating managers for Low CSAT - 05/22/2015
-- Modified per TFS 1710 Admin Tool setup - 5/2/2016
-- Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
-- Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
-- Modified to support additional Modules per TFS 8793 - 11/16/2017
-- TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending] 
@strCSRMGRin nvarchar(30),
@strCSRin nvarchar(30),
@strCSRSUPin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(50),
@strFormStatus2 nvarchar(50),
@strFormStatus3 nvarchar(50),
@strFormStatus4 nvarchar(50),
@strFormStatus5 nvarchar(50),
@strFormStatus6 nvarchar(50),
@strFormStatus7 nvarchar(50),
@nvcMGRID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus1 = 'Pending Manager Review'
SET @strFormStatus2 = 'Pending Supervisor Review'
SET @strFormStatus3 = 'Pending Acknowledgement'
SET @strFormStatus4 = 'Pending Sr. Manager Review'
SET @strFormStatus5 = 'Pending Deputy Program Manager Review'
SET @strFormStatus6 = 'Pending Quality Lead Review'
SET @strFormStatus7 = 'Pending Employee Review'
SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
 
SET @nvcSQL = '
SELECT [cl].[FormName]	strFormID,
       [veh].[Emp_LanID] strCSR,
       [veh].[Emp_Name]	strCSRName,
       [veh].[Sup_Name]	strCSRSupName, 
       [s].[Status]	strFormStatus,
       [cl].[SubmittedDate]	SubmittedDate,
       [EC].[fn_strCoachingReasonFromCoachingID]([cl].[CoachingID]) strCoachingReason,
       [EC].[fn_strSubCoachingReasonFromCoachingID]([cl].[CoachingID])strSubCoachingReason,
       [EC].[fn_strValueFromCoachingID]([cl].[CoachingID])strValue
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = eh.Emp_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
WHERE [veh].[Emp_Name] LIKE ''' + @strCSRin + '''
  AND [veh].[Sup_Name] LIKE ''' + @strCSRSUPin + '''
  AND (
        ((ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'') AND [ReassignCount] = 0 AND eh.[Mgr_ID] = ''' + @nvcMGRID + '''
          AND([S].[Status] = ''' + @strFormStatus1 + ''' OR [S].[Status] = ''' + @strFormStatus4 + ''' OR [S].[Status] = ''' + @strFormStatus5 + ''')) 
        OR ((ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'') AND [ReassignCount] = 0 AND eh.[Sup_ID] = ''' + @nvcMGRID + '''
          AND ([S].[Status] = ''' + @strFormStatus1 + ''' OR [S].[Status] = ''' + @strFormStatus2 + ''' OR [S].[Status] = ''' + @strFormStatus3 + ''' OR [S].[Status] = ''' + @strFormStatus6 + '''))
        OR ((ISNULL([cl].[strReportCode], '' '') NOT LIKE ''LCS%'') AND cl.[ReassignedToID] = ''' + @nvcMGRID + ''' AND [ReassignCount] <> 0
          AND ([S].[Status] = ''' + @strFormStatus1 + ''' OR [S].[Status] = ''' + @strFormStatus4 + ''' OR [S].[Status] = ''' + @strFormStatus5 + '''))
        OR ((ISNULL([cl].[strReportCode],'' '') NOT LIKE ''LCS%'') AND cl.[EmpID] = ''' + @nvcMGRID + ''' AND [S].[Status] = ''' + @strFormStatus7 + ''') 
        OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND cl.[MgrID] = ''' + @nvcMGRID + ''' AND [S].[Status] = ''' + @strFormStatus1 + ''')
        OR ([cl].[strReportCode] LIKE ''LCS%'' AND cl.[ReassignedToID] = '''+@nvcMGRID+''' AND [ReassignCount]<> 0 AND [S].[Status] = ''' + @strFormStatus1 + ''')
        OR ([cl].[strReportCode] LIKE ''LCS%'' AND [ReassignCount] = 0 AND eh.[Sup_ID] =''' + @nvcMGRID + ''' AND [S].[Status] = ''' + @strFormStatus2 + ''')
      )
  AND ''' + @nvcMGRID + ''' <> ''999999''
GROUP BY [cl].[CoachingID], [cl].[FormName], [veh].[Emp_LanID], [veh].[Emp_Name], [veh].[Sup_Name], [s].[Status], [cl].[SubmittedDate]
ORDER BY [SubmittedDate] DESC'

EXEC (@nvcSQL);

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Coaching_Log_MGRPending
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the completed records from the Coaching_Log table 
--  and displays on the My submissions dashboard where the logged in user is the ecl submitter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSubmitterID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @dtmDate  = GETDATE()   
SET @nvcSubmitterID  = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)

SET @nvcSQL = '
SELECT [cl].[FormName]	strFormID
      ,[s].[Status]		strFormStatus
      ,[veh].[Emp_Name]	strCSRName
      ,[veh].[Sup_Name]	strCSRSupName
      ,[veh].[Mgr_Name]	strCSRMgrName
      ,[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID 
JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
WHERE sh.Emp_ID = ''' + @nvcSubmitterID + ''' 
  AND [veh].[Emp_Name] LIKE ''' + @strCSRin + ''' 
  AND [veh].[Sup_Name] LIKE ''' + @strCSRSupin + ''' 
  AND [veh].[Mgr_Name] LIKE ''' + @strCSRMgrin + ''' 
  AND s.[Status] = ''' + @strFormStatus + '''
  AND sh.Emp_ID <> ''999999''
ORDER BY [cl].[SubmittedDate] DESC';
		
EXEC (@nvcSQL)	
--print @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END -- sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff
GO


IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the pending records from the Coaching_Log table 
--  and displays on the My submissions dashboard where the logged in user is the ecl submitter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Added additional statuses.
--    3. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcSubmitterID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcSubmitterID  = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)

SET @nvcSQL = '
SELECT cl.FormName	strFormID
      ,S.Status		strFormStatus
      ,veh.Emp_Name	strCSRName
      ,veh.Sup_Name	strCSRSupName
      ,veh.Mgr_Name	strCSRMgrName
      ,cl.SubmittedDate	SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Coaching_Log] cl  WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID 
JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
WHERE sh.Emp_ID = ''' + @nvcSubmitterID + ''' 
  AND veh.Emp_Name Like ''' + @strCSRin + '%''
  AND veh.Sup_Name Like ''' + @strCSRSupin + '%''
  AND veh.Mgr_Name Like ''' + @strCSRMgrin + '%''
  AND S.Status Like ''Pending%''
  AND sh.Emp_ID <> ''999999''
ORDER BY cl.SubmittedDate DESC'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END --sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the pending and completed records from the Coaching_Log table 
--  and displays on the My submissions dashboard where the logged in user is the ecl submitter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard] 
@strUserin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSubmitterID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSubmitterID  = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)

SET @nvcSQL = '
SELECT [cl].[FormName] strFormID,
       [s].[Status]	strFormStatus,
       [veh].[Emp_Name]	strCSRName,
       [veh].[Sup_Name]	strCSRSupName,
       [veh].[Mgr_Name]	strCSRMgrName,
       [cl].[SubmittedDate]	SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID 
JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
WHERE sh.Emp_ID = ''' + @nvcSubmitterID + ''' 
  AND s.[Status] <> ''' + @strFormStatus + '''
  AND sh.Emp_ID <> ''999999''
ORDER BY [cl].[SubmittedDate] DESC'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
    
END --sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the pending and completed records from the Coaching_Log table 
--  and displays on the My submissions manager dashboard where the logged in manager is the ecl submitter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30), 
@strStatusin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSubmitterID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSubmitterID  = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)
 
SET @nvcSQL = '
SELECT  cl.[FormName] strFormID,
		s.[Status]	strFormStatus,
		veh.[Emp_Name]	strCSRName,
		veh.[Sup_Name]	strCSRSupName,
		veh.[Mgr_Name]	strCSRMgrName,
		cl.[SubmittedDate] SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID 
JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
WHERE sh.Emp_ID = '''+@nvcSubmitterID+''' 
  AND veh.[Emp_Name] LIKE '''+@strCSRin+'''
  AND veh.[Sup_Name] LIKE '''+@strCSRSupin+'''
  AND veh.[Mgr_Name] LIKE '''+@strCSRMgrin+'''
  AND s.[Status] LIKE '''+@strStatusin+'''
  AND s.[Status] <> '''+@strFormStatus+'''
  AND sh.Emp_ID <> ''999999''
ORDER BY cl.[SubmittedDate] DESC'
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    	    
END --sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the pending and completed records from the Coaching_Log table 
--  and displays on the My submissions manager dashboard where the logged in supervisor is the ecl submitter. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30), 
@strStatusin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@nvcSubmitterID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Inactive'
SET @dtmDate  = GETDATE()   
SET @nvcSubmitterID  = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)

SET @nvcSQL = '
SELECT cl.[FormName]	strFormID,
       s.[Status]		strFormStatus,
       veh.[Emp_Name]	strCSRName,
       veh.[Sup_Name]	strCSRSupName,
       veh.[Mgr_Name]	strCSRMgrName,
       cl.[SubmittedDate] SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID 
JOIN [EC].[Employee_Hierarchy] sh ON cl.SubmitterID = sh.EMP_ID 
JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
WHERE sh.Emp_ID = '''+@nvcSubmitterID+''' 
  AND veh.[Emp_Name] LIKE '''+@strCSRin+'''
  AND veh.[Sup_Name] LIKE '''+@strCSRSupin+'''
  AND veh.[Mgr_Name] LIKE '''+@strCSRMgrin+'''
  AND s.[Status] LIKE '''+@strStatusin+'''
  AND s.[Status] <> '''+@strFormStatus+'''
  AND sh.Emp_ID <> ''999999''
ORDER BY cl.[SubmittedDate] DESC'
	
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
END --sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the completed e-Coaching records 
--  for a given supervisor's employees in the supervisor Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRCompleted] 
@strSourcein nvarchar(100),
@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30),
@strCSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN
Set NoCount ON

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus = 'Completed'
SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)
SET @dtmDate  = GETDATE()  
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = 'WITH TempMain AS (
SELECT DISTINCT x.strFormID
               ,x.strCoachingID
               ,x.strCSRName
               ,x.strCSRSupName
               ,x.strCSRMgrName
               ,x.strFormStatus
               ,x.strSource
               ,x.SubmittedDate				  
FROM (
        SELECT [cl].[FormName] strFormID
		      ,[cl].[CoachingID] strCoachingID
              ,[veh].[Emp_Name]	strCSRName
              ,[veh].[Sup_Name]	strCSRSupName 
              ,[veh].[Mgr_Name]	strCSRMgrName 
              ,[s].[Status]	strFormStatus
              ,[sc].[SubCoachingSource]	strSource
              ,[cl].[SubmittedDate]	SubmittedDate
        FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
        JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
        JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = eh.Emp_ID 
        JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
        JOIN [EC].[DIM_Source] sc ON cl.SourceID = sc.SourceID 
        WHERE [eh].[Sup_ID] = @nvcSUPIDinparam 
          AND [veh].[Mgr_Name] LIKE @strCSRMGRinparam
          AND [S].[Status] = '''+@strFormStatus+'''
          AND [veh].[Emp_Name] LIKE @strCSRinparam
          AND [sc].[SubCoachingSource] LIKE @strSourceinparam
          AND convert(varchar(8),[cl].[SubmittedDate],112) >= @strSDateinparam
          AND convert(varchar(8),[cl].[SubmittedDate],112) <= @strEDateinparam
          AND [eh].[Sup_ID] <> ''999999''
        GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [S].[Status], [sc].[SubCoachingSource], [cl].[SubmittedDate]
) x )

SELECT strFormID
	  ,strCSRName
	  ,strCSRSupName
	  ,strCSRMgrName
	  ,strFormStatus
	  ,strSource
	  ,SubmittedDate
	  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
	  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
	  ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	
FROM TempMain T              
ORDER BY SubmittedDate DESC';
	
SET @ParmDefinition = N'
  @nvcSUPIDinparam nvarchar(10),
  @strCSRinparam nvarchar(30), 
  @strSourceinparam nvarchar(100),
  @strCSRMGRinparam nvarchar(30),
  @strSDateinparam datetime, 
  @strEDateinparam datetime';

EXECUTE sp_executesql @nvcSQL, @ParmDefinition,
@nvcSUPIDinparam = @nvcSUPID,@strCSRinparam = @strCSRin, @strSourceinparam = @strSourcein,
@strCSRMGRinparam = @strCSRMGRin,@strSDateinparam = @strSDatein, @strEDateinparam = @strEDatein;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];     
	    
If @@ERROR <> 0 GoTo ErrorHandler
    Set NoCount OFF
    Return(0)
  
ErrorHandler:
    Return(@@ERROR)
	    
END --sp_SelectFrom_Coaching_Log_SUPCSRCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPCSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the pending e-Coaching records 
--  for a given supervisor's employees in the supervisor Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date:04/16/2015
--  Modified during dashboard redesign SCR 14422.
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRPending] 

@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30), 
@strSourcein nvarchar(100)

AS

BEGIN
SET NOCOUNT ON

DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = 'WITH TempMain AS (
SELECT DISTINCT x.strFormID
				,x.strCoachingID
				,x.strCSRName
				,x.strCSRSupName
				,x.strCSRMgrName
				,x.strFormStatus
				,x.strSource
				,x.SubmittedDate
FROM (SELECT [cl].[FormName] strFormID,
		[cl].[CoachingID]strCoachingID,
		[veh].[Emp_Name] strCSRName,
		[veh].[Sup_Name] strCSRSupName, 
		[veh].[Mgr_Name] strCSRMgrName, 
		[s].[Status] strFormStatus,
		[sc].[SubCoachingSource] strSource,
		[cl].[SubmittedDate] SubmittedDate
      FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	  JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
	  JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = eh.Emp_ID 
	  JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID 
	  JOIN [EC].[DIM_Source] sc ON cl.SourceID = sc.SourceID 
      WHERE [eh].[Sup_ID] = @nvcSUPIDparam 
        AND [S].[Status] LIKE ''Pending%''
        AND RTRIM(LTRIM([veh].[Emp_Name])) LIKE @strCSRinparam
        AND [sc].[SubCoachingSource] LIKE @strSourceinparam
        AND [eh].[Sup_ID] <> ''999999''
      GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [S].[Status], [sc].[SubCoachingSource], [cl].[SubmittedDate]
) x )
	
SELECT strFormID
      ,strCSRName
      ,strCSRSupName
      ,strCSRMgrName
	  ,strFormStatus
	  ,strSource
	  ,SubmittedDate
	  ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
	  ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
	  ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	      
FROM TempMain T
ORDER BY SubmittedDate DESC'
	
SET @ParmDefinition = N'
  @nvcSUPIDparam nvarchar(10),
  @strCSRinparam nvarchar(30), 
  @strSourceinparam nvarchar(100)';
		
--EXEC (@nvcSQL)	
--PRINT @nvcSQL

EXECUTE sp_executesql @nvcSQL, @ParmDefinition,
@nvcSUPIDparam = @nvcSUPID,@strCSRinparam = @strCSRin, @strSourceinparam = @strSourcein;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	 
	    
If @@ERROR <> 0 GoTo ErrorHandler
    Set NoCount OFF
    Return(0)
  
ErrorHandler:
    Return(@@ERROR)
	    
END --sp_SelectFrom_Coaching_Log_SUPCSRPending
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: This procedure selects the Pending e-Coaching records 
--  for a given Supervisor in the Supervisor Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Modified per SCR 14422 during dashboard resdesign - 6/16/2016
--    1. To Replace old style joins.
--    2. Lan ID association by date.
--  Modified per TFS 1710 Admin Tool setup - 5/2/2016
--  Modified per TFS 2268 CTC feed to add "Pending Acknowledgement" to filter - 5/2/2016
--  Modified per TFS 3598 to add Coaching Reason fields and use sp_executesql - 8/15/2016
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encryption/decryption - emp name
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending] @strCSRSUPin nvarchar(30)
AS

BEGIN
SET NOCOUNT ON
DECLARE	
@nvcSQL nvarchar(max),
@ParmDefinition NVARCHAR(1000),
@strFormStatus1 nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30),
@strFormStatus4 nvarchar(30),
@strFormStatus5 nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime;

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];

SET @strFormStatus1 = 'Pending Supervisor Review'
SET @strFormStatus2 = 'Pending Acknowledgement'
SET @strFormStatus3 = 'Pending Manager Review'
SET @strFormStatus4 = 'Pending Quality Lead Review'
SET @strFormStatus5 = 'Pending Employee Review'
SET @dtmDate  = GETDATE()   
SET @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)
 
SET @nvcSQL = 'WITH TempMain AS (
SELECT DISTINCT x.strFormID
               ,x.strCoachingID
               ,x.strCSR
               ,x.strCSRName
               ,x.strCSRSupName
               ,x.strFormStatus
               ,x.SubmittedDate
FROM (
        SELECT [cl].[FormName] strFormID,
               [cl].[CoachingID]strCoachingID,
               [veh].[Emp_LanID] strCSR,
               [veh].[Emp_Name]	strCSRName,
               [veh].[Sup_Name] strCSRSupName,
               [S].[Status]	strFormStatus,
               [cl].[SubmittedDate] SubmittedDate
        FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
		JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
		JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON cl.EmpID = eh.Emp_ID 
		JOIN [EC].[DIM_Status] s ON cl.StatusID = s.StatusID
        WHERE 
		  (
            ([ReassignCount]= 0 AND (eh.[Sup_ID] = @nvcSUPIDparam OR eh.[Mgr_ID] = @nvcSUPIDparam)
               AND ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus2+''' OR [S].[Status] = '''+@strFormStatus3+''' OR [S].[Status] = '''+@strFormStatus4+'''))
            OR (cl.[ReassignedToId] = @nvcSUPIDparam AND [ReassignCount]<> 0 AND [S].[Status] = '''+@strFormStatus1+''')
            OR (eh.[Emp_ID] = @nvcSUPIDparam AND [S].[Status] = '''+@strFormStatus2+''')
            OR (eh.[Emp_ID] = @nvcSUPIDparam AND [S].[Status] = '''+@strFormStatus5+''')
          )
          AND '''+@nvcSUPID+'''  <> ''999999''
        GROUP BY [cl].[FormName],[cl].[CoachingID],[veh].[Emp_LanID],[veh].[Emp_Name],[veh].[Sup_Name],[S].[Status],[cl].[SubmittedDate]
     ) X 
)

SELECT strFormID
      ,strCSR
      ,strCSRName
      ,strCSRSupName
      ,strFormStatus
      ,SubmittedDate
      ,[EC].[fn_strCoachingReasonFromCoachingID](T.strCoachingID) strCoachingReason
      ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strCoachingID)strSubCoachingReason
      ,[EC].[fn_strValueFromCoachingID](T.strCoachingID)strValue	        
FROM TempMain T
ORDER BY SubmittedDate DESC'

SET @ParmDefinition = N'@nvcSUPIDparam nvarchar(10)'
		
--EXEC (@nvcSQL)	
--Print @nvcSQL

EXECUTE sp_executesql @nvcSQL, @ParmDefinition, @nvcSUPIDparam = @nvcSUPID;

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

If @@ERROR <> 0 GoTo ErrorHandler
    Set NoCount OFF
    Return(0)
  
ErrorHandler:
    Return(@@ERROR)
	    
END --sp_SelectFrom_Coaching_Log_SUPPending
GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Historical_Dashboard_ACL' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Historical_Dashboard_ACL]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/2012
--	Last Update:	<>
--	Description: *	This procedure selects the user records from the Historical_Dashboard_ACL table
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Historical_Dashboard_ACL] 
(
  @nvcRole Nvarchar(30)
)
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcSQL = '
SELECT Row_ID
  ,CONVERT(nvarchar, DecryptByKey(User_LanID)) AS User_LanID
  ,CONVERT(nvarchar, DecryptByKey(User_Name)) AS User_Name
  ,[Role]
FROM [EC].[Historical_Dashboard_ACL]
WHERE Role = ''' + @nvcRole + ''' 
  AND End_Date > getdate()
ORDER BY User_LanID';
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];		
	    
END -- [sp_SelectFrom_Historical_Dashboard_ACL] 
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Active_WarningByWeek' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Active_WarningByWeek]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Count of Active Warning logs for selected month
--  that fall under the logged in Sr Mgr.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Active_WarningByWeek] 
@strEMPSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@strSrMgrEmpID nvarchar(10),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@intStatusID INT,
@whereStatus nvarchar(200);
	
-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	 
	
SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)

--PRINT @strSDate
--PRINT @strEDate

SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()))

SET @nvcSQL = 'WITH ReasonsByWeeks 
AS 
-- First CTE query.
(
	SELECT x.WeekNum, x.CoachingReason
	FROM 
	(
		SELECT * 
		FROM 
		(
			SELECT FullDate, datediff(week, dateadd(month, datediff(month, 0, FullDate), 0), FullDate) + 1 WeekNum
			FROM EC.DIM_Date
			WHERE convert(varchar(8),Datekey) >= '''+@strSDate+'''  
			  AND convert(varchar(8),Datekey) <= '''+@strEDate+'''
		) AS Dates,
		(
			Select CoachingReason from EC.DIM_Coaching_Reason
			Where CoachingReasonID in (28,29,30)
		) AS Reasons
	) x
    GROUP BY x.WeekNum, x.CoachingReason
), 

-- Second CTE query. 
Selected 
AS
(
	SELECT wl.warningID,  wl.submitteddate, datediff(week, dateadd(month, datediff(month, 0, [wl].[SubmittedDate]), 0), [wl].[SubmittedDate]) + 1 WeekNum, dcr.CoachingReason
	FROM [EC].[Employee_Hierarchy] eh 
	JOIN [EC].[Warning_Log]wl ON eh.Emp_ID = wl.EmpID 
	JOIN [EC].[Warning_Log_Reason]wlr ON wl.WarningID = wlr.WarningID 
	JOIN EC.DIM_Coaching_Reason dcr ON dcr.CoachingReasonID = wlr.CoachingReasonID
	WHERE convert(varchar(8),[wl].[SubmittedDate],112) >= '''+@strSDate+'''  
	  AND convert(varchar(8),[wl].[SubmittedDate],112) <= '''+@strEDate+'''
	  AND wl.Active = 1
	  AND wl.StatusID = 1
	  AND wl.ModuleID in (1,2)
	  AND (eh.SrMgrLvl1_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl2_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl3_ID = '''+@strSrMgrEmpID+''')
      AND '''+@strSrMgrEmpID+''' <> ''999999''
	  AND wlr.CoachingReasonID in (28,29,30)
) 
  
-- Select from the above 2 CTEs
SELECT ReasonsByWeeks.WeekNum, ReasonsByWeeks.CoachingReason, Count(Selected.WarningID)LogCount
FROM ReasonsByWeeks 
LEFT OUTER JOIN Selected ON ReasonsByWeeks.WeekNum = Selected.WeekNum AND ReasonsByWeeks.CoachingReason = Selected.CoachingReason
GROUP BY ReasonsByWeeks.WeekNum, ReasonsByWeeks.CoachingReason 
ORDER BY ReasonsByWeeks.WeekNum, ReasonsByWeeks.CoachingReason'; 

--Print @nvcSQL	  
Exec (@nvcSQL) 

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

END --sp_SelectFrom_SRMGR_Active_WarningByWeek
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Completed_CoachingByWeek' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Completed_CoachingByWeek]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Count of completed Coaching logs for selected month
--  that fall under the logged in Sr Mgr.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Completed_CoachingByWeek] 
@strEMPSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@strSrMgrEmpID nvarchar(10),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@intStatusID INT,
@whereStatus nvarchar(200);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)

SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()));

SET @nvcSQL = 'WITH CompletedByWeeks 
AS 
-- First CTE query
(
    Select x.WeekNum, x.Value
    FROM 
	(
	    SELECT * 
		FROM 
        (
		    SELECT FullDate, datediff(week, dateadd(month, datediff(month, 0, FullDate), 0), FullDate) + 1 WeekNum
            FROM EC.DIM_Date
            WHERE convert(varchar(8),Datekey) >= '''+@strSDate+''' 
	          AND convert(varchar(8),Datekey) <= '''+@strEDate+''' 
		) AS Dates,
        (
            SELECT Distinct Value from EC.Coaching_Log_Reason
            WHERE Value in (''Met goal'', ''Did not meet goal'', ''Opportunity'', ''Reinforcement'') 
		) AS ReasonValues
	) x
    GROUP BY x.WeekNum, x.Value
), 

-- Second CTE query
Selected 
AS
(
    SELECT cl.CoachingID,  cl.CSRReviewAutoDate, datediff(week, dateadd(month, datediff(month, 0, [cl].[CSRReviewAutoDate]), 0), [cl].[CSRReviewAutoDate]) + 1 WeekNum, clr.Value
    FROM [EC].[Employee_Hierarchy] eh 
	JOIN [EC].[Coaching_Log]cl ON eh.Emp_ID = cl.EmpID 
	JOIN [EC].[Coaching_Log_Reason]clr ON cl.CoachingID = clr.CoachingID 
    WHERE convert(varchar(8), [cl].[CSRReviewAutoDate], 112) >= '''+@strSDate+''' 
	  AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) <= '''+@strEDate+'''
      AND cl.StatusId = 1
      AND cl.ModuleID in (1,2)
      AND (eh.SrMgrLvl1_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl2_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl3_ID = '''+@strSrMgrEmpID+''')
      AND '''+@strSrMgrEmpID+''' <> ''999999''
)

-- Select from the above 2 CTEs  
SELECT CompletedByWeeks.WeekNum, CompletedByWeeks.Value, Count(Selected.CoachingID)LogCount
FROM CompletedByWeeks 
LEFT OUTER JOIN Selected ON CompletedByWeeks.WeekNum = Selected.WeekNum AND CompletedByWeeks.Value = Selected.Value
GROUP BY CompletedByWeeks.WeekNum, CompletedByWeeks.Value 
ORDER BY CompletedByWeeks.WeekNum, CompletedByWeeks.Value'

Exec (@nvcSQL) 

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

END --sp_SelectFrom_SRMGR_Completed_CoachingByWeek
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Count of  Coaching or Warning logs that will be returned for 
--  the selected parameters in the Senior leadeship dashboard. 
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Count] 
@strEMPSRMGRin nvarchar(30),
@bitisCoaching bit,
@strStatus nvarchar(30) = NULL,
@strSDatein datetime,
@strEDatein datetime,
@Count INT OUTPUT

AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@strSrMgrEmpID nvarchar(10),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@intStatusID INT,
@whereStatus nvarchar(200)
	
DECLARE @CountResults TABLE (CountReturned INT);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)
SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()))

IF @strStatus = 'Pending'
BEGIN
	SET @whereStatus = ' AND convert(varchar(8), [cl].[SubmittedDate], 112) >= '''+@strSDate+'''  
	AND convert(varchar(8), [cl].[SubmittedDate], 112) <= '''+@strEDate+'''
	AND [cl].[StatusId] NOT IN (1,2) '
END

IF @strStatus = 'Completed'
BEGIN
	SET @whereStatus = ' AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) >= '''+@strSDate+'''  
	AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) <= '''+@strEDate+'''
	AND [cl].[StatusId] = 1 '
END

IF @bitisCoaching = 1

SET @nvcSQL = 'WITH TempMain 
AS 
(
    SELECT DISTINCT x.strFormID 
	FROM 
	(
	    SELECT DISTINCT [cl].[FormName]	strFormID
	    FROM [EC].[Employee_Hierarchy] eh 
		JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON [cl].[EmpID] = [eh].[Emp_ID] 
	    WHERE (eh.SrMgrLvl1_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl2_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl3_ID = '''+@strSrMgrEmpID+''')'
          + @whereStatus + ' 
          AND [cl].[ModuleID] in (1,2)
          AND '''+@strSrMgrEmpID+''' <> ''999999''
	    GROUP BY [cl].[FormName]
	) x
)
SELECT count(strFormID) FROM TempMain'
	
ELSE

SET @nvcSQL = 'WITH TempMain 
AS 
(
    SELECT DISTINCT x.strFormID 
	FROM 
	(
	    SELECT DISTINCT [wl].[FormName]	strFormID
	    FROM [EC].[Employee_Hierarchy] eh 
		JOIN [EC].[Warning_Log] wl WITH (NOLOCK) ON [wl].[EmpID] = [eh].[Emp_ID] 
	    WHERE (eh.SrMgrLvl1_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl2_ID = '''+@strSrMgrEmpID+''' OR eh.SrMgrLvl3_ID = '''+@strSrMgrEmpID+''')
          AND convert(varchar(8),[wl].[SubmittedDate],112) >= '''+@strSDate+'''  
	      AND convert(varchar(8),[wl].[SubmittedDate],112) <= '''+@strEDate+''' 
	      AND [wl].StatusID = 1
	      AND [wl].[Active] = 1
	      AND [wl].[ModuleID] in (1,2)
          AND '''+@strSrMgrEmpID+''' <> ''999999''
	    GROUP BY [wl].[FormName]
	) x
)
SELECT count(strFormID) FROM TempMain';

INSERT @CountResults EXEC (@nvcSQL);

SET @Count = (SELECT CountReturned FROM @CountResults)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 
 
END --sp_SelectFrom_Log_SRMGR_Count
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Details' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Details]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure calls the procedure(s) for Coaching or Warning details based on the 
--  user selection in the Sr mgr dashboard. 
--  Last Updated By: Susmitha Palacherla
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Details] 
@strEMPSRMGRin nvarchar(30),
@bitisCoaching bit,
@strStatus nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1),
@searchBy nvarchar(30)
AS

BEGIN

IF @bitisCoaching = 1
  EXEC [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching]  @strEMPSRMGRin ,@strStatus , @strSDatein, @strEDatein, @PageSize, @startRowIndex, @sortBy, @sortASC, @searchBy;
ELSE
  EXEC [EC].[sp_SelectFrom_SRMGR_EmployeeWarning] @strEMPSRMGRin, @strSDatein, @strEDatein, @PageSize, @startRowIndex, @sortBy, @sortASC, @searchBy;

END --sp_SelectFrom_SRMGR_Details
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Detail_Count' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Detail_Count]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Count of  Coaching or warning logs that will be returned for 
--  the selected parameters in the Senior leadeship dashboard. 
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Detail_Count] 
@strEMPSRMGRin nvarchar(30),
@bitisCoaching bit,
@strStatus nvarchar(30) = NULL,
@strSDatein datetime,
@strEDatein datetime,
@Count INT OUTPUT,
@searchBy nvarchar(30)

AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@strSrMgrEmpID nvarchar(10),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@intStatusID INT,
@whereStatus nvarchar(200),
@SearchExpression nvarchar(200);

DECLARE @CountResults TABLE (CountReturned INT);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)
SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()))

SET @searchBy = '%' + @searchBy + '%'
SET @SearchExpression = ' AND ([eh].[Emp_Name] LIKE ''' + @searchBy + ''' OR [eh].[Sup_Name] LIKE ''' + @searchBy+'''' + 
' OR [eh].[Mgr_Name] LIKE ''' + @searchBy + ''')'

IF @strStatus = 'Pending'
BEGIN
	SET @whereStatus = ' AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate+'''  
	AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
	AND [cl].[StatusId] NOT IN (1, 2) '
END

IF @strStatus = 'Completed'
BEGIN
	SET @whereStatus = ' AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) >= '''+@strSDate+'''  
	AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) <= '''+@strEDate+'''
	AND [cl].[StatusId] = 1 '
END

IF @bitisCoaching = 1

SET @nvcSQL = 'WITH TempMain 
AS 
(
    SELECT DISTINCT x.strFormID 
	FROM 
	(
	    SELECT DISTINCT [cl].[FormName]	strFormID
	    FROM [EC].[Employee_Hierarchy] eh 
		JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON [cl].[EmpID] = [eh].[Emp_ID] 
        WHERE (eh.SrMgrLvl1_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl2_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl3_ID = ''' + @strSrMgrEmpID + ''')'
          + @whereStatus 
          + @SearchExpression + ' 
		  AND [cl].[ModuleID] in (1, 2)
          AND ''' + @strSrMgrEmpID + ''' <> ''999999''
	    GROUP BY [cl].[FormName]
	) x
)
SELECT count(strFormID) FROM TempMain'
	
ELSE

SET @nvcSQL = 'WITH TempMain 
AS 
(
    SELECT DISTINCT x.strFormID 
	FROM 
	(
	    SELECT DISTINCT [wl].[FormName]	strFormID
	    FROM [EC].[Employee_Hierarchy] eh 
		JOIN [EC].[Warning_Log] wl WITH (NOLOCK) ON [wl].[EmpID] = [eh].[Emp_ID] 
	    WHERE (eh.SrMgrLvl1_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl2_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl3_ID = ''' + @strSrMgrEmpID + ''')
          AND convert(varchar(8), [wl].[SubmittedDate], 112) >= ''' + @strSDate + '''  
	      AND convert(varchar(8), [wl].[SubmittedDate], 112) <= '''+@strEDate+''' 
	      AND [wl].StatusID = 1
	      AND [wl].[Active] = 1
	      AND [wl].[ModuleID] in (1,2) '
	      + @SearchExpression + ' 
	      AND '''+@strSrMgrEmpID+''' <> ''999999''
	    GROUP BY [wl].[FormName]
    ) x
)
SELECT count(strFormID) FROM TempMain'
	
INSERT @CountResults EXEC (@nvcSQL);

SET @Count = (SELECT CountReturned FROM @CountResults);

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 
 
END --sp_SelectFrom_SRMGR_Detail_Count
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_EmployeeCoaching' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Details for Coaching logs in given status
--  that fall under the logged in Sr Mgr.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching] 
@strEMPSRMGRin nvarchar(30),
@strStatus nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100)= 'strFormStatus',
@sortASC nvarchar(1),
@searchBy nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@strSrMgrEmpID nvarchar(10),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@UpperBand int,
@LowerBand int,
@SortExpression nvarchar(100),
@SortOrder nvarchar(10) ,
@where nvarchar(max),
@SearchExpression nvarchar(200); 

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	

SET @strSDate = convert(varchar(8),@strSDatein,112);
SET @strEDate = convert(varchar(8),@strEDatein,112);

SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()));
SET @LowerBand  = @startRowIndex;
SET @UpperBand  = @startRowIndex + @PageSize; 

IF @strStatus = 'Completed'
  SET @where = ' AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) >= ''' + @strSDate + '''' +  
	           ' AND convert(varchar(8), [cl].[CSRReviewAutoDate], 112) <= ''' + @strEDate + '''' +
	           ' AND [cl].[StatusID] = 1' + 
	           ' AND [cl].[ModuleID] in (1, 2) ';
ELSE IF @strStatus = 'Pending'
  SET @where = ' AND convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + '''' +  
	           ' AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''' +
               ' AND [cl].[StatusID] NOT IN (1, 2)' +
               ' AND [cl].[ModuleID] in (1, 2) ';

SET @searchBy = '%' + @searchBy + '%';

SET @SearchExpression = ' AND ([eh].[Emp_Name] LIKE ''' + @searchBy + ''' OR [eh].[Sup_Name] LIKE ''' + @searchBy + '''' + 
  ' OR [eh].[Mgr_Name] LIKE ''' + @searchBy + ''')';

IF @sortBy = 'strFormStatus'
  SET @sortBy = ' CASE WHEN strFormStatus = ''Pending Sr. Manager Review''  THEN 0 Else 1 END, strFormStatus';

IF @sortASC = 'y' 
  SET @SortOrder = ' ASC' ;
ELSE 
  SET @SortOrder = ' DESC';

SET  @SortExpression =  @sortBy +  @SortOrder;

SET @nvcSQL1 = 'WITH TempMain 
AS 
(
    SELECT DISTINCT x.strFormID
                   ,x.strID
                   ,x.strEmpName
                   ,x.strEmpSupName
                   ,x.strEmpMgrName
                   ,x.strSubmitterName
                   ,x.strFormStatus
                   ,x.strSource
                   ,x.SubmittedDate
                   ,ROW_NUMBER() OVER (ORDER BY ' + @SortExpression + ' ) AS RowNumber      
    FROM 
	(
        SELECT [cl].[FormName] strFormID
              ,[cl].[CoachingID] strID
              ,[veh].[Emp_Name] strEmpName
              ,[veh].[Sup_Name] strEmpSupName
              ,[veh].[Mgr_Name] strEmpMgrName
              ,[sveh].[Emp_Name] strSubmitterName
              ,[s].[Status] strFormStatus
              ,[so].[SubCoachingSource] strSource
              ,[cl].[SubmittedDate]	SubmittedDate
        FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
	    JOIN [EC].[Employee_Hierarchy] eh ON eh.[EMP_ID] = veh.[EMP_ID]
		JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON [cl].[EmpID] = [eh].[Emp_ID] 
		JOIN [EC].[View_Employee_Hierarchy] sveh WITH (NOLOCK) ON ISNULL([cl].[SubmitterID], ''999999'') = [sveh].[Emp_ID] 
		JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
		JOIN [EC].[DIM_Source] so ON [cl].[SourceID] = [so].[SourceID]
	    WHERE (eh.SrMgrLvl1_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl2_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl3_ID = ''' + @strSrMgrEmpID + ''')
          AND ''' + @strSrMgrEmpID + ''' <> ''999999'''
	      + @where +
	      + @SearchExpression + ' 
	      GROUP BY [cl].[FormName], [cl].[CoachingID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [sveh].[Emp_Name], [s].[Status], [so].[SubCoachingSource], [cl].[SubmittedDate]
    ) x
)';

SET @nvcSQL2 = '
SELECT strFormID
      ,strID
      ,strEMPName
      ,strEMPSupName
      ,strEMPMgrName
      ,strSubmitterName
      ,strFormStatus
      ,strSource
      ,SubmittedDate
      ,[EC].[fn_strCoachingReasonFromCoachingID](T.strID) strCoachingReason
      ,[EC].[fn_strSubCoachingReasonFromCoachingID](T.strID)strSubCoachingReason
      ,[EC].[fn_strValueFromCoachingID](T.strID)strValue
      ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + ''' AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + ''' 
ORDER BY ' + @SortExpression;  

SET @nvcSQL = @nvcSQL1 + @nvcSQL2;

EXEC (@nvcSQL);

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

END --sp_SelectFrom_SRMGR_EmployeeCoaching
GO
/*
sp_SelectFrom_SRMGR_EmployeeCoaching_Review(02).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 02:  Modified to support additional Modules per TFS 8793 - 11/16/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_EmployeeCoaching_Review' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching_Review]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Review Details for Coaching log selected.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  Modified to support additional Modules per TFS 8793 - 11/16/2017
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching_Review] @intFormIDin BIGINT
AS

BEGIN

DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcEmpID nvarchar(10),
@nvcMgrID nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	

SET @nvcEmpID = (SELECT [EmpID] From [EC].[Coaching_Log] WHERE [CoachingID]= @intFormIDin);	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID);

SET @nvcSQL = '
SELECT DISTINCT cl.CoachingID numID,
  cl.FormName strFormID,
  sc.CoachingSource	strFormType,
  sc.SubCoachingSource strSource,
  s.Status strFormStatus,
  cl.SubmittedDate SubmittedDate,
  cl.CoachingDate CoachingDate,
  cl.EventDate EventDate,
  vehs.Emp_Name strSubmitterName,
  veh.Emp_Name strCSRName,
  st.City strCSRSite,
  veh.Sup_Name strCSRSupName,
  
  CASE 
    WHEN (cl.[statusId] IN (6,8) AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId]= 5 AND cl.[ModuleID] = 2 AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_SupID]is NOT NULL and cl.[Review_SupID] = cl.[ReassignedToID] and [ReassignCount]= 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_SupID])
      ELSE ''NA''
  END strReassignedSupName,	
  
  CASE
    WHEN cl.[Review_SupID] IS NOT NULL THEN ISNULL(vehSup.Emp_Name,''Unknown'')
    ELSE ''NA'' 
  END strReviewSup,
  
  CASE
    WHEN cl.[strReportCode] LIKE ''LCS%'' AND cl.[MgrID] <> ''' + @nvcMgrID + '''
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[MgrID]) + '' (Assigned Reviewer)''
	  ELSE veh.Mgr_Name 
  END strCSRMgrName,
  
  CASE 
    WHEN (cl.[statusId] = 5  AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId] = 7  AND cl.[ModuleID] = 2 AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_MgrID] IS NOT NULL AND cl.[Review_MgrID] = cl.[ReassignedToID] AND [ReassignCount] = 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_MgrID])
      ELSE ''NA''
  END strReassignedMgrName, 
  
  CASE
    WHEN cl.[Review_MgrID] IS NOT NULL 
	  THEN ISNULL(vehMgr.Emp_Name,''Unknown'')
	  ELSE ''NA'' 
  END strReviewMgr,
  
  CASE WHEN sc.SubCoachingSource IN (''Verint-GDIT'', ''Verint-TQC'', ''LimeSurvey'', ''IQS'', ''Verint-GDIT Supervisor'')
    THEN 1 ELSE 0 
  END isIQS,
  
  CASE WHEN sc.SubCoachingSource = ''Coach the coach''
    THEN 1 ELSE 0 
  END isCTC,
  
  cl.isUCID isUCID,
  cl.UCID strUCID,
  cl.isVerintID	isVerintMonitor,
  cl.VerintID strVerintID,
  cl.VerintFormName VerintFormName,
  cl.isCoachingMonitor isCoachingMonitor,
  cl.isAvokeID isBehaviorAnalyticsMonitor,
  cl.AvokeID strBehaviorAnalyticsID,
  cl.isNGDActivityID isNGDActivityID,
  cl.NGDActivityID strNGDActivityID,      
  cl.Description txtDescription,
  cl.CoachingNotes txtCoachingNotes,
  cl.SubmittedDate,
  cl.SupReviewedAutoDate,
  cl.isCSE,
  cl.MgrReviewManualDate,
  cl.MgrReviewAutoDate,
  cl.MgrNotes txtMgrNotes,
  cl.CSRReviewAutoDate,
  cl.CSRComments txtCSRComments,
  [EC].[fn_strCoachingReasonFromCoachingID](cl.CoachingID) strCoachingReason,
  [EC].[fn_strSubCoachingReasonFromCoachingID](cl.CoachingID)strSubCoachingReason,
  [EC].[fn_strValueFromCoachingID](cl.CoachingID)strValue
FROM [EC].[Coaching_Log] cl 
JOIN [EC].[Coaching_Log_Reason] clr ON [cl].[CoachingID] = [clr].[CoachingID] 
JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON [cl].[EMPID] = [veh].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON [cl].[SubmitterID] = [vehs].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehSup WITH (NOLOCK) ON ISNULL([cl].[Review_SupID],''999999'') = [vehSup].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehMgr WITH (NOLOCK) ON ISNULL([cl].[Review_MgrID],''999999'') = [vehMgr].[Emp_ID]
JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
JOIN [EC].[DIM_Source] sc ON [cl].[SourceID] = [sc].[SourceID] 
JOIN [EC].[DIM_Site] st ON [cl].[SiteID] = [st].[SiteID] 
JOIN [EC].[DIM_Module] m ON [cl].[ModuleID] = [m].[ModuleID] 
WHERE [cl].[CoachingID] = ''' + CONVERT(NVARCHAR(20), @intFormIDin) + '''';

EXEC (@nvcSQL)
Print @nvcSQL

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 
	    
END --sp_SelectFrom_SRMGR_EmployeeCoaching_Review
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_EmployeeWarning' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeWarning]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Details for Active warning logs
--  that fall under the logged in Sr Mgr.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeWarning] 
@strEMPSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@PageSize int,
@startRowIndex int, 
@sortBy nvarchar(100),
@sortASC nvarchar(1),
@searchBy nvarchar(30)

AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strSrMgrEmpID nvarchar(10),
  @strSDate nvarchar(8),
  @strEDate nvarchar(8),
  @UpperBand int,
  @LowerBand int,
  @SortExpression nvarchar(100),
  @SortOrder nvarchar(10),
  @SearchExpression nvarchar(200);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)
SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()))
SET @LowerBand  = @startRowIndex 
SET @UpperBand  = @startRowIndex + @PageSize 
SET @searchBy = '%' + @searchBy + '%'
SET @SearchExpression = ' AND ([veh].[Emp_Name] LIKE '''+@searchBy+''' OR [veh].[Sup_Name] LIKE '''+@searchBy+'''' + 
' OR [veh].[Mgr_Name] LIKE '''+@searchBy+''')'

IF @sortASC = 'y' 
  SET @SortOrder = ' ASC';
ELSE 
  SET @SortOrder = ' DESC';

SET  @SortExpression =  @sortBy +  @SortOrder
--PRINT @SortExpression

SET @nvcSQL =  'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strID
    ,x.strEmpName
    ,x.strEmpSupName
    ,x.strEmpMgrName
    ,x.strSubmitterName
    ,x.strFormStatus
    ,x.strSource
    ,x.SubmittedDate
    ,ROW_NUMBER() OVER (ORDER BY '+ @SortExpression +' ) AS RowNumber     
  FROM 
  (
    SELECT [wl].[FormName] strFormID,
      [wl].[WarningID] strID,
      [veh].[Emp_Name] strEmpName,
      [veh].[Sup_Name] strEmpSupName, 
      [veh].[Mgr_Name] strEmpMgrName, 
      [vehs].[Emp_Name] strSubmitterName,
      [s].[Status] strFormStatus,
      [sc].[SubCoachingSource] strSource,
      [wl].[SubmittedDate] SubmittedDate
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
    JOIN [EC].[Employee_Hierarchy] eh WITH (NoLOCK) ON eh.[EMP_ID] = veh.[EMP_ID]
	JOIN [EC].[Warning_Log] wl WITH (NOLOCK) ON [wl].[EmpID] = [eh].[Emp_ID] 
	JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON ISNULL([wl].[SubmitterID],''999999'') = [vehs].[Emp_ID] 
	JOIN [EC].[DIM_Status] s ON [wl].[StatusID] = [s].[StatusID] 
	JOIN  [EC].[DIM_Source] sc ON [wl].[SourceID] = [sc].[SourceID] 
    WHERE (eh.SrMgrLvl1_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl2_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl3_ID = ''' + @strSrMgrEmpID + ''')
      AND convert(varchar(8), [wl].[SubmittedDate],112) >= ''' + @strSDate + ''' 
      AND convert(varchar(8), [wl].[SubmittedDate],112) <= ''' + @strEDate + '''
      AND [wl].[StatusID] = 1
      AND [wl].[Active] = 1
      AND [wl].[ModuleID] in (1, 2) '
      + @SearchExpression + ' 
	  AND ''' + @strSrMgrEmpID + ''' <> ''999999''
    GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [vehs].[Emp_name], [s].[Status], [sc].[SubCoachingSource], [wl].[SubmittedDate]
  ) x
)

SELECT strFormID
  ,strID
  ,strEMPName
  ,strEMPSupName
  ,strEMPMgrName
  ,strSubmitterName
  ,strSource
  ,strFormStatus
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromWarningID](T.strID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromWarningID](T.strID)strSubCoachingReason
  ,[EC].[fn_strValueFromWarningID](T.strID)strValue
  ,RowNumber                 
FROM TempMain T
WHERE RowNumber >= ''' + CONVERT(VARCHAR, @LowerBand) + '''  AND RowNumber < ''' + CONVERT(VARCHAR, @UpperBand) + ''' 
ORDER BY ' + @SortExpression  

EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 
	   
END --sp_SelectFrom_SRMGR_EmployeeWarning
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_EmployeeWarning_Review' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeWarning_Review]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Review Details for Warning log selected.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_EmployeeWarning_Review] @intFormIDin nvarchar(50)
AS

BEGIN

DEClARE	
  @nvcSQL nvarchar(max),
  @nvcEmpID nvarchar(10),
  @nvcMgrID nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];	

SET @nvcEmpID = (SELECT [EmpID] From [EC].[warning_Log] WHERE [FormName]= @intFormIDin)	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID)

SET @nvcSQL = '
SELECT DISTINCT wl.warningID numID,
  wl.FormName strFormID,
  ''Direct'' strFormType,
  ''Completed'' strFormStatus,
  sc.SubCoachingSource strSource,
  wl.SubmittedDate SubmittedDate,
  wl.WarningGivenDate warningDate,
  vehs.Emp_Name strSubmitterName,
  veh.Emp_Name strCSRName,
  st.City strCSRSite,
  veh.Sup_Name strCSRSupName,
  veh.Mgr_Name strCSRMgrName,	  
  [EC].[fn_strCoachingReasonFromwarningID](wl.warningID) strCoachingReason,
  [EC].[fn_strSubCoachingReasonFromwarningID](wl.warningID)strSubCoachingReason,
  [EC].[fn_strValueFromwarningID](wl.warningID)strValue
FROM [EC].[warning_Log] wl 
JOIN [EC].[warning_Log_Reason] wlr ON [wl].[warningID] = [wlr].[warningID] 
JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON [wl].[EMPID] = [veh].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehs WITH (NOLOCK) ON [wl].[SubmitterID] = [vehs].[Emp_ID] 
JOIN [EC].[DIM_Status] s ON [wl].[StatusID] = [s].[StatusID] 
JOIN [EC].[DIM_Source] sc ON [wl].[SourceID] = [sc].[SourceID] 
JOIN [EC].[DIM_Site] st ON [wl].[SiteID] = [st].[SiteID] 
JOIN [EC].[DIM_Module] m ON [wl].[ModuleID] = [m].[ModuleID]
WHERE [wl].[WarningID] = '''+CONVERT(NVARCHAR(20),@intFormIDin) + ''''

EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 
	    
END --sp_SelectFrom_SRMGR_EmployeeWarning_Review
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Pending_CoachingByWeek' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Pending_CoachingByWeek]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure returns the Count of Pending Coaching logs for selected month
--  that fall under the logged in Sr Mgr.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Pending_CoachingByWeek] 
@strEMPSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strSrMgrEmpID nvarchar(10),
  @strSDate nvarchar(8),
  @strEDate nvarchar(8),
  @intStatusID INT,
  @whereStatus nvarchar(200);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
	
SET @strSDate = convert(varchar(8),@strSDatein,112)
SET @strEDate = convert(varchar(8),@strEDatein,112)

SET @strSrMgrEmpID = (SELECT [EC].[fn_nvcGetEmpIdFromLanId] (@strEMPSRMGRin, GETDATE()))

SET @nvcSQL = '
WITH PendingByWeeks 
AS 
-- First CTE query
(
  SELECT x.WeekNum, x.Status
  FROM 
  (
    SELECT * 
	FROM 
    (
	  SELECT FullDate, datediff(week, dateadd(month, datediff(month, 0, FullDate), 0), FullDate) + 1 WeekNum
      FROM EC.DIM_Date
      WHERE convert(varchar(8), Datekey) >= ''' + @strSDate + ''' 
	    AND convert(varchar(8), Datekey) <= ''' + @strEDate + ''' 
	) AS Dates,

    (
	  SELECT Status from EC.DIM_Status
      WHERE StatusId IN (3, 4, 5, 6, 7)
	) Pending
  ) x GROUP BY x.WeekNum, x.Status
), 

-- Second CTE query
Selected 
AS
(
  SELECT cl.CoachingID, cl.submitteddate, datediff(week, dateadd(month, datediff(month, 0, [cl].[SubmittedDate]), 0), [cl].[SubmittedDate]) + 1 WeekNum, s.Status
  FROM [EC].[Employee_Hierarchy] eh 
  JOIN [EC].[Coaching_Log]cl ON eh.Emp_ID = cl.EmpID 
  JOIN [EC].[DIM_Status]s ON cl.StatusID = s.StatusID 
  WHERE convert(varchar(8), [cl].[SubmittedDate], 112) >= ''' + @strSDate + ''' 
    AND convert(varchar(8), [cl].[SubmittedDate], 112) <= ''' + @strEDate + '''
    AND cl.StatusId IN (3, 4, 5, 6, 7)
    AND cl.ModuleID IN (1, 2)
    AND (eh.SrMgrLvl1_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl2_ID = ''' + @strSrMgrEmpID + ''' OR eh.SrMgrLvl3_ID = ''' + @strSrMgrEmpID + ''')
    AND ''' + @strSrMgrEmpID + ''' <> ''999999''
) 
  
-- Select from the above 2 CTEs
SELECT PendingByWeeks.WeekNum, PendingByWeeks.Status, Count(Selected.CoachingID) LogCount
FROM PendingByWeeks 
LEFT OUTER JOIN Selected ON PendingByWeeks.WeekNum = Selected.WeekNum AND PendingByWeeks.Status = Selected.Status
GROUP BY PendingByWeeks.WeekNum, PendingByWeeks.Status 
ORDER BY PendingByWeeks.WeekNum, PendingByWeeks.Status';

--Print @nvcSQL	  
Exec (@nvcSQL) 

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 

END --sp_SelectFrom_SRMGR_Pending_CoachingByWeek
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_SRMGR_Review' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_SRMGR_Review]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/01/2016
--	Description: *	This procedure calls Procedure(s) to dosplay the review details for 
--  the Coaching or Warning log selected by the user.
--  Last Updated By: 
--  Created per TFS 3027 to implement dashboard for Sr Managers - 11/01/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_SRMGR_Review] @intFormIDin BIGINT, @bitisCoaching bit
AS

BEGIN

IF @bitisCoaching = 1
  EXEC  [EC].[sp_SelectFrom_SRMGR_EmployeeCoaching_Review]  @intFormIDin; 
ELSE  
  EXEC  [EC].[sp_SelectFrom_SRMGR_EmployeeWarning_Review] @intFormIDin ;
	    
END --sp_SelectFrom_SRMGR_Review
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_MGRCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MGRCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/09/2014
--	Description: *	This procedure selects the CSR Warning records from the Warning_Log table
--  Modified per TFS 3598 to add Warning Reason fields and use sp_executesql - 8/15/2016 
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MGRCSRCompleted] 
@strCSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@bitActive nvarchar(1)
 
AS

BEGIN

SET NOCOUNT ON

DECLARE	
  @nvcSQL nvarchar(max),
  @ParmDefinition NVARCHAR(1000),
  @strFormStatus nvarchar(30),
  @strSDate nvarchar(8),
  @strEDate nvarchar(8),
  @nvcMgrID Nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @strFormStatus = 'Completed'
SET @strSDate = convert(varchar(8), @strSDatein, 112)
SET @strEDate = convert(varchar(8), @strEDatein, 112)
SET @nvcMgrID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin, GETDATE()) 
 
SET @nvcSQL = '
WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strWarningID
    ,x.strCSRName
    ,x.strCSRSupName
    ,x.strCSRMgrName
    ,x.strFormStatus
    ,x.strSource
    ,x.SubmittedDate				  
  FROM 
  (
    SELECT [wl].[FormName] strFormID,
      [wl].[WarningID] strWarningID,
      [veh].[Emp_Name] strCSRName,
      [veh].[Sup_Name] strCSRSupName, 
      [veh].[Mgr_Name] strCSRMgrName, 
      [s].[Status] strFormStatus,
      [sc].[SubCoachingSource] strSource,
      [wl].[SubmittedDate] SubmittedDate
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON veh.Emp_ID = eh.Emp_ID
	JOIN  [EC].[Warning_Log] wl ON [wl].[EmpID] = [eh].[Emp_ID] 
	JOIN  [EC].[DIM_Status]s ON [wl].[StatusID] = [s].[StatusID] 
	JOIN [EC].[DIM_Source]sc ON [wl].[SourceID] = [sc].[SourceID]
    WHERE ([eh].[Mgr_ID] = @nvcMgrIDparam OR [eh].[Sup_ID] = @nvcMgrIDparam)
      AND [s].[Status] = ''' + @strFormStatus + '''
      AND convert(varchar(8), [wl].[SubmittedDate], 112) >= @strSDateinparam
      AND convert(varchar(8), [wl].[SubmittedDate], 112) <= @strEDateinparam
      AND [wl].[Active] LIKE ''' + CONVERT(NVARCHAR, @bitActive) + '''
      AND (eh.Mgr_ID <> ''999999'' OR eh.Sup_ID <> ''999999'')
    GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [sc].[SubCoachingSource], [wl].[SubmittedDate]
  ) X
)

SELECT strFormID
  ,strCSRName
  ,strCSRSupName
  ,strCSRMgrName
  ,strFormStatus
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromWarningID](strWarningID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromWarningID](strWarningID) strSubCoachingReason
FROM TempMain T              
ORDER BY SubmittedDate DESC';
	
SET @ParmDefinition = N'
  @nvcMgrIDparam nvarchar(30),
  @strSDateinparam datetime, 
  @strEDateinparam datetime';

EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition,
  @nvcMgrIDparam = @nvcMgrID,
  @strSDateinparam = @strSDatein, 
  @strEDateinparam = @strEDatein;
	    
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	

If @@ERROR <> 0 GoTo ErrorHandler;

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR)
	    
END --sp_SelectFrom_Warning_Log_MGRCSRCompleted
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_SUPCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_SUPCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/09/2014
--	Description: *	This procedure selects the CSR Warning records from the Warning_Log table
--  Last Updated By: Susmitha Palacherla
--  Modified SCR 13542 to add functionality for acting managers  - 12/02/2014
--  Modified per TFS 3598 to add Warning Reason fields and use sp_executesql - 8/15/2016 
--  Modified per TFS 3923 to fix slow running stored procedures in my dashboard - 9/22/2016
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_SUPCSRCompleted] 
@strCSRSUPin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@bitActive nvarchar(1)

AS

BEGIN

SET NOCOUNT ON

DECLARE	
  @nvcSQL nvarchar(max),
  @ParmDefinition NVARCHAR(1000),
  @strFormStatus nvarchar(30),
  @strSDate nvarchar(8),
  @strEDate nvarchar(8),
  @nvcSupID Nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @strFormStatus = 'Completed'
SET @strSDate = convert(varchar(8), @strSDatein, 112)
SET @strEDate = convert(varchar(8), @strEDatein, 112)
SET @nvcSupID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin, GETDATE())

SET @nvcSQL = 'WITH TempMain 
AS 
(
  SELECT DISTINCT x.strFormID
    ,x.strWarningID
    ,x.strCSRName
    ,x.strCSRSupName
    ,x.strCSRMgrName
    ,x.strFormStatus
    ,x.strSource
    ,x.SubmittedDate				  
  FROM
  (
    SELECT [wl].[FormName] strFormID,
      [wl].[WarningID] strWarningID,
      [veh].[Emp_Name] strCSRName,
      [veh].[Sup_Name] strCSRSupName, 
      [veh].[Mgr_Name] strCSRMgrName, 
      [s].[Status] strFormStatus,
      [sc].[SubCoachingSource] strSource,
      [wl].[SubmittedDate] SubmittedDate
    FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
	JOIN [EC].[Employee_Hierarchy] eh ON [eh].[Emp_ID] = [veh].[Emp_ID]
	JOIN [EC].[Warning_Log] wl ON [wl].[EmpID] = [eh].[Emp_ID] 
	JOIN [EC].[DIM_Status] s ON [wl].[StatusID] = [s].[StatusID] 
	JOIN [EC].[DIM_Source] sc ON [wl].[SourceID] = [sc].[SourceID]
    WHERE ([eh].[Sup_ID] =  @nvcSupIDparam OR [eh].[Mgr_ID] = @nvcSupIDparam)
      AND [s].[Status] = ''' + @strFormStatus + '''
      AND convert(varchar(8), [wl].[SubmittedDate], 112) >= @strSDateinparam
      AND convert(varchar(8), [wl].[SubmittedDate], 112) <= @strEDateinparam
      AND [wl].[Active] LIKE ''' + CONVERT(NVARCHAR, @bitActive) + '''
      AND (eh.Sup_ID <> ''999999''OR eh.Mgr_ID <> ''999999'')
    GROUP BY [wl].[FormName], [wl].[WarningID], [veh].[Emp_Name], [veh].[Sup_Name], [veh].[Mgr_Name], [s].[Status], [sc].[SubCoachingSource], [wl].[SubmittedDate]
  ) X
)

SELECT strFormID
  ,strCSRName
  ,strCSRSupName
  ,strCSRMgrName
  ,strFormStatus
  ,SubmittedDate
  ,[EC].[fn_strCoachingReasonFromWarningID](strWarningID) strCoachingReason
  ,[EC].[fn_strSubCoachingReasonFromWarningID](strWarningID)strSubCoachingReason
FROM TempMain T              
ORDER BY SubmittedDate DESC'; 

SET @ParmDefinition = N'
  @nvcSupIDparam nvarchar(10),
  @strSDateinparam datetime, 
  @strEDateinparam datetime';

EXECUTE sp_executesql 
  @nvcSQL, 
  @ParmDefinition,
  @nvcSupIDparam = @nvcSupID,
  @strSDateinparam = @strSDatein, 
  @strEDateinparam = @strEDatein;
  
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey]; 	  
	    
If @@ERROR <> 0 GoTo ErrorHandler

SET NOCOUNT OFF;

Return(0);
  
ErrorHandler:
    Return(@@ERROR);
	    
END --sp_SelectFrom_Warning_Log_SUPCSRCompleted
GO
/*
sp_SelectReviewFrom_Coaching_Log(08).sql

Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 08: Modified to support additional Modules per TFS 8793 - 11/16/2017
Version 07: Modified to use LEFT Join on Submitter table for unknown Submitters - TFS 7541 - 09/19/2017
Version 06: New OTH DTT - TFS 7646 - 9/1/2017
Version 05: Updated to incorporate HNC and ICC Reports per TFS 7174 - 07/24/2017
Version 04: Updated to support MSR and MSRS Feeds. TFS 6147 - 06/02/2017
Version 03: New Breaks BRN and BRL feeds - TFS 6145 - 4/13/2017
Version 02: New quality NPN feed - TFS 5309 - 2/3/2017
Version 01: Document Initial Revision - TFS 5223 - 1/18/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
--  SQL split into 3 parts to overcome sql string size restriction.

--  Last Updated By: Susmitha Palacherla
--  1. TFS 1877 to support OMR Low CSAT logs should be viewable by hierarchy manger - 2/17/2016
--  2. TFS 1914 to support  OMR Short Calls feed with Manager Review - 2/17/2016
--  3. TFS 1732 to support SDR Training feed - 3/2/2016
--  4. TFS 2283 to support ODT Training feed - 3/22/2016
--  5. TFS 1709 to support Reassigned sups and Mgrs - 5/6/2016
--  6. TFS 2268 to support CTC Quality Other feed - 6/23/2016
--  7. TFS 3179 & 3186 to add support HFC & KUD Quality Other feeds - 7/15/2016
--  8. TFS 3677 to update Quality\KUD Flag - 8/18/2016
--  9. TFS 3972 to ADD SEA flag - 9/15/2016
-- 10. TFS 3758 Shared coaching sub-reasons may cause unexpected display issue in user interface - 10/14/2016
-- 11. TFS 3757 Include Yes/No value to coaching monitor question - 10/27/2016
-- 12. TFS 5309 NPN Load.  - 02/01/2017
-- 13. TFS 6145 BRN and BRL Feeds - 4/12/2017
-- 14. TFS 6147 Updated to support MSR and MSRS Feeds - 06/02/2017
-- 15. Modified to incorporate HNC and ICC Feed - TFS 7174 - 07/21/2017
-- 16. Modified to incorporate DTT feed - TFS 7646 - 09/01/2017
-- 17. Modified to use LEFT Join on Submitter table for unknown Submitters - TFS 7541 - 09/19/2017
-- 18. Modified to support additional Modules per TFS 8793 - 11/16/2017
-- TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log] @strFormIDin nvarchar(50)
AS

BEGIN

DECLARE	

  @nvcSQL nvarchar(max),
  @nvcSQL1 nvarchar(max),
  @nvcSQL2 nvarchar(max),
  @nvcSQL3 nvarchar(max),
  @nvcEmpID nvarchar(10),
  @nvcMgrID nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcEmpID = (SELECT [EmpID] From [EC].[Coaching_Log] WHERE [FormName] = @strFormIDin)	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID)

SET @nvcSQL1 = '
SELECT cl.CoachingID numID,
  cl.FormName strFormID,
  m.Module,
  sc.CoachingSource	strFormType,
  s.Status strFormStatus,
  cl.EventDate EventDate,
  cl.CoachingDate CoachingDate,
  cl.SubmitterID strSubmitterID,
  cl.SupID strCLSupID,
  cl.MgrID strCLMgrID,
  vehSubmitter.Emp_LanID strSubmitter,		
  vehSubmitter.Emp_Name strSubmitterName,
  vehSubmitter.Emp_Email strSubmitterEmail,	
  cl.EmpID strEmpID,		
  veh.Emp_LanID strEmpLanID,
  veh.Emp_Name strCSRName,
  veh.Emp_Email strCSREmail,
  st.City strCSRSite,
  eh.Sup_ID strCSRSupID,
  veh.Sup_LanID strCSRSup,
  veh.Sup_Name strCSRSupName,
  veh.Sup_Email strCSRSupEmail,
  CASE 
    WHEN (cl.[statusId] IN (6, 8) AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId] = 5 AND cl.[ModuleID] = 2 AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_SupID] IS NOT NULL AND cl.[Review_SupID] = cl.[ReassignedToID] AND [ReassignCount]= 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_SupID])
    ELSE ''NA''
  END strReassignedSupName,	
  eh.Mgr_ID strCSRMgrID,
  CASE 
    WHEN cl.[strReportCode] LIKE ''LCS%'' THEN [EC].[fn_strEmpLanIDFromEmpID](cl.[MgrID])
    ELSE veh.Mgr_LanID 
  END strCSRMgr,
  CASE
    WHEN cl.[strReportCode] LIKE ''LCS%'' AND cl.[MgrID] <> ''' + @nvcMgrID + ''' THEN [EC].[fn_strEmpNameFromEmpID](cl.[MgrID]) + '' (Assigned Reviewer)''
    ELSE veh.Mgr_Name 
  END strCSRMgrName,
  veh.Mgr_Email strCSRMgrEmail,
  CASE 
    WHEN (cl.[statusId] = 5  AND cl.[ModuleID] NOT IN (-1, 2) AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[statusId] = 7  AND cl.[ModuleID] = 2 AND cl.[ReassignedToID] IS NOT NULL AND [ReassignCount] <> 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
    WHEN (cl.[Review_MgrID] IS NOT NULL AND cl.[Review_MgrID] = cl.[ReassignedToID] AND [ReassignCount] = 0)
      THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_MgrID])
    ELSE ''NA''
  END strReassignedMgrName,';
	
SET @nvcSQL2 = '
  CASE
    WHEN cl.[Review_SupID] IS NOT NULL THEN ISNULL(vehSup.Emp_Name, ''Unknown'')
    ELSE ISNULL(vehMgr.Emp_Name, ''Unknown'')
  END strReviewer,
  cl.ReassignedToID,
  sc.SubCoachingSource strSource,
  CASE 
    WHEN sc.SubCoachingSource in (''Verint-GDIT'', ''Verint-TQC'', ''LimeSurvey'', ''IQS'', ''Verint-GDIT Supervisor'') THEN 1 
	ELSE 0 
  END isIQS,
  CASE 
    WHEN sc.SubCoachingSource = ''Coach the coach'' THEN 1 
	ELSE 0 
  END isCTC,
  cl.isUCID isUCID,
  cl.UCID strUCID,
  cl.isVerintID	isVerintMonitor,
  cl.VerintID strVerintID,
  cl.VerintFormName VerintFormName,
  cl.isCoachingMonitor isCoachingMonitor,
  cl.isAvokeID isBehaviorAnalyticsMonitor,
  cl.AvokeID strBehaviorAnalyticsID,
  cl.isNGDActivityID isNGDActivityID,
  cl.NGDActivityID strNGDActivityID,
  CASE WHEN (cc.CSE = ''Opportunity'' AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "Customer Service Escalation",
  CASE WHEN (cc.CCI IS NOT NULL AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "Current Coaching Initiative",
  CASE WHEN (cc.OMR IS NOT NULL AND cc.LCS IS NULL AND cc.SDR IS NULL AND cc.ODT IS NULL AND cl.strReportCode IS NOT NULL) THEN 1 ELSE 0 END "OMR / Exceptions",
  CASE WHEN (cc.ETSOAE IS NOT NULL AND cl.strReportCode LIKE ''OAE%'') THEN 1 ELSE 0 END "ETS / OAE",
  CASE WHEN (cc.ETSOAS IS NOT NULL AND cl.strReportCode LIKE ''OAS%'') THEN 1 ELSE 0 END "ETS / OAS",
  CASE WHEN (cc.ETSHNC IS NOT NULL AND cl.strReportCode LIKE ''HNC%'') THEN 1 ELSE 0 END "ETS / HNC",
  CASE WHEN (cc.ETSICC IS NOT NULL AND cl.strReportCode LIKE ''ICC%'') THEN 1 ELSE 0 END "ETS / ICC",
  CASE WHEN (cc.OMRBRN IS NOT NULL AND cl.strReportCode LIKE ''BRN%'') THEN 1 ELSE 0 END "OMR / BRN",
  CASE WHEN (cc.OMRBRL IS NOT NULL AND cl.strReportCode LIKE ''BRL%'') THEN 1 ELSE 0 END "OMR / BRL",
  CASE WHEN (cc.OMRIAE IS NOT NULL AND cl.strReportCode LIKE ''IAE%'') THEN 1 ELSE 0 END "OMR / IAE",
  CASE WHEN (cc.OMRIAT IS NOT NULL AND cl.strReportCode LIKE ''IAT%'') THEN 1 ELSE 0 END "OMR / IAT",
  CASE WHEN (cc.OMRISQ IS NOT NULL AND cl.strReportCode LIKE ''ISQ%'') THEN 1 ELSE 0 END "OMR / ISQ",
  CASE WHEN (cc.LCS IS NOT NULL AND cl.strReportCode LIKE ''LCS%'') THEN 1 ELSE 0 END "LCS",
  CASE WHEN (cc.SDR IS NOT NULL AND cl.strReportCode LIKE ''SDR%'') THEN 1 ELSE 0 END "Training / SDR",
  CASE WHEN (cc.ODT IS NOT NULL AND cl.strReportCode LIKE ''ODT%'') THEN 1 ELSE 0 END "Training / ODT",
  CASE WHEN (cc.CTC IS NOT NULL AND cl.strReportCode LIKE ''CTC%'') THEN 1 ELSE 0 END "Quality / CTC",
  CASE WHEN (cc.HFC IS NOT NULL AND cl.strReportCode LIKE ''HFC%'') THEN 1 ELSE 0 END "Quality / HFC",
  CASE WHEN (cc.KUD IS NOT NULL AND cl.strReportCode LIKE ''KUD%'') THEN 1 ELSE 0 END "Quality / KUD",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''NPN%'') THEN 1 ELSE 0 END "Quality / NPN",
  CASE WHEN (cc.SEA IS NOT NULL AND cl.strReportCode LIKE ''SEA%'') THEN 1 ELSE 0 END "OTH / SEA",
  CASE WHEN (cc.DTT IS NOT NULL AND cl.strReportCode LIKE ''DTT%'') THEN 1 ELSE 0 END "OTH / DTT",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''MSR2%'') THEN 1 ELSE 0 END "PSC / MSR",
  CASE WHEN (cc.NPN_PSC IS NOT NULL AND cl.strReportCode LIKE ''MSRS%'') THEN 1 ELSE 0 END "PSC / MSRS",
  cl.Description txtDescription,
  cl.CoachingNotes txtCoachingNotes,
  cl.isVerified,
  cl.SubmittedDate,
  cl.StartDate,
  cl.SupReviewedAutoDate,
  cl.isCSE,
  cl.MgrReviewManualDate,
  cl.MgrReviewAutoDate,
  cl.MgrNotes txtMgrNotes,
  cl.isCSRAcknowledged,
  cl.isCoachingRequired,
  cl.CSRReviewAutoDate,
  cl.CSRComments txtCSRComments
FROM [EC].[Coaching_Log] cl ';
	    
SET @nvcSQL3 = '
JOIN 
(
  SELECT ccl.FormName,
    MAX(CASE WHEN [cr].[CoachingReason] = ''Customer Service Escalation'' THEN [clr].[Value] ELSE NULL END)	CSE,
    MAX(CASE WHEN [cr].[CoachingReason] = ''Current Coaching Initiative'' THEN [clr].[Value] ELSE NULL END)	CCI,
    MAX(CASE WHEN [cr].[CoachingReason] = ''OMR / Exceptions'' THEN [clr].[Value] ELSE NULL END) OMR,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 120 THEN [clr].[Value] ELSE NULL END) ETSOAE,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 121 THEN [clr].[Value] ELSE NULL END) ETSOAS,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 240 THEN [clr].[Value] ELSE NULL END) ETSHNC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 241 THEN [clr].[Value] ELSE NULL END) ETSICC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 29 THEN [clr].[Value] ELSE NULL END) OMRIAE,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 231 THEN [clr].[Value] ELSE NULL END) OMRIAT,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 238 THEN [clr].[Value] ELSE NULL END) OMRBRN,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 239 THEN [clr].[Value] ELSE NULL END) OMRBRL,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 34 THEN [clr].[Value] ELSE NULL END) LCS,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 23 THEN [clr].[Value] ELSE NULL END) OMRISQ,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 232 THEN [clr].[Value] ELSE NULL END) SDR,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 233 THEN [clr].[Value] ELSE NULL END) ODT,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 73 THEN [clr].[Value] ELSE NULL END) CTC,
    MAX(CASE WHEN [clr].[SubCoachingReasonID] = 12 THEN [clr].[Value] ELSE NULL END) HFC,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 11 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END) KUD,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 3 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	SEA,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 3 AND [clr].[SubCoachingReasonID] = 242) THEN [clr].[Value] ELSE NULL END) DTT,
    MAX(CASE WHEN ([CLR].[CoachingreasonID] = 5 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	NPN_PSC
  FROM [EC].[Coaching_Log_Reason] clr,
    [EC].[DIM_Coaching_Reason] cr,
	[EC].[Coaching_Log] ccl 
  WHERE [ccl].[FormName] = ''' + @strFormIDin + '''
    AND [clr].[CoachingReasonID] = [cr].[CoachingReasonID]
    AND [ccl].[CoachingID] = [clr].[CoachingID] 
  GROUP BY ccl.FormName 
) cc ON [cl].[FormName] = [cc].[FormName]
JOIN [EC].[Employee_Hierarchy] eh ON [cl].[EMPID] = [eh].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON [veh].[Emp_ID] = [eh].[Emp_ID]
LEFT JOIN [EC].[View_Employee_Hierarchy] vehSubmitter WITH (NOLOCK) ON [cl].[SubmitterID] = [vehSubmitter].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehSup WITH (NOLOCK) ON ISNULL([cl].[Review_SupID], ''999999'') = [vehSup].[Emp_ID] 
JOIN [EC].[View_Employee_Hierarchy] vehMgr WITH (NOLOCK) ON ISNULL([cl].[Review_MgrID], ''999999'') = [vehMgr].[Emp_ID]
JOIN [EC].[DIM_Status] s ON [cl].[StatusID] = [s].[StatusID] 
JOIN [EC].[DIM_Source] sc ON [cl].[SourceID] = [sc].[SourceID] 
JOIN [EC].[DIM_Site] st ON [cl].[SiteID] = [st].[SiteID] 
JOIN [EC].[DIM_Module] m ON [cl].[ModuleID] = [m].[ModuleID]
ORDER BY [cl].[FormName]';
		
SET @nvcSQL =  @nvcSQL1 +  @nvcSQL2 +  @nvcSQL3;
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Coaching_Log
GO
/*
sp_SelectReviewFrom_Coaching_Log_For_Delete(02).sql
Last Modified Date: 3/21/2017
Last Modified By: Susmitha Palacherla

Version 02: Updated to add IsCoaching to return. TFS 5641 - 03/21/2017
Version 01: Document Initial Revision - TFS 5223 - 1/25/2017
*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log_For_Delete' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_For_Delete]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	06/08/2015
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
--  Revision History: 
--  Initial Revision per SCR 14478- 06/08/2015
--  Upadted to add IsCoaching to return. TFS 5641 - 03/21/2017
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_For_Delete] 
@strFormIDin nvarchar(50)

AS

BEGIN

DECLARE	
  @intCoachID bigint,
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @intCoachID = (SELECT [CoachingID] FROM [EC].[Coaching_Log] WITH (NOLOCK) WHERE [FormName] = @strFormIDin);
	 	
IF @intCoachID IS NOT NULL		
  SET @nvcSQL = '
  SELECT [CoachingID] CoachingID,
    [FormName],
    veh.Emp_LanID EmpLanID,
    [EmpID],
    [SourceID],
    1 [isCoaching]
  FROM [EC].[Coaching_Log] cl WITH (NOLOCK)
  JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON cl.EmpID = veh.Emp_ID
  WHERE [FormName] = ''' + @strFormIDin + '''';
	 
ELSE
  SET @nvcSQL = '
  SELECT [WarningID] CoachingID,
    [FormName],
    veh.Emp_LanID EmpLanID,
    [EmpID],
    [SourceID],
    0 [isCoaching]
  FROM [EC].[Warning_Log] wl WITH (NOLOCK)
  JOIN [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) ON wl.EmpID = veh.Emp_ID
  WHERE [FormName] = ''' + @strFormIDin + '''';	 		

EXEC (@nvcSQL)
Print (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Coaching_Log_For_Delete
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/08/2014
--	Description: 	This procedure displays the Warning Log attributes for given Form Name. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 07/10/2015
--  Updated per SCR 14966 to add Hierarchy IDs to the select list.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log] @strFormIDin nvarchar(50)
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT wl.WarningID numID,
  wl.FormName strFormID,
  m.Module,
  ''Direct'' strFormType,
  ''Completed'' strFormStatus,
  wl.WarningGivenDate	EventDate,
  wl.SubmitterID strSubmitterID,
  wl.SupID strCLSupID,
  wl.MgrID strCLMgrID,
  wl.EmpID strEmpID,	
  vehSubmitter.Emp_LanID strSubmitter,		
  vehSubmitter.Emp_Name strSubmitterName,
  vehSubmitter.Emp_Email strSubmitterEmail,			
  veh.Emp_LanID strEmpLanID,
  veh.Emp_Name strCSRName,
  veh.Emp_Email strCSREmail,
  st.City strCSRSite,
  eh.Sup_ID strCSRSupID,
  veh.Sup_LanID strCSRSup,
  veh.Sup_Name strCSRSupName,
  veh.Sup_Email strCSRSupEmail,
  eh.Mgr_ID strCSRMgrID,
  veh.Mgr_LanID strCSRMgr,
  veh.Mgr_Name strCSRMgrName,
  veh.Mgr_Email strCSRMgrEmail,
  ''Warning'' strSource,
  wl.SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh ON veh.Emp_ID = eh.Emp_ID
JOIN [EC].[Warning_Log] wl ON [wl].[EMPID] = [eh].[Emp_ID]
JOIN [EC].[View_Employee_Hierarchy] vehSubmitter WITH (NOLOCK) ON [wl].[SubmitterID] = [vehSubmitter].[Emp_ID]
JOIN [EC].[DIM_Module] m ON [wl].[ModuleID] = [m].[ModuleID]
JOIN [EC].[DIM_Site] st ON [wl].[SiteID] = [st].[SiteID]
WHERE [wl].[FormName] = ''' + @strFormIDin + '''
ORDER BY [wl].[FormName]';

EXEC (@nvcSQL)
Print (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Warning_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/08/2014
--	Description: 	This procedure displays the Warning Log attributes for given Form Name. 
--  Last Updated By: Susmitha Palacherla
--  Last Modified Date: 07/10/2015
--  Updated per SCR 14966 to add Hierarchy IDs to the select list.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log] @strFormIDin nvarchar(50)
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT wl.WarningID numID,
  wl.FormName strFormID,
  m.Module,
  ''Direct'' strFormType,
  ''Completed'' strFormStatus,
  wl.WarningGivenDate	EventDate,
  wl.SubmitterID strSubmitterID,
  wl.SupID strCLSupID,
  wl.MgrID strCLMgrID,
  wl.EmpID strEmpID,	
  vehSubmitter.Emp_LanID strSubmitter,		
  vehSubmitter.Emp_Name strSubmitterName,
  vehSubmitter.Emp_Email strSubmitterEmail,			
  veh.Emp_LanID strEmpLanID,
  veh.Emp_Name strCSRName,
  veh.Emp_Email strCSREmail,
  st.City strCSRSite,
  eh.Sup_ID strCSRSupID,
  veh.Sup_LanID strCSRSup,
  veh.Sup_Name strCSRSupName,
  veh.Sup_Email strCSRSupEmail,
  eh.Mgr_ID strCSRMgrID,
  veh.Mgr_LanID strCSRMgr,
  veh.Mgr_Name strCSRMgrName,
  veh.Mgr_Email strCSRMgrEmail,
  ''Warning'' strSource,
  wl.SubmittedDate
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh ON veh.Emp_ID = eh.Emp_ID
JOIN [EC].[Warning_Log] wl ON [wl].[EMPID] = [eh].[Emp_ID]
JOIN [EC].[View_Employee_Hierarchy] vehSubmitter WITH (NOLOCK) ON [wl].[SubmitterID] = [vehSubmitter].[Emp_ID]
JOIN [EC].[DIM_Module] m ON [wl].[ModuleID] = [m].[ModuleID]
JOIN [EC].[DIM_Site] st ON [wl].[SiteID] = [st].[SiteID]
WHERE [wl].[FormName] = ''' + @strFormIDin + '''
ORDER BY [wl].[FormName]';

EXEC (@nvcSQL)
Print (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectReviewFrom_Warning_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectSurvey4Contact' 
)
   DROP PROCEDURE [EC].[sp_SelectSurvey4Contact]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Susmitha Palacherla
--	Create Date:	   8/21/2015
--	Description: 	   This procedure queries db for newly added Survey records to send out notification.
--  Created  per TFS 549 to setup CSR survey.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectSurvey4Contact]
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max),
  @strFormMail nvarchar (30);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
 
SET @nvcSQL = '
SELECT srh.SurveyID	SurveyID	
  ,srh.FormName	FormName
  ,srh.Status Status
  ,veh.Emp_Email	EmpEmail
  ,veh.Emp_Name EmpName
  ,srh.CreatedDate CreatedDate
  ,CONVERT(VARCHAR(10), DATEADD(dd, 5, srh.CreatedDate), 101) ExpiryDate
  ,srh.EmailSent EmailSent
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Survey_Response_Header] srh WITH (NOLOCK) ON veh.Emp_ID = srh.EmpID
WHERE srh.EmailSent = ''False''
ORDER BY srh.SurveyID';

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectSurvey4Contact
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_SelectSurvey4Reminder' 
)
   DROP PROCEDURE [EC].[sp_SelectSurvey4Reminder]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Susmitha Palacherla
--	Create Date:	   2/25/2016
--	Description: This procedure queries db for surveys active after 48 hrs to send reminders.
--  Created  per TFS 2052 to setup reminders for CSR survey.
--  TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectSurvey4Reminder]
AS

BEGIN

DECLARE	
  @intHrs int,
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @intHrs = 48;
 
SET @nvcSQL = '
SELECT srh.SurveyID	SurveyID	
  ,srh.FormName	FormName
  ,srh.Status Status
  ,veh.Emp_Email EmpEmail
  ,veh.Emp_Name EmpName
  ,srh.CreatedDate CreatedDate
  ,CONVERT(VARCHAR(10), DATEADD(dd, 5, srh.CreatedDate), 101) ExpiryDate
  ,srh.EmailSent EmailSent
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK) 
JOIN [EC].[Survey_Response_Header] srh WITH (NOLOCK) ON veh.Emp_ID = srh.EmpID
WHERE srh.[Status]= ''Open'' 
  AND DATEDIFF(HH, srh.[NotificationDate], GetDate()) > ''' + CONVERT(VARCHAR, @intHrs) + ''' 
ORDER BY srh.SurveyID';

EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	    
END --sp_SelectSurvey4Reminder
GO
/*
sp_Select_CoachingReasons_By_Module(02).sql
Last Modified Date: 1/18/2018
Last Modified By: Susmitha Palacherla

Version 02: --  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CoachingReasons_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/20/2014
--	Description: *	This procedure takes a Module 
--  and returns the Coaching Reasons associated with the Module. 
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 09/25/2014
-- Modified per SCR 13479 to add logic for incorporating WARNINGs.
-- Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module] 
@strModulein nvarchar(30), @strSourcein nvarchar(30), @isSplReason BIT, @splReasonPrty INT, @strCSRin nvarchar(30), @strSubmitterin nvarchar(30)

AS
BEGIN
	DECLARE	
	
	@nvcSQL nvarchar(max),
	@nvcDirectHierarchy nvarchar(10)

OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 
	
SET @nvcDirectHierarchy = [EC].[fn_strDirectUserHierarchy] (@strCSRin, @strSubmitterin, GETDATE())

--print @nvcDirectHierarchy
	
IF @isSplReason = 1 

IF @nvcDirectHierarchy = 'Yes'



SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = '''+ CONVERT(NVARCHAR,@splReasonPrty) + '''
Order by  [CoachingReasonID]'

Else

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = 2
Order by  [CoachingReason]'

ELSE

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 and 
IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 0
Order by  [CoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_CoachingReasons_By_Module


GO




/*
sp_Select_Employees_BySite_NotIn_Hist_ACL(02).sql
Last Modified Date: 03/20/2018
Last Modified By: Susmitha Palacherla

Version 02:  Added IS NOT NULL TO NOT IN Sub query - TFS 7856 - 03/20/2018
Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Employees_BySite_NotIn_Hist_ACL' 
)
   DROP PROCEDURE [EC].[sp_Select_Employees_BySite_NotIn_Hist_ACL]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Returns active records from Historical Dashboard ACL table
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--  Added IS NOT NULL TO NOT IN Sub query - TFS 7856 - 03/20/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Employees_BySite_NotIn_Hist_ACL]
@SiteId INT
AS


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

DECLARE 
@SiteCity nvarchar(30)

SET @SiteCity = (SELECT City FROM EC.DIM_SITE WHERE SiteID = @SiteId)

SELECT CONVERT(nvarchar(30),DecryptByKey(eh.Emp_LanID)) AS Emp_LanID, 
        CONVERT(nvarchar(50),DecryptByKey(eh.Emp_Name)) AS Emp_Name
FROM EC.Employee_Hierarchy eh
WHERE eh.Active = 'A'
AND eh.Emp_Site = @siteCity
AND CONVERT(nvarchar(30),DecryptByKey(eh.Emp_LanID))
NOT IN (SELECT CONVERT(nvarchar(30),DecryptByKey(User_LanID))
       FROM EC.Historical_Dashboard_ACL where End_Date = 99991231
       AND CONVERT(nvarchar(30),DecryptByKey(User_LanID)) IS NOT NULL)
       ORDER BY Emp_Name
	 


CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Select_Employees_BySite_NotIn_Hist_ACL




GO




/*
sp_Select_Employees_By_Module(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 01: Modified to support Encryption of sensitive data (Open keys and use employee View for emp attributes. TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Employees_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_Employees_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure pulls the list of Employee names to be displayed 
--  in the drop downs for the selected Module using the job_code in the Employee_Selection table.
--  Created to replace the sp_SelectCSRsbyLocation used by the original CSR Module 
--  Last Modified By: Susmitha Palacherla
--  Revision History:
--  Modified to restrict certain Training job codes from submitting ecls for certain Training job codes.SCR 14512 - 04/15/2015
--  Modified to support Encryption of sensitive data (Open keys and use employee View for emp attributes. TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Employees_By_Module] 

@strModulein nvarchar(30), @strCSRSitein nvarchar(30)= NULL,
@strUserLanin nvarchar(20)

AS

BEGIN
DECLARE	
@isBySite BIT,
@nvcEmpJobCode nvarchar(30),
@nvcEmpID nvarchar(10),
@dtmDate datetime,
@nvcSQL nvarchar(max),
@nvcSQL01 nvarchar(1000),
@nvcSQL02 nvarchar(1000),
@nvcSQL03 nvarchar(1000),
@nvcSQL04 nvarchar(1000)

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strUserLanin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)

-- General Selection of employees based on Job codes flagged in Employee Selection table.

SET @nvcSQL01 = 'SELECT VEH.[Emp_Name] + '' ('' + VEH.[Emp_LanID] + '') '' + EH.[Emp_Job_Description] as FrontRow1
	            ,VEH.[Emp_Name] + ''$'' + VEH.[Emp_Email] + ''$'' + VEH.[Emp_LanID] + ''$'' + VEH.[Sup_Name] + ''$'' + 
				 VEH.[Sup_Email] + ''$'' + VEH.[Sup_LanID] + ''$'' + EH.[Sup_Job_Description] + ''$'' + VEH.[Mgr_Name] + ''$'' + 
				 VEH.[Mgr_Email] + ''$'' + VEH.[Mgr_LanID] + ''$'' + EH.[Mgr_Job_Description]  + ''$'' + EH.[Emp_Site] as BackRow1, [Emp_Site]
 FROM [EC].[View_Employee_Hierarchy] VEH  WITH (NOLOCK)  JOIN  [EC].[Employee_Hierarchy]EH WITH (NOLOCK) 
 ON VEH.[Emp_ID]= EH.[Emp_ID] JOIN [EC].[Employee_Selection]
 ON EH.[Emp_Job_Code]= [EC].[Employee_Selection].[Job_Code]
WHERE [EC].[Employee_Selection].[is'+ @strModulein + ']= 1
AND VEH.[Emp_lanID] <> '''+@strUserLanin+ ''''


-- Conditional filter for Modules that are flagged as BySite in DIM Module

SET @nvcSQL02 = ' AND [Emp_Site] = ''' +@strCSRSitein + ''''


-- Conditional Filter to restrtict Training staff with specific job codes to submit only for certain job codes.

SET @nvcSQL03 = ' AND [Emp_Job_Code] NOT IN (''WTTR12'', ''WTTR13'', ''WTID13'')' 


-- Generic  Filter for all scenarios.

SET @nvcSQL04 = ' AND [End_Date] = ''99991231''
AND VEH.[Emp_LanID]is not NULL and VEH.[Sup_LanID] is not NULL and VEH.[Mgr_LanID]is not NULL
ORDER BY VEH.[Emp_Name] ASC'

--IF @strModulein = 'CSR'
SET @isBySite = (SELECT BySite FROM [EC].[DIM_Module] Where [Module] = @strModulein and isActive =1)
IF @isBySite = 1

SET @nvcSQL = @nvcSQL01 + @nvcSQL02 +@nvcSQL04 
ELSE

IF @nvcEmpJobCode IN ('WTTR12', 'WTTR13', 'WTID13') 

SET @nvcSQL = @nvcSQL01 + @nvcSQL03 + @nvcSQL04 

ELSE
SET @nvcSQL = @nvcSQL01 + @nvcSQL04 

--Print @nvcSQL

EXEC (@nvcSQL)	

CLOSE SYMMETRIC KEY [CoachingKey]  
END --sp_Select_Employees_By_Module





GO



/*
sp_Select_Modules_By_Job_Code(02).sql
Last Modified Date: 10/23/2017
Last Modified By: Susmitha Palacherla

Version 02: Modified to support Encryption of sensitive data (Open key)- TFS 7856 - 10/23/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Modules_By_Job_Code' 
)
   DROP PROCEDURE [EC].[sp_Select_Modules_By_Job_Code]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure takes the lan ID of the user and looks up the job code.
--  If Job code exists in the submisison table returns the valid submission modules.
--  If job code does not exist in the submisisons table returns 'CSR' as a valid sumission module.
--  Last Modified By: Susmitha Palacherla
--  Modified per TFS 861 to add Warnings to all Modules - 10/21/2015 
-- Modified per TFS 3877 to hard code Employee Ids for Mark Hackman and Scott Potter
-- to allow LSA and Training submissions which their job code does not have access to - 09/21/2016
--  Modified to support Encryption of sensitive data (Open key)- TFS 7856 - 10/23/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Modules_By_Job_Code] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@nvcCSR nvarchar(30),
	@dtmDate datetime

-- Open Symmetric Key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]  

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)

SET @nvcCSR = (SELECT CASE WHEN [CSR]= 1 THEN N'CSR' ELSE NULL END  as Module FROM [EC].[Module_Submission]
WHERE Job_Code = @nvcEmpJobCode)

--print @nvcCSR

if @nvcCSR is null


/*
 The BySite string below is a combination of the  following
 1. whether site will be a selection
 2. Module Name
 3. Module ID
 4. Whether CSE will be displayed or not
 5. Whether warning will be displayed for Direct or Not
 6.Whether program will be a selection or not
 7. whether behavior will be a selection or not
*/

SET @nvcSQL = 'SELECT TOP 1 CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1-1-1-0'' as BySite
from [EC].[Module_Submission]'
 
ELSE

SET @nvcSQL = 'SELECT Module, BySite FROM 
(SELECT CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1-1-1-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION
SELECT CASE WHEN [Supervisor]= 1 THEN N''Supervisor'' ELSE NULL END as Module, ''0-Supervisor-2-1-1-1-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [Quality]= 1 THEN N''Quality'' ELSE NULL END as Module, ''0-Quality Specialist-3-0-1-1-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [LSA]= 1 THEN N''LSA'' ELSE NULL END as Module, ''0-LSA-4-0-1-1-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''' OR '''+@nvcEmpID+''' in (''343549'',''408246'')
UNION 
SELECT CASE WHEN [Training]= 1 THEN N''Training'' ELSE NULL END as Module, ''0-Training-5-1-1-0-1'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''' OR '''+@nvcEmpID+''' in (''343549'',''408246''))AS Modulelist
where Module is not Null '
--Print @nvcSQL

EXEC (@nvcSQL)	

  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 

END --sp_Select_Modules_By_Job_Code

GO



/*
sp_Select_Questions_For_Survey(02).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Questions_For_Survey' 
)
   DROP PROCEDURE [EC].[sp_Select_Questions_For_Survey]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/24/2015
--	Description: This procedure returns a list of Questions and their display order 
-- to be displayed in the UI.
-- TFS 549 - CSR Survey Setup - 09/24/2015
-- Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Questions_For_Survey] 
@intSurveyID INT

AS
BEGIN
	DECLARE	
	@intSurveyTypeID INT,
	@isPilot BIT,
	@nvcSQL nvarchar(max)
	
SET @intSurveyTypeID = (SELECT [SurveyTypeID] FROM [EC].[Survey_Response_Header]
WHERE [SurveyID] = @intSurveyID)

SET @isPilot = (SELECT [EC].[fn_bitCheckIfPilotSurvey](@intSurveyID))

IF @isPilot = 0

BEGIN
SET @nvcSQL = 'SELECT DISTINCT Q.[QuestionID],Q.[Description],Q.[DisplayOrder],QA.[isHotTopic], Q.[isPilot]
			  FROM [EC].[Survey_DIM_Question]Q JOIN [EC].[Survey_DIM_QAnswer]QA
			  ON Q.QuestionID = QA.QuestionID
			  WHERE Q.[isActive]= 1 AND QA.[SurveyTypeID] = '''+CONVERT(NVARCHAR,@intSurveyTypeID)+'''
			  AND Q.[isPilot] = 0
			  ORDER BY [DisplayOrder]'
END

ELSE

BEGIN
SET @nvcSQL = 'SELECT DISTINCT Q.[QuestionID],Q.[Description],Q.[DisplayOrder],QA.[isHotTopic], Q.[isPilot]
			  FROM [EC].[Survey_DIM_Question]Q JOIN [EC].[Survey_DIM_QAnswer]QA
			  ON Q.QuestionID = QA.QuestionID
			  WHERE Q.[isActive]= 1 AND QA.[SurveyTypeID] = '''+CONVERT(NVARCHAR,@intSurveyTypeID)+'''
			  ORDER BY [DisplayOrder]'
END

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Questions_For_Survey



GO



/*
sp_Select_Rec_Employee_Hierarchy(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Rec_Employee_Hierarchy' 
)
   DROP PROCEDURE [EC].[sp_Select_Rec_Employee_Hierarchy]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Returns a record from Employee Hierarchy table table given an Employee ID.
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Rec_Employee_Hierarchy]
@employeeId nvarchar(10)
AS


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

SELECT [Emp_ID]
  	  ,CONVERT(nvarchar(70),DecryptByKey(Emp_Name)) AS [Emp_Name]
      ,CONVERT(nvarchar(50),DecryptByKey(Emp_Email)) AS [Emp_Email]
	  ,CONVERT(nvarchar(30),DecryptByKey(Emp_LanID)) AS [Emp_LanID]
      ,CONVERT(nvarchar(70),DecryptByKey(Sup_Name)) AS [Sup_Name]
	  ,CONVERT(nvarchar(50),DecryptByKey(Sup_Email)) AS [Sup_Email]
	  ,CONVERT(nvarchar(70),DecryptByKey(Mgr_Name)) AS [Mgr_Name]
	  ,CONVERT(nvarchar(50),DecryptByKey(Mgr_Email)) AS [Mgr_Email]
 FROM [EC].[Employee_Hierarchy]
 WHERE [Emp_ID]= @employeeId


CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Select_Rec_Employee_Hierarchy





GO

/*
sp_Select_Responses_By_Question(02).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Responses_By_Question' 
)
   DROP PROCEDURE [EC].[sp_Select_Responses_By_Question]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/24/2015
--	Description: This procedure returns a list of Questions Ids and all their possible Responses and their display order 
-- to be displayed in the UI.
-- TFS 549 - CSR Survey Setup - 09/24/2015
-- Modified during change to incorporate Pilot Question to fix ordering of responses. TFS 9511 - 01/23/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Responses_By_Question] 


AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max)
	


SET @nvcSQL = 'SELECT [QuestionID],[ResponseID],[ResponseValue]
			  FROM [EC].[Survey_DIM_QAnswer]
			  ORDER BY [QuestionID],[ResponseOrder]'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Responses_By_Question


GO




/*
sp_Select_Row_Historical_Dashboard_ACL(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Row_Historical_Dashboard_ACL' 
)
   DROP PROCEDURE [EC].[sp_Select_Row_Historical_Dashboard_ACL]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO







--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Returns a record from Historical Dashboard ACL table given a Row ID.
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Row_Historical_Dashboard_ACL]
@rowId INT
AS


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

	SELECT [Row_ID]
       	  ,CONVERT(nvarchar(30),DecryptByKey(User_LanID)) AS [User_LanID]
          ,CONVERT(nvarchar(50),DecryptByKey(User_Name))[User_Name]
          ,[Role]
    FROM [EC].[Historical_Dashboard_ACL]
	WHERE [Row_ID] = @rowId




CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Select_Row_Historical_Dashboard_ACL





GO



/*
sp_Select_Sources_For_Dashboard(02).sql
Last Modified Date: 1/18/2018
Last Modified By: Susmitha Palacherla

Version 02: --  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Sources_For_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_Select_Sources_For_Dashboard]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	03/06/2015
--	Description: *	This procedure selects Sources to be displayed in the dashboard
--  Source dropdown list.
--  Last Modified: 4/6/2016
--  Last Modified By: Susmitha Palacherla
--  Modified to add additional HR job code WHHR70 - TFS 1423 - 12/15/2015
--  Modified to reference table for HR job codes - TFS 2332 - 4/6/2016
--  Modified to support Encryption of sensitive data. TFS 7856 - 11/28/2017
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Sources_For_Dashboard] 
@strUserin nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@nvcDisplayWarnings nvarchar(5),
	@dtmDate datetime
	
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert] 		
	
SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@strUserin,@dtmDate)
SET @nvcDisplayWarnings = (SELECT ISNULL (EC.fn_strCheckIf_HRUser(@nvcEmpID),'NO')) 

-- Check users job code and show 'Warning' as a source only for HR users.
IF @nvcDisplayWarnings = 'YES'

SET @nvcSQL = 'SELECT X.SourceText, X.SourceValue FROM
(SELECT ''All Sources'' SourceText, ''%'' SourceValue, 01 Sortorder From [EC].[DIM_Source]
UNION
SELECT [SubCoachingSource] SourceText,  [SubCoachingSource] SourceValue, 02 Sortorder From [EC].[DIM_Source]
Where [SubCoachingSource] <> ''Unknown''
and [isActive]= 1)X
ORDER BY X.Sortorder'

ELSE

SET @nvcSQL = 'SELECT X.SourceText, X.SourceValue FROM
(SELECT ''All Sources'' SourceText, ''%'' SourceValue, 01 Sortorder From [EC].[DIM_Source]
UNION
SELECT  [SubCoachingSource] SourceText,  [SubCoachingSource] SourceValue, 02 Sortorder From [EC].[DIM_Source]
Where [SubCoachingSource] not in ( ''Warning'',''Unknown'')
and [isActive]= 1)X
ORDER BY X.Sortorder'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Sources_For_Dashboard

GO



/*
sp_Select_SurveyDetails_By_SurveyID(02).sql
Last Modified Date: 01/23/2018
Last Modified By: Susmitha Palacherla

Version 02: Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_SurveyDetails_By_SurveyID' 
)
   DROP PROCEDURE [EC].[sp_Select_SurveyDetails_By_SurveyID]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	09/24/2015
--	Description: Given a survey ID this procedure returns the details of the Survey like
-- the Employee ID, eCL Form Name and whether or not a Hot Topic question is associated with this Survey.
-- TFS 549 - CSR Survey Setup - 09/24/2015
-- Modified to incorporate Pilot Question. TFS 9511 - 01/23/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_SurveyDetails_By_SurveyID] 
@intSurveyID INT

AS
BEGIN
	DECLARE	
	--@intSurveyTypeID INT,
	@hasHotTopic BIT,
	@hasPilot BIT,
	@nvcSQL nvarchar(max)
	
--SET @intSurveyTypeID = (SELECT [SurveyTypeID] FROM [EC].[Survey_Response_Header]
--WHERE [SurveyID] = @intSurveyID)
	
SET @hasHotTopic = (SELECT [EC].[fn_bitCheckIfHotTopicSurvey](@intSurveyID))
SET @hasPilot = (SELECT [EC].[fn_bitCheckIfPilotSurvey](@intSurveyID))



SET @nvcSQL = 'SELECT SRH.[EmpID],
					  SRH.[FormName],
					  SRH.[Status],
					  '+CONVERT(NVARCHAR,@hasHotTopic)+' hasHotTopic,
					   '+CONVERT(NVARCHAR,@hasPilot)+' hasPilot
			  FROM [EC].[Survey_Response_Header]SRH
			  WHERE [SurveyID] = '+CONVERT(NVARCHAR,@intSurveyID)+''
			 


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_SurveyDetails_By_SurveyID

GO



/*
sp_Select_Users_Historical_Dashboard_ACL(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Users_Historical_Dashboard_ACL' 
)
   DROP PROCEDURE [EC].[sp_Select_Users_Historical_Dashboard_ACL]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--	====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Returns active records from Historical Dashboard ACL table
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Users_Historical_Dashboard_ACL]

AS


OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]


BEGIN

	SELECT [Row_ID]
       	  ,CONVERT(nvarchar(30),DecryptByKey(User_LanID)) AS [User_LanID]
          ,CONVERT(nvarchar(70),DecryptByKey(User_Name))[User_Name]
          ,[Role]
    FROM [EC].[Historical_Dashboard_ACL]
	WHERE [End_Date]='99991231'




CLOSE SYMMETRIC KEY [CoachingKey]      
END --sp_Select_Users_Historical_Dashboard_ACL




GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update1Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update1Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:      11/16/12
--    Description: *    This procedure allows supervisors to update the e-Coaching records from review page. 
--    Updated per TFS 115/118 to fix issue with Coaching Notes overwritten - 07/22/2015
--    Updated per TFS 1709 Admin tool setup to reset reassign count  - 5/2/2016
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update1Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @nvcReviewSupLanID Nvarchar(20),
  @dtmSupReviewedAutoDate datetime,
  @nvctxtCoachingNotes Nvarchar(max) 
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
DECLARE @nvcReviewSupID Nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
SET @nvcReviewSupID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewSupLanID, GETDATE());
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_SupID = @nvcReviewSupID,
  SupReviewedAutoDate = @dtmSupReviewedAutoDate,
  CoachingNotes = @nvctxtCoachingNotes,
  ReassignCount = 0
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update1Review_Coaching_Log
GO

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update2Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update2Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:      11/16/11
--    Description: *    This procedure allows managers to update the e-Coaching records from the review page with Yes, this is a confirmed Customer Service Escalation. 
--    Updated per TFS 115/118 to fix issue with Coaching Notes overwritten - 07/22/2015
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update2Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @nvcReviewMgrLanID Nvarchar(20),
  @dtmMgrReviewAutoDate datetime,
  @dtmMgrReviewManualDate datetime,
  @bitisCSE bit,
  @nvctxtMgrNotes nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY 

DECLARE @nvcReviewMgrID Nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];   
SET @nvcReviewMgrID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewMgrLanID, GETDATE());
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
      
UPDATE [EC].[Coaching_Log]
SET
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_MgrID = @nvcReviewMgrID,
  MgrReviewAutoDate = @dtmMgrReviewAutoDate,
  MgrReviewManualDate = @dtmMgrReviewManualDate,
  isCSE = @bitisCSE,
  MgrNotes = @nvctxtMgrNotes,
  ReassignCount = 0
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);

COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update2Review_Coaching_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update3Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update3Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:     11/16/12
--    Description:    This procedure allows managers to update the e-Coaching records from the review page with No, this is not a confirmed Customer Service Escalation. 
--    Updated per SCR 13891 to capture review mgr id - 12/16/2014
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE  PROCEDURE [EC].[sp_Update3Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @nvcReviewMgrLanID Nvarchar(20),
  @dtmMgrReviewAutoDate datetime,
  @dtmMgrReviewManualDate datetime,
  @bitisCSE bit,
  @nvcMgrNotes Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
DECLARE @nvcReviewMgrID Nvarchar(10);
       
-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];   
SET @nvcReviewMgrID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewMgrLanID, GETDATE());
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];
	
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_MgrID = @nvcReviewMgrID,
  isCSE = @bitisCSE,
  MgrReviewAutoDate = @dtmMgrReviewAutoDate,
  MgrReviewManualDate = @dtmMgrReviewManualDate,
  MgrNotes = @nvcMgrNotes,
  ReassignCount = 0
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);	
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update3Review_Coaching_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update4Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update4Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:     11/16/12
--    Description:    This procedure allows csrs to update the e-Coaching records from the review page. 
--    Last Update:    03/04/2014
--    Updated per SCR 12359 to handle deadlocks with retries.
--    Last Update:    03/17/2014 - Modified for eCoachingDev DB
--    Last Update:    03/25/2014 - Modified Update query
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update4Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @bitisCSRAcknowledged bit,
  @nvcCSRComments Nvarchar(max),
  @dtmCSRReviewAutoDate datetime
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  isCSRAcknowledged = @bitisCSRAcknowledged,
  CSRReviewAutoDate = @dtmCSRReviewAutoDate,
  CSRComments = @nvcCSRComments
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);	
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update4Review_Coaching_Log
GO
/*
sp_Update5Review_Coaching_Log(03).sql
Last Modified Date: 06/01/2017
Last Modified By: Susmitha Palacherla

Version 03: Updated to increase size for
param @nvcstrReasonNotCoachable to 100 - TFS 6881 - 06/01/2017

Version 02: New Breaks BRN and BRL feeds - TFS 6145 - 4/13/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update5Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:    11/16/2012
--    Description:    This procedure allows managers to update the e-Coaching records from the review page for Outlier records. 
--    Updated per TFS 644 to add IAE and IAT reports - 09/17/2015
--    Updated per TFS 2145 to reset Email reminder attributes for OMR logs  - 3/2/2016
--    Updated per TFS 1732 to support Training sdr  feed  - 3/4/2016
--    Updated per TFS 2283 to support Training odt feed  - 3/22/2016
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    Updated per TFS 6145  to support Training brl and brn feeds  - 4/13/2017
--    Updated per TFS 6881 to increase size for param @nvcstrReasonNotCoachable to 100 - 06/01/2017
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @nvcstrReasonNotCoachable Nvarchar(100),
  @nvcReviewerLanID Nvarchar(20),
  @dtmReviewAutoDate datetime,
  @dtmReviewManualDate datetime,
  @bitisCoachingRequired bit,
  @nvcReviewerNotes Nvarchar(max),
  @nvctxtReasonNotCoachable Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
DECLARE 
  @nvcReviewerID Nvarchar(10),
  @nvcCat Nvarchar (10);

SET @nvcCat = (SELECT RTRIM(LEFT(strReportCode, LEN(strReportCode) - 8)) FROM EC.Coaching_Log WHERE FormName = @nvcFormID) 

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 
SET @nvcReviewerID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewerLanID, GETDATE());
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

IF @nvcCat IN ('OAE','OAS', 'IAE','IAT', 'SDR','ODT','BRL','BRN')
BEGIN      
  UPDATE EC.Coaching_Log
  SET 
    StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
    Review_SupID = @nvcReviewerID,
    strReasonNotCoachable = @nvcstrReasonNotCoachable,
    isCoachingRequired = @bitisCoachingRequired,
    SupReviewedAutoDate =  @dtmReviewAutoDate,
    CoachingDate =  @dtmReviewManualDate,
    CoachingNotes = @nvcReviewerNotes,		   
    txtReasonNotCoachable = @nvctxtReasonNotCoachable,
    ReassignCount = 0 
  WHERE FormName = @nvcFormID
  OPTION (MAXDOP 1);
  
  UPDATE EC.Coaching_Log_Reason
  SET 
    Value = (CASE WHEN @bitisCoachingRequired = 'True' THEN 'Opportunity' ELSE 'Not Coachable' END)
  FROM EC.Coaching_Log cl 
  INNER JOIN EC.Coaching_Log_Reason clr ON cl.CoachingID = clr.CoachingID
  WHERE cl.FormName = @nvcFormID
    AND clr.SubCoachingReasonID IN (120, 121, 29, 231, 232, 233, 238, 239)
  OPTION (MAXDOP 1);
END

ELSE
BEGIN
  UPDATE EC.Coaching_Log
  SET
    StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
    Review_MgrID = @nvcReviewerID,
    strReasonNotCoachable = @nvcstrReasonNotCoachable,
    isCoachingRequired = @bitisCoachingRequired,
    MgrReviewAutoDate = @dtmReviewAutoDate,
    MgrReviewManualDate = @dtmReviewManualDate,
    MgrNotes = @nvcReviewerNotes,		   
    txtReasonNotCoachable = @nvctxtReasonNotCoachable, 
    ReminderSent = 0,
    ReminderDate = NULL,
    ReminderCount = 0,
    ReassignCount = 0 
  WHERE FormName = @nvcFormID
  OPTION (MAXDOP 1);

  UPDATE EC.Coaching_Log_Reason
    SET 
	  Value = (CASE WHEN @bitisCoachingRequired = 'True' THEN 'Opportunity' ELSE 'Not Coachable' END)
  FROM EC.Coaching_Log cl 
  INNER JOIN EC.Coaching_Log_Reason clr ON cl.CoachingID = clr.CoachingID
  INNER JOIN EC.DIM_Coaching_Reason cr ON cr.CoachingReasonID = clr.CoachingReasonID
  WHERE cl.FormName = @nvcFormID
    AND cr.CoachingReason IN ('OMR / Exceptions', 'Current Coaching Initiative')
  OPTION (MAXDOP 1);
END -- End IF @nvcCat IN ('OAE','OAS', 'IAE','IAT', 'SDR','ODT','BRL','BRN')
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update5Review_Coaching_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update6Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update6Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:         Jourdain Augustin
--    Create Date:    7/31/13
--    Description:    This procedure allows csrs to update the e-Coaching records from the review page --    for Pending Acknowledgment records. 
--    Last Update:    11/02/2015
--    Updated per TFS 864 to open CSR comments for all ecls
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update6Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @bitisCSRAcknowledged bit,
  @dtmCSRReviewAutoDate datetime,
  @nvcCSRComments Nvarchar(max)
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE Status = @nvcFormStatus),
  isCSRAcknowledged = @bitisCSRAcknowledged,
  CSRReviewAutoDate = @dtmCSRReviewAutoDate,
  CSRComments = @nvcCSRComments
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update6Review_Coaching_Log
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Update7Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update7Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:                 Jourdain Augustin
--    Create Date:      7/31/13
--    Description: *    This procedure allows Sups to update the e-Coaching records from the review page for Pending Acknowledgment records. 
--    Last Update:    12/16/2014
--    Updated per SCR 13891 to capture review sup id.
--    TFS 7856 encryption/decryption - emp name, emp lanid, email
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update7Review_Coaching_Log]
(
  @nvcFormID Nvarchar(50),
  @nvcFormStatus Nvarchar(30),
  @nvcReviewSupLanID Nvarchar(20),
  @dtmSUPReviewAutoDate datetime
)
AS

BEGIN

DECLARE @RetryCounter INT;
SET @RetryCounter = 1;

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;

BEGIN TRY
DECLARE @nvcReviewSupID Nvarchar(10);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];
SET @nvcReviewSupID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewSupLanID, GETDATE());
-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

UPDATE [EC].[Coaching_Log]
SET 
  StatusID = (SELECT StatusID FROM EC.DIM_Status WHERE status = @nvcFormStatus),
  Review_SupID = @nvcReviewSupID,
  SUPReviewedAutoDate = @dtmSUPReviewAutoDate
WHERE FormName = @nvcFormID
OPTION (MAXDOP 1);
	
COMMIT TRANSACTION;
END TRY

BEGIN CATCH
  ROLLBACK TRANSACTION;
  
  DECLARE @DoRetry bit; -- Whether to Retry transaction or not
  DECLARE @ErrorMessage NVARCHAR(4000);
  DECLARE @ErrorSeverity INT;
  DECLARE @ErrorState INT;

  SELECT   
    @ErrorMessage = ERROR_MESSAGE(),  
    @ErrorSeverity = ERROR_SEVERITY(),  
    @ErrorState = ERROR_STATE();
    
  SET @doRetry = 0;
	
  IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
  BEGIN
    SET @doRetry = 1;      -- Set @doRetry to 1 only for Deadlock
  END

  IF @DoRetry = 1
  BEGIN
    SET @RetryCounter = @RetryCounter + 1; -- Increment Retry Counter By one
    IF (@RetryCounter > 3)                 -- Check whether Retry Counter reached to 3
    BEGIN
      -- Raise Error Message if still deadlock occurred after three retries
	  RAISERROR(@ErrorMessage, 18, 1); 
	END
    ELSE
    BEGIN
      WAITFOR DELAY '00:00:00.05'; -- Wait for 5 ms
      GOTO RETRY;	               -- Go to Label RETRY
    END
  END
  ELSE -- @DoRetry = 0, not deadlock error
  BEGIN
    RAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState);
  END -- ELSE
END CATCH;

END --sp_Update7Review_Coaching_Log
GO
/*
sp_UpdateHistorical_Dashboard_ACL_EndDate(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_UpdateHistorical_Dashboard_ACL_EndDate' 
)
   DROP PROCEDURE [EC].[sp_UpdateHistorical_Dashboard_ACL_EndDate]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--    ====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Updates End Date for a given record in Historical Dashboard ACL table
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018 
--    =====================================================================
CREATE PROCEDURE [EC].[sp_UpdateHistorical_Dashboard_ACL_EndDate]
(
       @endDate INT,
	   @rowId INT,
	   @updatedBy nvarchar(30)
)

AS
BEGIN

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]
            
       UPDATE [EC].[Historical_Dashboard_ACL]
	   SET [End_Date] = @endDate, 
	   [Updated_By] = EncryptByKey(Key_GUID('CoachingKey'),  @updatedBy)
	   WHERE Row_ID = @rowId
  
	    
END -- [sp_UpdateHistorical_Dashboard_ACL_EndDate] 




GO



/*
sp_UpdateHistorical_Dashboard_ACL_Role(01).sql
Last Modified Date: 01/18/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 01/18/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_UpdateHistorical_Dashboard_ACL_Role' 
)
   DROP PROCEDURE [EC].[sp_UpdateHistorical_Dashboard_ACL_Role]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






--    ====================================================================
--	Author:	Susmitha Palacherla
--	Create Date: 01/18/2018
--	Description: Updates Role for a given record in Historical Dashboard ACL table
--  Revision History:    
--  Initial Revision. Created to replace embedded sql in UI code during encryption of sensitive data. TFS 7856. 01/18/2018 
--    =====================================================================
CREATE PROCEDURE [EC].[sp_UpdateHistorical_Dashboard_ACL_Role]
(
      @role nvarchar(30),
	  @rowId INT,
	  @updatedBy  nvarchar(30)
)

AS
BEGIN

OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert]
            
       UPDATE [EC].[Historical_Dashboard_ACL]
	   SET [Role] = @role,
	   [Updated_By] = EncryptByKey(Key_GUID('CoachingKey'), @updatedBy)
	   WHERE Row_ID = @rowId
  
CLOSE SYMMETRIC KEY [CoachingKey]  	    
END -- [sp_UpdateHistorical_Dashboard_ACL_Role] 



GO



/*
sp_Update_EmployeeID_To_LanID(02).sql
Last Modified Date:  11/27/2017
Last Modified By: Susmitha Palacherla


Version 02: Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_EmployeeID_To_LanID' 
)
   DROP PROCEDURE [EC].[sp_Update_EmployeeID_To_LanID]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date: 02/03/2014
-- Description:	Performs the following actions.
-- Adds an End Date to an Employee ID to lan ID combination that is different from the existing record.
-- Inserts new records for the changed and new combinations.
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 07/25/2014
-- Modified to fix logic per SCR 12983.
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_EmployeeID_To_LanID] 
AS
BEGIN

DECLARE @dtNow DATETIME
SET @dtNow = GETDATE()

 -- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert];  
  
  -- Assigns End_Date to an Employee ID to Lan ID link for Termed Users
  

BEGIN
  ;WITH OpenRecords AS
  (SELECT * FROM [EC].[EmployeeID_To_LanID]LAN
   WHERE EndDate = 99991231)
  
	  UPDATE LAN
	  SET [EndDate] = [End_Date],
	  [DatetimeLastUpdated]= @dtNow
	  FROM [EC].[Employee_Hierarchy]EH 
	  JOIN OpenRecords LAN
	  ON EH.[Emp_ID]= LAN.[EmpID]
	  WHERE LAN.[EndDate] = '99991231'
	  AND EH.[Active]in ('T', 'D')
OPTION (MAXDOP 1)
END


PRINT N'STEP1'
WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

-- Inserts links for new Employee IDs 

BEGIN
         INSERT INTO [EC].[EmployeeID_To_LanID]
			   ([EmpID]
			   ,[StartDate]
			   ,[EndDate]
			   ,[LanID]
			   ,[DatetimeInserted]
			   ,[DatetimeLastUpdated])
			   
		(SELECT
			   Emp_ID,
			   Start_Date,
			   End_Date,
			   Emp_LanID,
			   @dtNow ,
			   @dtNow 
			   FROM [EC].[Employee_Hierarchy]EH WHERE EH.[ACTIVE] NOT IN ('T','D')
			   AND NOT EXISTS
			   (SELECT EMPID FROM [EC].[EmployeeID_To_LanID]LAN
			   WHERE EH.[Emp_ID]= LAN.[EmpID]))
			
OPTION (MAXDOP 1)
END


PRINT N'STEP2'
WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms  

  
-- Inserts links for new Employee IDs to Lan ID Pair

BEGIN
        INSERT INTO [EC].[EmployeeID_To_LanID]
			   ([EmpID]
			   ,[StartDate]
			   ,[EndDate]
			   ,[LanID]
			   ,[DatetimeInserted]
			   ,[DatetimeLastUpdated])
			   
		(SELECT
			   Emp_ID,
			   CONVERT(nvarchar(10),@dtNow,112),
			   End_Date,
			   Emp_LanID,
			   @dtNow ,
			   @dtNow 
			   FROM [EC].[Employee_Hierarchy]EH LEFT OUTER JOIN [EC].[EmployeeID_To_LanID]LAN
			   ON  CONVERT(nvarchar(30),DecryptByKey(EH.[Emp_LanID]))= CONVERT(nvarchar(30),DecryptByKey(LAN.[LanID]))
			   AND EH.[Emp_ID]= LAN.[EmpID]
			   WHERE LAN.[LanID]IS NULL
			   AND EH.[Emp_LanID] IS NOT NULL
			   AND EH.[ACTIVE] NOT IN ('T','D'))
OPTION (MAXDOP 1)
END

PRINT N'STEP3'
WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

    

-- Inserts a new link for a rehired Employee using the same lanid

BEGIN
 ;WITH OpenRecords AS
    (SELECT * FROM [EC].[EmployeeID_To_LanID]LAN
     WHERE EndDate = 99991231)
   
   
   INSERT INTO [EC].[EmployeeID_To_LanID]
			   ([EmpID]
			   ,[StartDate]
			   ,[EndDate]
			   ,[LanID]
			   ,[DatetimeInserted]
			   ,[DatetimeLastUpdated])
   
  (SELECT
			   Emp_ID,
			   Start_Date,
			   End_Date,
			   Emp_LanID,
			   @dtNow ,
			   @dtNow 
			   FROM [EC].[Employee_Hierarchy]EH WHERE EH.[ACTIVE] NOT IN ('T','D', 'L', 'P')
			   AND EMP_ID NOT IN
			   (SELECT EMP_ID FROM OpenRecords LAN
			   WHERE EH.[Emp_ID]= LAN.[EmpID]))


OPTION (MAXDOP 1)
END

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	 

PRINT N'STEP4'
END --sp_Update_EmployeeID_To_LanID



GO



/*
sp_Update_Employee_Hierarchy_Stage(04).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 04:Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017

Version 03: Updated to revise logic for supporting reused numeric part of Employee ID per TFS 8228 - 9/22/2017

Version 02: Updated to support reused numeric part of Employee ID per TFS 6011 - 03/21/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Employee_Hierarchy_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Employee_Hierarchy_Stage]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 12/2/2013
-- Description:	Performs the following actions.
-- Deletes records with missing Employee IDs
-- Removes Alpha characters from first 2 positions of Sup_EMP_ID, Mgr_Emp_ID
-- and all leading and trainilin spaces from the IDs
-- Removes # from LanID and Email address of inactive employees
-- Inserts Employee Ids Reusing the numeric part of an existing Employee ID into a tracking table
-- Removes Alpha characters from first 2 positions of all Emp_IDs 
-- that do not need the prefix retained for uniqueness.
-- Removes leading and Trailing spaces from emp and Sup Ids from eWFM staging table.
-- Updates CSR Sup ID values with the SUP from WFM
-- Deletes records with Missing SUP IDs
-- Populates Supervisor attributes
-- Populates Manager attributes
--Revision History:
-- Updated per TFS 641 to trim leading and trailing spaces in Employee and Supervisor Ids 
-- from eWFM and PeopleSoft before using in Employee Hierarchy table - 09/03/2015
-- Updated to support reused numeric part of Employee ID per TFS 6011 - 03/21/2017
-- Updated to revise logic for supporting reused numeric part of Employee ID per TFS 8228 - 9/22/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Employee_Hierarchy_Stage] 
AS
BEGIN

DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 



-- Encrypt name and LanID in Emp ID TO Sup ID Aspect data Staging table


BEGIN
UPDATE [EC].[EmpID_To_SupID_Stage]
SET [Emp_Name] = EncryptByKey(Key_GUID('CoachingKey'), [Emp_Name_Drop])
,[Emp_LanID]= EncryptByKey(Key_GUID('CoachingKey'), [Emp_LanID_Drop])
WHERE [Emp_Name] IS NULL AND [Emp_LanID]IS NULL
 
OPTION (MAXDOP 1)
END  
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms



-- Set Unecctypted name and Lan ID to NULL in Emp ID TO Sup ID Aspect data Staging table

BEGIN

UPDATE [EC].[EmpID_To_SupID_Stage]
SET [Emp_Name_Drop] = NULL
,[Emp_LanID_Drop]= NULL
 
OPTION (MAXDOP 1)
END  
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms


-- Delete records where Employee ID is a missing or a blank.
BEGIN
DELETE FROM [EC].[Employee_Hierarchy_Stage]
WHERE EMP_ID = ' ' or  EMP_ID is NULL
OPTION (MAXDOP 1)
END
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

-- Populate Emp_Name with Primary Name where No preferred Name populated.

BEGIN
UPDATE [EC].[Employee_Hierarchy_Stage]
SET [Emp_Name] = [Emp_Pri_Name]
WHERE LTRIM(RTRIM(Emp_Name)) = ','
 
OPTION (MAXDOP 1)
END  
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms


-- Removes Alpha characters from first 2 positions of Sup_EMP_ID, Mgr_Emp_ID
-- and removes all leading and trailing spaces.
-- Removes # from LanID and Email address of inactive employees
BEGIN
UPDATE [EC].[Employee_Hierarchy_Stage]
SET [Sup_EMP_ID]= [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM([Sup_EMP_ID])),' ','')),
    [Mgr_Emp_ID]= [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM([Mgr_Emp_ID])),' ','')),
    [Emp_LanID]= REPLACE([Emp_LanID], '#',''),
    [Emp_Email]= REPLACE([Emp_Email], '#','')
 
OPTION (MAXDOP 1)
END  
 WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

-- Updates Hierarchy table to populate Hire_date with Start_Date and Employee ID with prefix if
-- record available in Staging table
BEGIN
UPDATE eh
SET  [Emp_ID_Prefix] = hs.[Emp_ID]
,[Hire_Date]= CONVERT(nvarchar(8),hs.[Hire_Date],112)
From [EC].[Employee_hierarchy] eh Join [EC].[Employee_Hierarchy_Stage]hs
ON REPLACE(LTRIM(RTRIM(eh.[Emp_ID])),' ','') = [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM(HS.[Emp_ID])),' ',''))
AND ([EC].[fn_strEmpFirstNameFromEmpName] (hs.Emp_Pri_Name) = [EC].[fn_strEmpFirstNameFromEmpName] (CONVERT(nvarchar(50),DecryptByKey(eh.Emp_Pri_Name)))
 OR [EC].[fn_strEmpLastNameFromEmpName] (hs.Emp_Pri_Name) =[EC].[fn_strEmpLastNameFromEmpName] (CONVERT(nvarchar(50),DecryptByKey(eh.emp_Pri_Name))))
 Where eh.Emp_ID_Prefix like 'WX%'
 
OPTION (MAXDOP 1)
END  
 WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms


 -- Inserts Employee Ids sharing the numeric part of an existing Employee IDs
 -- into a tracking table

BEGIN
INSERT INTO [EC].[Employee_Ids_With_Prefixes]
	([Emp_ID],[Emp_Name],[Emp_LanID],[Start_Date],[Inserted_Date])

     SELECT S.[Emp_ID],
	   S.[Emp_Name],
	   S.[Emp_LanID],
	   S.[Start_Date],
	   GETDATE()[Inserted_Date]
 FROM 
 (SELECT HS.[Emp_ID],
		EncryptByKey(Key_GUID('CoachingKey'), HS.[Emp_Name])[Emp_Name],
		EncryptByKey(Key_GUID('CoachingKey'), HS.[Emp_LanID])[Emp_LanID],
		HS.[Start_Date]
  FROM [EC].[Employee_Hierarchy_Stage]HS LEFT OUTER JOIN[EC].[Employee_Hierarchy]H
  ON [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM(HS.[Emp_ID])),' ',''))= H.[Emp_ID]
	  WHERE CONVERT(nvarchar(8),HS.[Hire_Date],112) <> H.Hire_Date
	  AND REPLACE(LTRIM(RTRIM(HS.[Emp_ID_Prefix])),' ','') <> REPLACE(LTRIM(RTRIM(H.[Emp_ID_Prefix])),' ','')
	  AND HS.[Emp_ID] NOT IN 
 (SELECT DISTINCT EMPID FROM [EC].[EmployeeID_To_LanID])
 )S LEFT OUTER JOIN [EC].[Employee_Ids_With_Prefixes]PE
 ON S.Emp_ID = PE.Emp_ID
 WHERE PE.Emp_ID IS NULL
 
OPTION (MAXDOP 1)
END 
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

-- Removes Alpha characters from first 2 positions of Emp_ID
-- and removes all leading and trailing spaces for those Employees
-- that do not need the prefix retained for uniqueness.

BEGIN
UPDATE [EC].[Employee_Hierarchy_Stage]
SET [Emp_ID]= [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM([Emp_ID])),' ',''))
WHERE [Emp_ID] NOT IN
 (SELECT DISTINCT [Emp_ID]FROM [EC].[Employee_Ids_With_Prefixes])
 
OPTION (MAXDOP 1)
END  
 WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

-- Remove leading and trailing spaces from Emp and Sup Ids from EWFM.
BEGIN
UPDATE [EC].[EmpID_To_SupID_Stage]
SET [Emp_ID]= REPLACE(LTRIM(RTRIM([Emp_ID])),' ',''),
   [Sup_ID]= REPLACE(LTRIM(RTRIM([Sup_ID])),' ','')
END
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms

    
-- Set Sup_Emp_ID  and Program for CSRs from WFM
BEGIN
UPDATE [EC].[Employee_Hierarchy_Stage]
SET [Sup_Emp_ID] = [Sup_ID],
[Emp_Program]= 
CASE WHEN WFMSUP.[Emp_Program]like 'FFM%'
THEN 'Marketplace' ELSE 'Medicare' END
FROM [EC].[EmpID_To_SupID_Stage] WFMSUP JOIN [EC].[Employee_Hierarchy_Stage]HS
ON WFMSUP.Emp_ID = HS.Emp_ID
WHERE HS.[Emp_Job_Code]in ('WACS01','WACS02','WACS03')
OPTION (MAXDOP 1)
END
WAITFOR DELAY '00:00:00.02' -- Wait for 2 ms




-- Update Mgr_Emp_ID to be Supervisor's supervisor
BEGIN
UPDATE [EC].[Employee_Hierarchy_Stage]
SET Mgr_Emp_ID =[EC].[fn_strMgrEmpIDFromEmpID] (Emp_ID)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms


-- This will ensure that all users with missing sup id and mgr id will not be in the Employee_Hierarchy table.
BEGIN
DELETE FROM [EC].[Employee_Hierarchy_Stage]
WHERE [Sup_Emp_ID] = ' ' or  [Sup_Emp_ID] is NULL or [Mgr_Emp_ID] = ' ' or  [Mgr_Emp_ID] is NULL
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

-- Populates Supervisor attributes
BEGIN 
UPDATE Emp
    SET [Sup_Name]= Sup.[Emp_Name],
    [Sup_Email]= Sup.[Emp_Email],
    [Sup_Job_Code]= Sup.[Emp_Job_Code],
    [Sup_Job_Description]= Sup.[Emp_Job_Description],
    [Sup_LanID]= Sup.[Emp_LanID]
   FROM [EC].[Employee_Hierarchy_Stage] as Emp Join [EC].[Employee_Hierarchy_Stage]as Sup
    ON Emp.[Sup_Emp_ID]= Sup.[EMP_ID]
OPTION (MAXDOP 1)
 END
 
 WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Populates Manager attributes
BEGIN    
 UPDATE Emp
    SET [Mgr_Name]= Mgr.[Emp_Name],
    [Mgr_Email]= Mgr.[Emp_Email],
    [Mgr_Job_Code]= Mgr.[Emp_Job_Code],
    [Mgr_Job_Description]= Mgr.[Emp_Job_Description],
    [Mgr_LanID]= Mgr.[Emp_LanID]
    FROM [EC].[Employee_Hierarchy_Stage] as Emp Join [EC].[Employee_Hierarchy_Stage]as Mgr
    ON Emp.[Mgr_Emp_ID]= Mgr.[EMP_ID]
OPTION (MAXDOP 1)
END


-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	 

COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

END  -- [EC].[sp_Update_Employee_Hierarchy_Stage]

GO



/*
sp_Update_ETS_Coaching_Stage(04).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla

Version 04: Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017

Version 03: Updated to incorporate HNC and ICC Reports per TFS 7174 - 07/24/2017

Version 02: Updated to support reused numeric part of Employee ID per TFS 6011 - 03/21/2017

Version 01: Document Initial Revision - TFS 5223 - 1/18/2017

*/

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_ETS_Coaching_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_ETS_Coaching_Stage]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 10/30/2014
-- Description:	Performs the following actions.
-- Removes Alpha characters from first 2 positions of Emp_ID
-- Populate Employee and Hierarchy attributes from Employee Table
-- Inserts non CSR and supervisor records into Rejected table
-- Deletes rejected records.
-- Sets the detailed Description value by concatenating other attributes.
-- Revision History
-- Last Modified By - Susmitha Palacherla
-- Modified per scr 14031 to incorporate the compliance reports - 01/05/2015
-- Updated to support reused numeric part of Employee ID per TFS 6011 - 03/21/2017
-- Modified to incorporate HNC and ICC Reports - TFS 7174 - 07/21/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_ETS_Coaching_Stage] 
@Count INT OUTPUT
AS
BEGIN

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Emp_ID]= [EC].[RemoveAlphaCharacters](REPLACE(LTRIM(RTRIM([Emp_ID])),' ',''))
WHERE [Emp_ID] NOT IN
 (SELECT DISTINCT [Emp_ID]FROM [EC].[Employee_Ids_With_Prefixes])
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms
    
-- Populate Attributes from Employee Table
BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [Emp_LanID] = CONVERT(nvarchar(30),DecryptByKey(EMP.[Emp_LanID]))
    ,[Emp_Site]= EMP.[Emp_Site]
    ,[Emp_Program]= EMP.[Emp_Program]
    ,[Emp_SupID]= EMP.[Sup_ID]
    ,[Emp_MgrID]= EMP.[Mgr_ID]
    ,[Emp_Role]= 
    CASE WHEN EMP.[Emp_Job_Code]in ('WACS01', 'WACS02','WACS03') THEN 'C'
    WHEN EMP.[Emp_Job_Code] = 'WACS40' THEN 'S'
    ELSE 'O' END
    ,[TextDescription] = 
    CASE WHEN LEFT([Report_Code],LEN([Report_Code])-8) IN ('HNC','ICC') 
    THEN [EC].[fn_strETSDescriptionFromRptCode] (LEFT([Report_Code],LEN([Report_Code])-8))
    + CHAR(13) + CHAR (10) + REPLACE(CONVERT(VARCHAR(12),Event_Date,107),',','') + [TextDescription] 
    ELSE [EC].[fn_strETSDescriptionFromRptCode] (LEFT([Report_Code],LEN([Report_Code])-8))END
FROM [EC].[ETS_Coaching_Stage] STAGE JOIN [EC].[Employee_Hierarchy]EMP
ON LTRIM(STAGE.Emp_ID) = LTRIM(EMP.Emp_ID)

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject records not belonging to CSRs and Supervisors
BEGIN
EXEC [EC].[sp_InsertInto_ETS_Rejected] 
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Delete rejected records

BEGIN
DELETE FROM [EC].[ETS_Coaching_Stage]
WHERE [Reject_Reason]is not NULL

SELECT @Count =@@ROWCOUNT

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Assign Record ID

BEGIN

DECLARE @id INT 
SET @id = 0 
UPDATE [EC].[ETS_Coaching_Stage]
SET @id = [Report_ID] = @id + 1 

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Populate TextDescription by concatenating the individual detail fields.

BEGIN
UPDATE [EC].[ETS_Coaching_Stage]
SET [TextDescription] = 
CASE
WHEN LEFT([Report_Code],LEN([Report_Code])-8)= 'OAE' 
     THEN ([TextDescription] + CHAR(13) + CHAR (10) + ' ' + CHAR(13) + CHAR (10) + 
      LEFT([Event_Date],LEN([Event_Date])-8)+ ' | ' + [EC].[fn_strEmpNameFromEmpID] (Emp_ID))
WHEN LEFT([Report_Code],LEN([Report_Code])-8)= 'OAS' 
     THEN ([TextDescription] + CHAR(13) + CHAR (10) + ' ' + CHAR(13) + CHAR (10) + 
     LEFT([Event_Date],LEN([Event_Date])-13)+ ' | ' + [EC].[fn_strEmpNameFromEmpID] (Emp_ID)+ ' | ' + [Associated_Person])
WHEN LEFT([Report_Code],LEN([Report_Code])-8) IN ('HNC','ICC')  
     THEN  [TextDescription] 
ELSE ([TextDescription] + CHAR(13) + CHAR (10) + ' ' + CHAR(13) + CHAR (10) +  'The date, project and task numbers, time code, total and daily hours are below:' 
      + CHAR(13) + CHAR (10) + ' ' + CHAR(13) + CHAR (10) +  LEFT([Event_Date],LEN([Event_Date])-8)+ ' | ' + [Project_Number]+ ' | ' + [Task_Number] 
      + ' | ' + [Task_Name] + ' | ' + [Time_Code]  + ' | ' + [Associated_Person] + ' | ' + [Hours] 
      + ' | ' + [Sat] + ' | ' + [Sun] + ' | ' + [Mon] + ' | ' + [Tue] + ' | ' + [Wed] + ' | ' + [Thu] + ' | ' + [Fri] )
 END

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	

END  -- [EC].[sp_Update_ETS_Coaching_Stage]



GO

/*
sp_Update_Generic_Coaching_Stage(02).sql
Last Modified Date:  11/27/2017
Last Modified By: Susmitha Palacherla


Version 02:Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
Version 01: Document Initial Revision - Added support for DTT generic feed. - TFS 7646 - 9/1/2017
*/



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Generic_Coaching_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Generic_Coaching_Stage]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 08/31/2017
-- Description:	Performs the following actions.
-- Populate Employee and Hierarchy attributes from Employee Table
-- Inserts non CSR and Supervisor records into Rejected table
-- Deletes rejected records.
-- Last Modified By - Susmitha Palacherla
-- Revision History
-- Initial Revision. DTT Feed - TFS 7646 - 08/31/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Generic_Coaching_Stage] 
@Count INT OUTPUT
AS
BEGIN

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

-- Populate Emp ID if LanID provided in File 
BEGIN
UPDATE [EC].[Generic_Coaching_Stage]
SET [CSR_EMPID]=[EC].[fn_nvcGetEmpIdFromLanId] ([CSR_LANID],Getdate()) 
WHERE [CSR_EMPID] is NULL
AND [CSR_LANID] IS NOT NULL

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms
  
-- Populate Attributes from Employee Table
BEGIN
UPDATE [EC].[Generic_Coaching_Stage]
SET [CSR_LANID] = [EC].[fn_strEmpLanIDFromEmpID]([CSR_EMPID])
    ,[CSR_Site]= EMP.[Emp_Site]
    ,[Program]= EMP.[Emp_Program]
    ,[Emp_Role]= 
    CASE WHEN EMP.[Emp_Job_Code]in ('WACS01', 'WACS02','WACS03') THEN 'C'
    WHEN EMP.[Emp_Job_Code] = 'WACS40' THEN 'S'
	WHEN EMP.[Emp_Job_Code] IN ('WACQ02','WACQ03','WACQ12') THEN 'Q'
    WHEN EMP.[Emp_Job_Code] IN ('WIHD01','WIHD02','WIHD03','WIHD04') THEN 'L'
    WHEN EMP.[Emp_Job_Code] IN ('WTID13','WTTI02','WTTR12','WTTR13') THEN 'T'
    ELSE 'O' END
FROM [EC].[Generic_Coaching_Stage] STAGE JOIN [EC].[Employee_Hierarchy]EMP
ON LTRIM(STAGE.CSR_EMPID) = LTRIM(EMP.Emp_ID)

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reject records not belonging to CSRs and Supervisors
BEGIN
EXEC [EC].[sp_InsertInto_Generic_Rejected] 
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Delete rejected records

BEGIN
DELETE FROM [EC].[Generic_Coaching_Stage]
WHERE [Reject_Reason]is not NULL
SELECT @Count = @@ROWCOUNT

OPTION (MAXDOP 1)
END

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	



END  -- [EC].[sp_Update_Generic_Coaching_Stage]



GO



/*
sp_Update_Outlier_Coaching_Stage(05.sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla


Version 05: Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017

Version 04: Added Additional Job codes and Roles - TFS 8793 - 11/16/2017

Version 03: Updated to fix typo in Missing Site and Comments - TFS 6147 - 06/02/2017

Version 02: slight update to EmpID update logic - Suzy Palacherla -  TFS 6377 - 04/24/2017

Version 01: Document Initial Revision - Suzy Palacherla -  TFS 6377 - 04/24/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Outlier_Coaching_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Outlier_Coaching_Stage]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 04/24/2017
-- Description:	Performs the following actions.
-- Populates EmpID and or lanID depending on incoming files as needed
-- Populate missing program and site values from employee table
-- Populates Role and Active status 
-- Rejects records and deletes rejected records per business rules.
-- Initial revision. TFS 6377 - 04/24/2017
-- Updated to fix typo in Missing Site and Comments - TFS 6147 - 06/02/2017
-- Added Additional Job codes and Roles - TFS 8793 - 11/16/2017
-- Updated to support Encryption of sensitive data - TFS 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Outlier_Coaching_Stage] 
@Count INT OUTPUT
AS
BEGIN

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

-- Populate LanID for Employee ID coming in file (LCS, IAE and IAT)
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_LANID]= [EC].[fn_strEmpLanIDFromEmpID]([CSR_EMPID])
WHERE [CSR_LANID]IS NULL AND NOT ISNULL([CSR_EMPID],' ') like '%.%'
OPTION (MAXDOP 1)
END  

WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

--  Populate EmpID and or LanID for files that can
--  have either EmpID or LanID arrive in strCSR
-- (All Other OMR Files)

-- For Files where EmpID sent in strCSR. Copy it to EmpID
-- Prior to copying remove prefix in Value if Emp ID in Employee Hierarchy table does not have prefix

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_LANID]= [eh].[Emp_ID]
FROM [EC].[Outlier_Coaching_Stage] os JOIN [EC].[Employee_Hierarchy] eh 
ON os.[CSR_LANID] = eh.[Emp_ID_Prefix]
WHERE NOT ISNULL([CSR_LANID],' ') like '%.%'
AND [CSR_EMPID] IS NULL
AND [CSR_LANID] NOT IN
 (SELECT DISTINCT [Emp_ID]FROM [EC].[Employee_Ids_With_Prefixes])
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_EMPID]=[CSR_LANID]
WHERE NOT ISNULL([CSR_LANID],' ') like '%.%' AND [CSR_EMPID] IS NULL
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms  

  

-- Replace above copied EmpIds with LANIds
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_LANID]= [EC].[fn_strEmpLanIDFromEmpID]([CSR_LANID])
WHERE NOT ISNULL([CSR_LANID],' ') like '%.%'
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

 -- Populate EmpID for lanID coming in strCSR (non LCS, IAE, IAT, BRL, BRN)
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_EMPID]= [EC].[fn_nvcGetEmpIdFromLanId] ([CSR_LANID],[Submitted_Date])
WHERE  ISNULL([CSR_LANID],' ') like '%.%' AND [CSR_EMPID] IS NULL
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms  
 
-- Replace unknown Employee Ids with ''
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_EMPID]= ''
WHERE  [CSR_EMPID]='999999'
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms




-- Populate Missing program
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Program]= H.[Emp_Program]
FROM [EC].[Outlier_Coaching_Stage]S JOIN [EC].[Employee_Hierarchy]H
ON S.[CSR_EMPID]=H.[Emp_ID]
WHERE (S.Program IS NULL OR S.Program ='')
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms


-- Populate Missing Site
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [CSR_Site]= H.[Emp_Site]
FROM [EC].[Outlier_Coaching_Stage]S JOIN [EC].[Employee_Hierarchy]H
ON S.[CSR_EMPID]=H.[Emp_ID]
WHERE (S.CSR_Site IS NULL OR S.CSR_Site ='')
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

-- Populate Roles AND Active
BEGIN
UPDATE [EC].[Outlier_Coaching_Stage]
SET [Emp_Role]= 
    CASE WHEN EMP.[Emp_Job_Code]in ('WACS01', 'WACS02','WACS03') THEN 'C'
    WHEN EMP.[Emp_Job_Code] = 'WACS40' THEN 'S'
    WHEN  EMP.[Emp_Job_Code]in ('WACQ02', 'WACQ03','WACQ12') THEN 'Q'
    WHEN  EMP.[Emp_Job_Code]in ('WIHD01','WIHD02','WIHD03','WIHD04', 'WABA11', 'WISA03') THEN 'L'
	WHEN  EMP.[Emp_Job_Code]in ('WTTR02','WTTI02','WTTR12','WTTR13','WTID13') THEN 'T'
	WHEN  EMP.[Emp_Job_Code]in ('WABA01','WABA02','WABA03') THEN 'AD'
	WHEN  EMP.[Emp_Job_Code]in ('WPSM11') THEN 'AR'
	WHEN  EMP.[Emp_Job_Code]in ('WMPL02','WMPL03') THEN 'PP'
    WHEN  EMP.[Emp_Job_Code]in ('WPPM11') THEN 'PA'
    ELSE 'O' END
   ,[Emp_Active] =
    CASE WHEN  EMP.[Active] in ('T', 'D', 'P', 'L')THEN 'N'
    ELSE 'A' END
FROM [EC].[Outlier_Coaching_Stage] STAGE JOIN [EC].[Employee_Hierarchy]EMP
ON LTRIM(STAGE.CSR_EMPID) = LTRIM(EMP.Emp_ID)

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

-- Reject records not belonging to CSRs and Supervisors
BEGIN
EXEC [EC].[sp_InsertInto_Outlier_Rejected] 
END

WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms


-- Delete rejected records

BEGIN
DELETE FROM [EC].[Outlier_Coaching_Stage]
WHERE [Reject_Reason]is not NULL

SELECT @Count =@@ROWCOUNT
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	


END  -- [EC].[sp_Update_Outlier_Coaching_Stage]

GO



/*
sp_Update_Quality_Other_Coaching_Stage(01).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 11/27/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Quality_Other_Coaching_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Quality_Other_Coaching_Stage]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 12/14/2017
-- Description:	Performs the following actions.
-- Populates EmpID and or lanID depending on incoming files as needed
-- Populate missing program values from employee table
-- Populates Role and Active status 
-- Rejects records and deletes rejected records per business rules.
-- Initial revision. Created during encryption of sensitive data - TFS 7856 - 04/24/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Quality_Other_Coaching_Stage] 
@Count INT OUTPUT
AS
BEGIN

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

-- For Files where EmpID sent in strCSR. Copy directly to EmpID (KUD)
BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [Emp_ID]=[Emp_LanID]
WHERE NOT ISNULL([Emp_LANID],' ') like '%.%'
AND [Emp_ID] IS NULL
OPTION (MAXDOP 1)
END  

WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

-- For Files where Emp LanID sent in strCSR.
-- Lookup Employee ID and Populate into (HFC)

BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [EMP_ID]= [EC].[fn_nvcGetEmpIdFromLanId] ([EMP_LANID],[Submitted_Date])
WHERE  ISNULL([Emp_LANID],' ') like '%.%'
AND [Emp_ID] IS NULL
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms  

-- Replace unknown Employee Ids with ''

BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [EMP_ID]= ''
WHERE  [EMP_ID]='999999'
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms  

-- Populate SubmitterID as 999999 where NULL
BEGIN

UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [Submitter_ID]= '999999'
WHERE [Submitter_ID] IS NULL
OPTION (MAXDOP 1)
END  
      
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms

 -- Populate Program Value from Employee table where missing
BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [Program]= H.[Emp_Program]
FROM [EC].[Quality_Other_Coaching_Stage]S JOIN [EC].[Employee_Hierarchy]H
ON S.[EMP_ID]=H.[Emp_ID]
WHERE ([Program] IS NULL OR [Program]= '')
OPTION (MAXDOP 1)
END 
 
WAITFOR DELAY '00:00:00.01' -- Wait for 1 ms  


-- Determine and populate Reject Reasons

-- Employee not an Actice CSR (HFC and KUD)

BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [Reject_Reason]= N'Record does not belong to an active CSR.'
WHERE (EMP_ID = '' OR
EMP_ID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]
 WHERE Emp_Job_Code IN ('WACS01', 'WACS02', 'WACS03')
 AND Active NOT IN ('T','D','P','L') 
 ))
 AND (Report_Code lIKE 'HFC%' OR Report_Code LIKE 'KUD%')
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Employee not an Actice Supervisor (CTC)

BEGIN
UPDATE [EC].[Quality_Other_Coaching_Stage]
SET [Reject_Reason]= N'Record does not belong to an active Supervisor.'
WHERE (EMP_ID = '' OR
EMP_ID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]
 WHERE Emp_Job_Code = 'WACS40'
 AND Active NOT IN ('T','D','P','L') 
 ))
AND Report_Code lIKE 'CTC%' 
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

--Insert Rejected Records into Rejected Table
BEGIN
INSERT INTO [EC].[Quality_Other_Coaching_Rejected]
           ([Report_ID]
           ,[Report_Code]
           ,[Source]
           ,[Event_Date]
           ,[Submitted_Date]
		   ,[FileName]
           ,[Rejected_Reason]
           ,[Rejected_Date]
       )
 SELECT S.[Report_ID]
      ,S.[Report_Code]
      ,S.[Source]
      ,S.[Event_Date]
      ,S.[Submitted_Date]
	  ,S.[FileName]
      ,s.[Reject_Reason]
      ,GETDATE()
   FROM [EC].[Quality_Other_Coaching_Stage]S left outer join [EC].[Quality_Other_Coaching_Rejected] R 
  ON S.Report_ID = R.Report_ID and S.Report_Code = R.Report_Code 
  WHERE R.Report_ID is NULL and R.Report_Code is NULL 
  AND S.[Reject_Reason] is not NULL                

OPTION (MAXDOP 1)
END
    
-- Delete rejected records

BEGIN
DELETE FROM [EC].[Quality_Other_Coaching_Stage]
WHERE [Reject_Reason]is not NULL

SELECT @Count =@@ROWCOUNT

OPTION (MAXDOP 1)
END



-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];	


END  -- [EC].[sp_Update_Quality_Other_Coaching_Stage]

GO



/*
sp_Update_Training_Coaching_Stage(01).sql
Last Modified Date: 11/27/2017
Last Modified By: Susmitha Palacherla


Version 01:  Initial Revision - Created during encryption of secure data. TFF 7856 - 11/27/2017

*/


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Training_Coaching_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Training_Coaching_Stage]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 11/27/2017
-- Description:	Performs the following actions.
-- Revision History
-- Last Modified By - Susmitha Palacherla
-- Initial Revision - Created during encryption of secure data. TFF 7856 - 11/27/2017
-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Training_Coaching_Stage] 
@Count INT OUTPUT
AS
BEGIN

-- Open the symmetric key with which to encrypt the data.  
OPEN SYMMETRIC KEY [CoachingKey]  
DECRYPTION BY CERTIFICATE [CoachingCert];  

-- Populate Lan ID

BEGIN
UPDATE [EC].[Training_Coaching_Stage]
SET [CSR_LANID]= [EC].[fn_strEmpLanIDFromEmpID]([CSR_EMPID])
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms
    
-- Populate Program from Employee Table
BEGIN
UPDATE [EC].[Training_Coaching_Stage]
SET [Program]= H.[Emp_Program]
FROM [EC].[Training_Coaching_Stage]S JOIN [EC].[Employee_Hierarchy]H
ON S.[CSR_EMPID]=H.[Emp_ID]
WHERE (S.Program IS NULL OR S.Program ='')

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Determine and populate Reject Reasons

-- Employee not an Actice CSR

BEGIN
UPDATE [EC].[Training_Coaching_Stage]
SET [Reject_Reason]= N'Record does not belong to an active CSR.'
WHERE (CSR_EMPID = '' OR
CSR_EMPID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy]
 WHERE Emp_Job_Code IN ('WACS01', 'WACS02', 'WACS03')
 AND Active NOT IN ('T','D','P','L') and Emp_LanID <> 'Unknown'
 ))
AND [Reject_Reason]is NULL
	
OPTION (MAXDOP 1)
END  


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

--Insert Rejected Records into Rejected Table
BEGIN
INSERT INTO [EC].[Training_Coaching_Rejected]
           ([Report_ID]
           ,[Report_Code]
           ,[Source]
           ,[Event_Date]
           ,[Submitted_Date]
		   ,[FileName]
           ,[Rejected_Reason]
           ,[Rejected_Date]
       )
 SELECT S.[Report_ID]
      ,S.[Report_Code]
      ,S.[Source]
      ,S.[Event_Date]
      ,S.[Submitted_Date]
	  ,S.[FileName]
      ,s.[Reject_Reason]
      ,GETDATE()
   FROM [EC].[Training_Coaching_Stage]S left outer join [EC].[Training_Coaching_Rejected] R 
  ON S.Report_ID = R.Report_ID and S.Report_Code = R.Report_Code 
  WHERE R.Report_ID is NULL and R.Report_Code is NULL 
  AND S.[Reject_Reason] is not NULL                

OPTION (MAXDOP 1)
END
    
-- Delete rejected records

BEGIN
DELETE FROM [EC].[Training_Coaching_Stage]
WHERE [Reject_Reason]is not NULL

SELECT @Count =@@ROWCOUNT

OPTION (MAXDOP 1)
END





  -- Clode Symmetric Key
  CLOSE SYMMETRIC KEY [CoachingKey] 



END  -- [EC].[sp_Update_Training_Coaching_Stage]

GO



IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Whoami' 
)
   DROP PROCEDURE [EC].[sp_Whoami]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	07/22/13
-- Last Updated By: Susmitha Palacherla
-- Last Modified Date: 4/4/2016
-- TFS 605 - Return lower employee ID and look for Active not in ('T','D')- 8/25/2015
-- TFS 2323 - Unknown user can be authenticated - Restrict user in SP return - 4/4/2016
-- TFS 2332 - Controlling access for HR users from backend - 4/7/2016
-- TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Whoami] 
(
  @strUserin Nvarchar(30)
)
AS

BEGIN

DECLARE	
  @EmpID nvarchar(100),
  @nvcEmpJobCode nvarchar(30),
  @nvcHRCondition nvarchar(1000),
  @nvcSQL nvarchar(max);
  
-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcHRCondition = '';
SET @EmpID = (Select [EC].[fn_nvcGetEmpIdFromLanId](@strUserin, GETDATE()));
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy WHERE Emp_ID = @EmpID);

IF @nvcEmpJobCode LIKE 'WH%'
BEGIN
  SET @nvcHRCondition = ' AND [Emp_Job_Code] LIKE ''WH%'' AND [Active]= ''A''';
END

SET @nvcSQL = '
SELECT 
  Emp_Job_Code AS EmpJobCode,
  veh.Emp_Email AS EmpEmail,
  veh.Emp_Name AS EmpName,
  lower(veh.Emp_ID) AS EmpID
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh ON veh.Emp_ID = eh.Emp_ID
WHERE veh.Emp_ID = ''' + @EmpID + '''
  AND Active NOT IN (''T'', ''D'')
  AND veh.Emp_ID <> ''999999''' + @nvcHRCondition
		
EXEC (@nvcSQL)

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

END --sp_Whoami
GO
IF EXISTS (
  SELECT * FROM INFORMATION_SCHEMA.ROUTINES 
  WHERE SPECIFIC_SCHEMA = N'EC' AND SPECIFIC_NAME = N'sp_Whoisthis' 
)
   DROP PROCEDURE [EC].[sp_Whoisthis]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	<7/23/13>
-- Last Updated By: Susmitha Palacherla
-- Last Modified Date: 06/12/2015
-- Updated per SCR 14966 to use the Employee ID as input parameter instead of Emp Lan ID 
-- and added SupID and MgrID to the return.
-- TFS 7856 encryption/decryption - emp name, emp lanid, email
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Whoisthis] 
(
  @strUserIDin Nvarchar(30)
)
AS

BEGIN

DECLARE	
  @nvcSQL nvarchar(max);

-- Open Symmetric key
OPEN SYMMETRIC KEY [CoachingKey] DECRYPTION BY CERTIFICATE [CoachingCert]; 

SET @nvcSQL = '
SELECT 
  veh.Sup_LanID + 
  ''$'' + 
  eh.Sup_ID + 
  ''$'' + 
  veh.Mgr_LanID + 
  ''$'' + 
  eh.Mgr_ID AS Flow
FROM [EC].[View_Employee_Hierarchy] veh WITH (NOLOCK)
JOIN [EC].[Employee_Hierarchy] eh WITH (NOLOCK) ON veh.Emp_ID = eh.Emp_ID
WHERE veh.Emp_ID = '''+ @strUserIDin+'''';
		
EXEC (@nvcSQL)	

-- Close Symmetric key
CLOSE SYMMETRIC KEY [CoachingKey];

END --sp_Whoisthis
GO
