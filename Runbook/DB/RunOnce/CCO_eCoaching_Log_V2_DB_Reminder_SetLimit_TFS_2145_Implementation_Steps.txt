/*

TFS 2145 - Set limit for Email reminders

Implement in eCoaching database in target environment.


Dev - eCoahingDev
Test - eCoachingTest
Prod - eCoaching
****************************************

IMPLEMENTATION SUMMARY

***************************************
SECTION 1 - Fetch and Stage Files 
Reminder Script for Test - Reminders_Test.vbs
Reminder Script for Prod - Reminders_Prod.vbs

SECTION 2 - Modify PROCEDURES
PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
PROCEDURE [EC].[sp_SelectCoaching4Reminder]



****************************************

IMPLEMENTATION DETAILS

***************************************


--SECTION 1 - Fetch and Stage Files

***************************************/

Fetch the following files from TFS source Control and stage accordingly.

--Test
 \cms\eCoaching_V2\ETL\Reminders_Test.vbs (Changeset 33943)
 To
\\vrivfssdbt02\integrationservices\Coaching\Notifications

-- Prod
 \cms\eCoaching_V2\ETL\Reminders_Prod.vbs (Changeset 33943)
To
 \\vdenssdbp07\scorecard-ssis\Coaching\Notifications\


**********************************************************************************

COPY EVERYTHING INTO AN SSMS WINDOW
POINTING TO THE eCOACHING DB IN TARGET ENVIRONMENT
AND RUN WITH NOTHING SELECTED.

**********************************************************************************/



--1a. sp_Update5Review_Coaching_Log


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update5Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:    11/16/2012
--    Description:    This procedure allows managers to update the e-Coaching records from the review page for Outlier records. 
--    Updated per TFS 644 to add IAE and IAT reports - 09/17/2015
--    Updated per TFS 2145 to reset Email reminder attributes for OMR logs  - 3/2/2016
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcstrReasonNotCoachable Nvarchar(30),
      @nvcReviewerLanID Nvarchar(20),
      @dtmReviewAutoDate datetime,
      @dtmReviewManualDate datetime,
      @bitisCoachingRequired bit,
      @nvcReviewerNotes Nvarchar(max),
      @nvctxtReasonNotCoachable Nvarchar(max)
    
)
AS
BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

DECLARE @nvcReviewerID Nvarchar(10),
	    @dtmDate datetime,
	    @nvcCat Nvarchar (10)
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewerID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewerLanID,@dtmDate)
--SET @nvcCat = (select strReportCode from EC.Coaching_Log where FormName = @nvcFormID) 
SET @nvcCat = (select RTRIM(LEFT(strReportCode,LEN(strReportCode)-8)) from EC.Coaching_Log where FormName = @nvcFormID) 


--IF LEFT(@nvcCat,LEN(@nvcCat)-8) IN ('OAE','OAS')
  IF @nvcCat IN ('OAE','OAS', 'IAE','IAT')

BEGIN      
UPDATE 	EC.Coaching_Log
SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
        Review_SupID = @nvcReviewerID,
		strReasonNotCoachable = @nvcstrReasonNotCoachable,
		isCoachingRequired = @bitisCoachingRequired,
		SupReviewedAutoDate =  @dtmReviewAutoDate,
		CoachingDate =  @dtmReviewManualDate,
		CoachingNotes = @nvcReviewerNotes,		   
		txtReasonNotCoachable = @nvctxtReasonNotCoachable 
	WHERE FormName = @nvcFormID
        OPTION (MAXDOP 1)
        
  
UPDATE EC.Coaching_Log_Reason
SET Value = (CASE WHEN @bitisCoachingRequired = 'True' then 'Opportunity' ELSE 'Not Coachable' END)
  	FROM EC.Coaching_Log cl INNER JOIN EC.Coaching_Log_Reason clr
	ON cl.CoachingID = clr.CoachingID
	WHERE cl.FormName = @nvcFormID
and clr.SubCoachingReasonID in (120,121,29,231)
        OPTION (MAXDOP 1)

END

ELSE

BEGIN

UPDATE 	EC.Coaching_Log
SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
        Review_MgrID = @nvcReviewerID,
		strReasonNotCoachable = @nvcstrReasonNotCoachable,
		isCoachingRequired = @bitisCoachingRequired,
		MgrReviewAutoDate = @dtmReviewAutoDate,
		MgrReviewManualDate = @dtmReviewManualDate,
		MgrNotes = @nvcReviewerNotes,		   
		txtReasonNotCoachable = @nvctxtReasonNotCoachable, 
		ReminderSent = 0,
        ReminderDate = NULL,
        ReminderCount = 0
	WHERE FormName = @nvcFormID
        OPTION (MAXDOP 1)

UPDATE EC.Coaching_Log_Reason
SET Value = (CASE WHEN @bitisCoachingRequired = 'True' then 'Opportunity' ELSE 'Not Coachable' END)
  	FROM EC.Coaching_Log cl INNER JOIN EC.Coaching_Log_Reason clr
	ON cl.CoachingID = clr.CoachingID
	INNER JOIN EC.DIM_Coaching_Reason cr ON cr.CoachingReasonID = clr.CoachingReasonID
WHERE cl.FormName = @nvcFormID
and cr.CoachingReason in ('OMR / Exceptions', 'Current Coaching Initiative')
        OPTION (MAXDOP 1)

END
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
END               
END CATCH


END --sp_Update5Review_Coaching_Log






GO



--*********************************************

--4b.sp_SelectCoaching4Reminder

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectCoaching4Reminder' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Reminder]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:		       Susmitha Palacherla
--	Create Date:	   02/09/2016
--	Description: 	   This procedure queries db for Failed Quality and LCSAT records that are past 
--  the Coaching SLA and sends Reminders to Supervisors and or Managers.
--  Initial revision per TFS Change request 1710 - 02/09/2016
--  Updated to limit to 2 reminders per status per TFS 2145 - 3/2/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Reminder]
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@intHrs1 int,
@intHrs2 int

-- Variables used for the diferent reminder periods.
-- Quality reminders are set at 48 hrs
-- OMR reminders are set at 72 hrs

SET @intHrs1 = 48 
SET @intHrs2 = 72

SET @nvcSQL1 = ';WITH TempMain AS 
        (select DISTINCT x.strFormID 
        ,x.numID 
        ,x.strEmpID 
        ,x.strStatus 
        ,x.strSubCoachingSource
       	,x.strvalue 
        ,x.Remind 
        ,x.RemindCC 
		,x.NotificationDate	
		,x.ReminderSent	
		,x.ReminderDate	
		,x.ReminderCount   
		,x.ReassignDate   
FROM 
	
-- Verint-GDIT Logs

(SELECT   cl.CoachingID	numID	
		,cl.FormName	strFormID
		,cl.EmpID strEmpID
		,s.Status strStatus
		,so.SubCoachingSource strSubCoachingSource
		,clr.value strValue
		,cl.NotificationDate	NotificationDate
		,cl.ReminderSent	ReminderSent
		,cl.ReminderDate	ReminderDate
		,cl.ReminderCount   ReminderCount
		,cl.ReassignDate    ReassignDate 
		, CASE
		WHEN (ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) >  '''+CONVERT(VARCHAR,@intHrs1)+''' ) THEN ''Sup''
		WHEN (ReminderSent = ''True'' AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) >'''+CONVERT(VARCHAR,@intHrs1)+''' )THEN ''Sup''
		ELSE ''NA'' END Remind
		,CASE
		WHEN (ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs1)+''' ) THEN ''Mgr''
		WHEN (ReminderSent = ''True'' AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs1)+''' )THEN ''Mgr/SrMgr''
		ELSE ''NA'' END RemindCC
FROM  [EC].[Coaching_Log] cl WITH (NOLOCK)
 JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK)
 ON cl.coachingid = clr.coachingid JOIN [EC].[DIM_Status] s
ON cl.StatusID = s.StatusID JOIN [EC].[DIM_Source] so
ON cl.SourceID = so.SourceID
WHERE cl.Statusid = 6
AND cl.SourceID = 223
AND cl.EmailSent = ''True''
AND clr.Value   = ''Did not meet goal''
AND ((ReminderSent = ''False'' AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs1)+''' )OR
(ReminderSent = ''True'' AND [ReminderCount] < 2 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs1)+''' ))'

-- LCS OMR Logs

SET @nvcSQL2 = ' UNION
SELECT   cl.CoachingID	numID	
			,cl.FormName	strFormID
		,cl.EmpID strEmpID
		,s.Status strStatus
		,so.SubCoachingSource strSubCoachingSource
		,clr.value strValue
		,cl.NotificationDate	NotificationDate
		,cl.ReminderSent	ReminderSent
		,cl.ReminderDate	ReminderDate
		,cl.ReminderCount   ReminderCount
		,cl.ReassignDate    ReassignDate 
		, CASE
		WHEN (ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''') THEN ''Mgr''
		WHEN (ReminderSent = ''True'' AND cl.Statusid = 5 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''Mgr''
		WHEN (ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate],[MgrReviewAutoDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''Sup''
		WHEN (ReminderSent = ''True'' AND cl.Statusid = 6 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''Sup''
		ELSE ''NA'' END Remind
	  , CASE
		WHEN (ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''') THEN ''SrMgr''
		WHEN (ReminderSent = ''True'' AND cl.Statusid = 5 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''SrMgr''
		WHEN (ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate],[MgrReviewAutoDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''Mgr''
		WHEN (ReminderSent = ''True'' AND cl.Statusid = 6 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')THEN ''Mgr/SrMgr''
		ELSE ''NA'' END RemindCC
FROM  [EC].[Coaching_Log] cl WITH (NOLOCK)
 JOIN [EC].[Coaching_Log_Reason] clr WITH (NOLOCK)
 ON cl.coachingid = clr.coachingid JOIN [EC].[DIM_Status] s
ON cl.StatusID = s.StatusID JOIN [EC].[DIM_Source] so
ON cl.SourceID = so.SourceID
WHERE clr.SubCoachingreasonID = 34 
AND ((cl.Statusid = 5 AND clr.Value   = ''Research Required'') OR 
(cl.Statusid = 6 AND clr.Value   = ''Opportunity''))
AND cl.EmailSent = ''True''
AND ((ReminderSent = ''False'' AND cl.Statusid = 5 AND DATEDIFF(HH, ISNULL([ReassignDate],[NotificationDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')OR
(ReminderSent = ''True'' AND [ReminderCount] < 2 AND DATEDIFF(HH, [EC].[fnGetMaxDateTime]([ReassignDate],[ReminderDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+''')OR
(ReminderSent = ''False'' AND cl.Statusid = 6 AND DATEDIFF(HH, ISNULL([ReassignDate],[MgrReviewAutoDate]),GetDate()) > '''+CONVERT(VARCHAR,@intHrs2)+'''))'


SET @nvcSQL3 = 
 ' ) x )SELECT 
         numid CoachingID
        ,strFormID
		,strStatus
		,strSubCoachingSource
		,strValue
		,CASE WHEN Remind = ''Sup'' THEN eh.Sup_Email	
		      WHEN Remind = ''Mgr'' THEN eh.Mgr_Email
		      ELSE '''' END strToEmail
		,CASE WHEN RemindCC = ''Mgr'' THEN eh.Mgr_Email	
		      WHEN RemindCC = ''SrMgr'' THEN [EC].[fn_strEmpEmailFromEmpID](eh.SrMgrLvl1_ID)
		      WHEN RemindCC = ''Mgr/SrMgr'' THEN eh.Mgr_Email + '';'' +[EC].[fn_strEmpEmailFromEmpID](eh.SrMgrLvl1_ID)
		      ELSE '''' END strCCEmail
		 ,NotificationDate	
		,ReminderSent	
		,ReminderDate	
		,ReminderCount   
		,ReassignDate
	   	FROM TempMain T JOIN [EC].[Employee_Hierarchy] eh 
	   	ON T.strEmpID  = eh.Emp_ID
	   	WHERE (eh.Sup_Email is not NULL OR eh.Sup_Email <> '''' OR eh.Mgr_Email is not NULL OR eh.Mgr_Email <> '''')
	   	ORDER BY NotificationDate desc'

        
SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3 
EXEC (@nvcSQL)	
	    
--PRINT @nvcsql  
	    
END --sp_SelectCoaching4Reminder




GO




--*********************************************

