SCRs 13479 and 13624

Summary
0. Stage the SSIS file identified in Step 0 on the production database server
1. Run steps 1 through 8 and their sub steps one statement at a time or as a batch as instructed at the beginning of the step.
2. Step 9 through the end of the document can be run at once in an SSMS window pointed to the eCoaching database in the target environment.
**********************************************************************************************

--Step 0: Stage SSIS file

Get file from VM
\\cms\eCoaching_V2\ETL\Employee_Hierarchy.dtsx (VM version 1.2)

Stage in directory identified below overwriting existing file.
 \\vdenssdbp07\scorecard-ssis\Coaching

*******************************************************************************************
--RUN ONE STATEMENT AT A TIME FOR STEPS 1 THROUGH 8

--step 1: Insert values into [EC].[DIM_Source] table

INSERT INTO [EC].[DIM_Source]
           ([SourceID]
           ,[CoachingSource]
           ,[SubCoachingSource]
           ,[isActive]
           ,[CSR]
           ,[Supervisor]
           ,[Quality])
     VALUES
           (120,'Direct','Warning',1,0,0,0),
           (220,'Indirect','Warning',1,0,0,0)
           
GO



--step2:  Insert values into [EC].[DIM_Coaching_Reason] table

INSERT INTO [EC].[DIM_Coaching_Reason]
           ([CoachingReason])
             VALUES
           ('Verbal Warning'),
           ('Written Warning'),
           ('Final Written Warning')
              
GO




-- step 3: Insert values into [EC].[DIM_Sub_Coaching_Reason] table

INSERT INTO [EC].[DIM_Sub_Coaching_Reason]
           ([SubCoachingReason])
     VALUES
           ('Attendance'),
           ('Conduct (including Call Avoidance)'),
           ('Quality/Performance'),
           ('Security or Privacy Issue'),
           ('Other Policy (non-Security/Privacy)')


--step4a: Add column to [EC].[Coaching_Reason_Selection] table

ALTER Table [EC].[Coaching_Reason_Selection]
ADD splReasonPrty INT


--step 4b: 

Update [EC].[Coaching_Reason_Selection]
set splReasonPrty = 0

-- step 4c:

Update [EC].[Coaching_Reason_Selection]
set splReasonPrty = 2
Where CoachingReasonID = 6


--step 5a: Insert values into  [EC].[Coaching_Reason_Selection] table

INSERT INTO [EC].[Coaching_Reason_Selection]
           ([CoachingReasonID]
           ,[CoachingReason]
           ,[SubCoachingReasonID]
           ,[SubCoachingReason]
           ,[isActive]
           ,[Direct]
           ,[Indirect]
           ,[isOpportunity]
           ,[isReinforcement]
           ,[CSR]
           ,[Quality]
           ,[Supervisor]
           ,[splReason]
           ,[splReasonPrty])
     VALUES
           (28, 'Verbal Warning',48, 'ETS',1,1,0,1,0,1,0,0,1,1),
           (28, 'Verbal Warning',92, 'Attendance',1,1,0,1,0,1,0,0,1,1),
           (28, 'Verbal Warning',93, 'Conduct (including Call Avoidance)',1,1,0,1,0,1,0,0,1,1),
           (28, 'Verbal Warning',94, 'Quality/Performance',1,1,0,1,0,1,0,0,1,1),
           (28, 'Verbal Warning',95, 'Security or Privacy Issue',1,1,0,1,0,1,0,0,1,1),
           (28, 'Verbal Warning',96, 'Other Policy (non-Security/Privacy)',1,1,0,1,0,1,0,0,1,1),             
           (29, 'Written Warning',48, 'ETS',1,1,0,1,0,1,0,0,1,1),
           (29, 'Written Warning',92, 'Attendance',1,1,0,1,0,1,0,0,1,1),
           (29, 'Written Warning',93, 'Conduct (including Call Avoidance)',1,1,0,1,0,1,0,0,1,1),
           (29, 'Written Warning',94, 'Quality/Performance',1,1,0,1,0,1,0,0,1,1),
           (29, 'Written Warning',95, 'Security or Privacy Issue',1,1,0,1,0,1,0,0,1,1),
           (29, 'Written Warning',96, 'Other Policy (non-Security/Privacy)',1,1,0,1,0,1,0,0,1,1),        
           (30, 'Final Written Warning',48, 'ETS',1,1,0,1,0,1,0,0,1,1),
           (30, 'Final Written Warning',92, 'Attendance',1,1,0,1,0,1,0,0,1,1),
           (30, 'Final Written Warning',93, 'Conduct (including Call Avoidance)',1,1,0,1,0,1,0,0,1,1),
           (30, 'Final Written Warning',94, 'Quality/Performance',1,1,0,1,0,1,0,0,1,1),
           (30, 'Final Written Warning',95, 'Security or Privacy Issue',1,1,0,1,0,1,0,0,1,1),
           (30, 'Final Written Warning',96, 'Other Policy (non-Security/Privacy)',1,1,0,1,0,1,0,0,1,1)
          
GO

--step 5b: Insert values into  [EC].[DIM_Program] table

INSERT INTO [EC].[DIM_Program]
           ([Program]
           ,[isActive])
     VALUES
           ('NA',1)
          
GO


--Step 6: Insert values into  [EC].[Email_Notifications] table


INSERT INTO [EC].[Email_Notifications]
           ([Module]
           ,[Submission]
           ,[Source]
           ,[SubSource]
           ,[isCSE]
           ,[Status]
           ,[Recipient]
           ,[Subject]
           ,[Body]
           ,[isCCRecipient]
           ,[CCRecipient])
     VALUES
        ('CSR','UI','Direct','Warning',0,'Completed','NA','NA','NA',0,'NA')
	GO




-- Step 7: Create table [EC].[Warning_Log]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

SET ANSI_PADDING ON
GO

CREATE TABLE [EC].[Warning_Log](
	[WarningID] [bigint] IDENTITY(1,1) NOT NULL,
	[FormName] [nvarchar](50) NOT NULL,
	[ProgramName] [nvarchar](50) NOT NULL,
	[SourceID] [int] NOT NULL,
	[StatusID] [int] NOT NULL,
	[SiteID] [int] NOT NULL,
	[EmpLanID] [nvarchar](50) NOT NULL,
	[EmpID] [nvarchar](10) NOT NULL,
	[SubmitterID] [nvarchar](10) NULL,
	[SupID] [nvarchar](10) NOT NULL,
	[MgrID] [nvarchar](10) NOT NULL,
	[WarningGivenDate] [datetime] NOT NULL,
	[Description] [varbinary](max) NULL,
	[CoachingNotes] [varbinary](max) NULL,
	[SubmittedDate] [datetime] NULL,
	[ModuleID] [int] NULL,
	[Active] [bit] NULL,
 CONSTRAINT [PK_Warning_Log] PRIMARY KEY CLUSTERED 
(
	[WarningID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [EC].[Warning_Log]  WITH NOCHECK ADD  CONSTRAINT [fkWarningSiteID] FOREIGN KEY([SiteID])
REFERENCES [EC].[DIM_Site] ([SiteID])
GO

ALTER TABLE [EC].[Warning_Log] CHECK CONSTRAINT [fkWarningSiteID]
GO

ALTER TABLE [EC].[Warning_Log]  WITH NOCHECK ADD  CONSTRAINT [fkWarningSourceID] FOREIGN KEY([SourceID])
REFERENCES [EC].[DIM_Source] ([SourceID])
GO

ALTER TABLE [EC].[Warning_Log] CHECK CONSTRAINT [fkWarningSourceID]
GO

ALTER TABLE [EC].[Warning_Log]  WITH NOCHECK ADD  CONSTRAINT [fkWarningStatusID] FOREIGN KEY([StatusID])
REFERENCES [EC].[DIM_Status] ([StatusID])
GO

ALTER TABLE [EC].[Warning_Log] CHECK CONSTRAINT [fkWarningStatusID]
GO

ALTER TABLE [EC].[Warning_Log] ADD  DEFAULT ((1)) FOR [Active]
GO




***************

-- Step 8: Create table [EC].[Warning_Log_Reason]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Warning_Log_Reason](
	[WarningID] [bigint] NOT NULL,
	[CoachingReasonID] [bigint] NOT NULL,
	[SubCoachingReasonID] [bigint] NOT NULL,
	[Value] [nvarchar](30) NULL,
 CONSTRAINT [PK_Warning_Log_Reason] PRIMARY KEY CLUSTERED 
(
	[WarningID] ASC,
	[CoachingReasonID] ASC,
	[SubCoachingReasonID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [EC].[Warning_Log_Reason]  WITH NOCHECK ADD  CONSTRAINT [fkWarningID] FOREIGN KEY([WarningID])
REFERENCES [EC].[Warning_Log] ([WarningID])
GO

ALTER TABLE [EC].[Warning_Log_Reason] CHECK CONSTRAINT [fkWarningID]
GO






/**************************************************************************
SELECT ALL CODE FROM THIS POINT ON AND PASTE INTO SSMS WINDOW 
POINTING TO eCOACHING DB AND RUN WITH NOTHING SELECTED.
ENSURE THAT WORD WRAP IS TURNED OFF
**************************************************************************/

-- step 9:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strDirectUserHierarchy' 
)
   DROP FUNCTION [EC].[fn_strDirectUserHierarchy]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	=============================================
--	Author:		Susmitha Palacherla
--	Create Date: 09/29/2014
--	Description:	 
--  *  Given an CSR LAN ID, a Submitter LAN ID and a date, return the  Employee ID of the
-- CSR and Submitter. Then check to see if the Employee ID of the Submitter 
-- equals the employee ID of the Supervisor or Manager.
-- If it does the function returns a a 'Yes' to Indicate Direct Hierrachy.
-- last Modified Date: 
-- Last Modified By: 

--	=============================================
CREATE FUNCTION [EC].[fn_strDirectUserHierarchy] 
(
  @strCSRin Nvarchar(20),
  @strSubmitterin Nvarchar(20),
  @dtmDate Datetime
)
RETURNS nvarchar(10)
AS
BEGIN
 
	 DECLARE @strCSRID nvarchar(10),
	         @strSubmitterID nvarchar(10),
	         @strCSRSupID nvarchar(10),
	         @strCSRMgrID nvarchar(10),
	         @DirectHierarchy nvarchar(10)
	
	SET @strCSRID = [EC].[fn_nvcGetEmpIdFromLanId] (@strCSRin, @dtmDate)
	SET @strSubmitterID = [EC].[fn_nvcGetEmpIdFromLanId] (@strSubmitterin, @dtmDate)
	SET @strCSRSupID = (Select Sup_ID from EC.Employee_Hierarchy Where Emp_ID = @strCSRID)
	SET @strCSRMgrID = (Select Mgr_ID from EC.Employee_Hierarchy Where Emp_ID = @strCSRID)
	

 SET @DirectHierarchy =
 CASE WHEN @strSubmitterID = @strCSRSupID THEN 'Yes'
      WHEN @strSubmitterID = @strCSRMgrID THEN 'Yes'
      Else 'No' END
      

   
RETURN @DirectHierarchy

END --fn_strDirectUserHierarchy
GO

--***************

-- Step 10:


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CoachingReasons_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/20/2014
--	Description: *	This procedure takes a Module 
--  and returns the Coaching Reasons associated with the Module. 
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 09/25/2014
-- Modified per SCR 13479 to add logic for incorporating WARNINGs.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module] 
@strModulein nvarchar(30), @strSourcein nvarchar(30), @isSplReason BIT, @splReasonPrty INT, @strCSRin nvarchar(30), @strSubmitterin nvarchar(30)

AS
BEGIN
	DECLARE	
	
	@nvcSQL nvarchar(max),
	@nvcDirectHierarchy nvarchar(10)
	
SET @nvcDirectHierarchy = [EC].[fn_strDirectUserHierarchy] (@strCSRin, @strSubmitterin, GETDATE())

--print @nvcDirectHierarchy
	
IF @isSplReason = 1 

IF @nvcDirectHierarchy = 'Yes'

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = '''+ CONVERT(NVARCHAR,@splReasonPrty) + '''
Order by  [CoachingReasonID]'

Else

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
AND IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 1
AND [splReasonPrty] = 2
Order by  [CoachingReason]'

ELSE

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 and 
IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 0
Order by  [CoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_CoachingReasons_By_Module
GO




--***********************************************************************************************

-- Step 11:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Modules_By_Job_Code' 
)
   DROP PROCEDURE [EC].[sp_Select_Modules_By_Job_Code]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure takes the lan ID of the user and looks up the job code.
--  If Job code exists in the submisison table returns the valid submission modules.
--  If job code does not exist in the submisisons table returns 'CSR' as a valid sumission module.
--  Last Modified By: Susmitha Palacherla
--  Last Modified Date: 10/02/2014
--  Modified per SCR 13479 to Incorporate progressive Warnings for CSRs

--  
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Modules_By_Job_Code] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@nvcCSR nvarchar(30),
	@dtmDate datetime

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)

SET @nvcCSR = (SELECT CASE WHEN [CSR]= 1 THEN N'CSR' ELSE NULL END  as Module FROM [EC].[Module_Submission]
WHERE Job_Code = @nvcEmpJobCode)

--print @nvcCSR

if @nvcCSR is null


/*
 The BySite string below is a combination of the  following
 1. whether site will be a selection
 2. Module Name
 3. Module ID
 4. Whether CSE will be displayed or not
 5. Whether warning will be diaplayed for Direct or Not
*/

SET @nvcSQL = 'SELECT TOP 1 CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1-1'' as BySite
from [EC].[Module_Submission]'
 
ELSE

SET @nvcSQL = 'SELECT Module, BySite FROM 
(SELECT CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1-1'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION
SELECT CASE WHEN [Supervisor]= 1 THEN N''Supervisor'' ELSE NULL END as Module, ''0-Supervisor-2-1-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [Quality]= 1 THEN N''Quality'' ELSE NULL END as Module, ''0-Quality Specialist-3-0-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''')AS Modulelist
where Module is not Null '
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Modules_By_Job_Code
GO

--****************************************



-- Step 12:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Warning_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      10/03/2014
--    Description:     This procedure inserts the Warning records into the Warning_Log table. 
--                     The main attributes of the Warning are written to the warning_Log table.
--                     The Warning Reasons are written to the Warning_Reasons Table.
-- Last Modified Date: 10/22/2014
-- Last Updated By: Susmitha Palacherla
-- Removed Description, Coaching Notes from Insert.
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Warning_Log]
(     @nvcFormName Nvarchar(50),
      @nvcProgramName Nvarchar(50),
      @nvcEmpLanID Nvarchar(40),
      @SiteID INT,
      @nvcSubmitter Nvarchar(40),
      @dtmEventDate datetime,
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @dtmSubmittedDate datetime ,
      @ModuleID INT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE @nvcEmpID Nvarchar(10),
	        @nvcSubmitterID	Nvarchar(10),
	        @nvcSupID nvarchar(10),
	        @nvcMgrID nvarchar(10),
	        @nvcNotPassedSiteID INT,
	        @dtmDate datetime
	        
	  
	 	        
	SET @dtmDate  = GETDATE()   
	SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanID,@dtmDate)
	SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcSupID = (Select Sup_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)
	SET @nvcMgrID = (Select Mgr_ID from EC.Employee_Hierarchy Where Emp_ID = @nvcEmpID)  
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
        
  
         INSERT INTO [EC].[Warning_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[SupID]
           ,[MgrID]
           ,[WarningGivenDate]
           ,[SubmittedDate]
           ,[ModuleID])
     VALUES
           (@nvcFormName
           ,@nvcProgramName 
           ,120
           ,1
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpLanID
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@nvcSupID
           ,@nvcMgrID
           ,@dtmEventDate 
	       ,@dtmSubmittedDate 
		   ,@ModuleID)
            
    
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
    


 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Warning_Log_Reason]
            ([WarningID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             'Opportunity')       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
        

COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Warning_Log


GO







--******************************************




-- Step 13:


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/08/2014
--	Description: 	This procedure displays the Warning Log attributes for given Form Name. 
-- Last Modified Date: 10/22/2014
-- Last Updated By: Susmitha Palacherla
-- Removed Description, Coaching Notes from Select.
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log] @strFormIDin nvarchar(50)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max)

 
  SET @nvcSQL = 'SELECT wl.WarningID 	numID,
		wl.FormName	strFormID,
		m.Module,
		''Direct''	strFormType,
		''Completed''	strFormStatus,
		wl.WarningGivenDate	EventDate,
		sh.Emp_LanID	strSubmitter,		
		sh.Emp_Name	strSubmitterName,
		sh.Emp_Email	strSubmitterEmail,			
		wl.EmpLanID	strEmpLanID,
		eh.Emp_Name	strCSRName,
		eh.Emp_Email	strCSREmail,
		st.City	strCSRSite,
		eh.Sup_LanID	strCSRSup,
		eh.Sup_Name	strCSRSupName,
		eh.Sup_Email	strCSRSupEmail,
		eh.Mgr_LanID	strCSRMgr,
		eh.Mgr_Name	strCSRMgrName,
		eh.Mgr_Email	strCSRMgrEmail,
		''Warning''	strSource,
		wl.SubmittedDate
		FROM [EC].[Employee_Hierarchy] eh join [EC].[Warning_Log] wl 
	    ON [wl].[EMPID] = [eh].[Emp_ID]JOIN [EC].[Employee_Hierarchy] sh
	    ON [wl].[SubmitterID] = [sh].[Emp_ID]JOIN [EC].[DIM_Module] m
	    ON [wl].[ModuleID] = [m].[ModuleID]JOIN [EC].[DIM_Site] st
	    ON [wl].[SiteID] = [st].[SiteID]
	 	Where [wl].[FormName] = '''+@strFormIDin+'''
Order By [wl].[FormName]'
		

EXEC (@nvcSQL)
--Print (@nvcSQL)

	    
END --sp_SelectReviewFrom_Warning_Log


GO



--******************************


-- Step 14:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Warning_Log_Reasons' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log_Reasons]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Warning Log Reason and Sub Coaching Reason values for 
--  a given Form Name.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Warning_Log_Reasons] @strFormIDin nvarchar(50)
AS

BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@intWarningID INT

 
SET @intWarningID = (SELECT WarningID From [EC].[Warning_Log]where[FormName]=@strFormIDin)


SET @nvcSQL = 'SELECT cr.CoachingReason, scr.SubCoachingReason, wlr.value
FROM [EC].[Warning_Log_Reason] wlr join [EC].[DIM_Coaching_Reason] cr
ON[wlr].[CoachingReasonID] = [cr].[CoachingReasonID]Join [EC].[DIM_Sub_Coaching_Reason]scr
ON [wlr].[SubCoachingReasonID]= [scr].[SubCoachingReasonID]
Where WarningID = '''+CONVERT(NVARCHAR(20),@intWarningID) + '''
ORDER BY cr.CoachingReason,scr.SubCoachingReason,wlr.value'

		
EXEC (@nvcSQL)	
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Warning_Log_Reasons
GO



--******************************


-- Step 15:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_MGRCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MGRCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/09/2014
--	Description: *	This procedure selects the CSR Warning records from the Warning_Log table
-- Last Modified Date: 
-- Last Updated By: 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_MGRCSRCompleted] 
@strCSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@bitActive nvarchar(1)
 
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcMgrID Nvarchar(10),
@dtmDate datetime

Set @strFormStatus = 'Completed'
Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)
Set @dtmDate  = GETDATE()   
Set @nvcMgrID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
 

Set @strFormStatus = 'Completed'
Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)
Set @dtmDate  = GETDATE()   
Set @nvcMgrID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)
 

SET @nvcSQL = 'SELECT	[wl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource]	strSource,
		[wl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh join  [EC].[Warning_Log] wl 
ON [wl].[EmpID] = [eh].[Emp_ID] JOIN  [EC].[DIM_Status]s
ON [wl].[StatusID] = [s].[StatusID] JOIN [EC].[DIM_Source]sc
ON [wl].[SourceID] = [sc].[SourceID]
WHERE ([eh].[Mgr_LanID] = '''+@strCSRMGRin+''' OR [eh].[Sup_LanID] = '''+@strCSRMGRin+''')
and [s].[Status] = '''+@strFormStatus+'''
and convert(varchar(8),[wl].[SubmittedDate],112) >= '''+@strSDate+'''
and convert(varchar(8),[wl].[SubmittedDate],112) <= '''+@strEDate+'''
and [wl].[Active] like '''+ CONVERT(NVARCHAR,@bitActive) + '''
and ((eh.Mgr_ID = '''+@nvcMgrID+''' and eh.Mgr_ID <> ''999999'')OR (eh.Sup_ID = '''+@nvcMgrID+''' and eh.Sup_ID <> ''999999''))
Order By [wl].[SubmittedDate] DESC'
	
EXEC (@nvcSQL)	
	   
END --sp_SelectFrom_Warning_Log_MGRCSRCompleted

GO






--******************************


-- Step 16:

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Warning_Log_SUPCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Warning_Log_SUPCSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	10/09/2014
--	Description: *	This procedure selects the CSR Warning records from the Warning_Log table
-- Last Modified Date: 
-- Last Updated By: 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Warning_Log_SUPCSRCompleted] 
@strCSRSUPin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@bitActive nvarchar(1)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8),
@nvcSupID Nvarchar(10),
@dtmDate datetime

Set @strFormStatus = 'Completed'
Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)
Set @dtmDate  = GETDATE()   
Set @nvcSupID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)

SET @nvcSQL = 'SELECT	[wl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource]	strSource,
		[wl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh join  [EC].[Warning_Log] wl 
ON [wl].[EmpID] = [eh].[Emp_ID] JOIN  [EC].[DIM_Status]s
ON [wl].[StatusID] = [s].[StatusID] JOIN [EC].[DIM_Source]sc
ON [wl].[SourceID] = [sc].[SourceID]
WHERE [eh].[Sup_LanID] =  '''+@strCSRSUPin+''' 
and [s].[Status] = '''+@strFormStatus+'''
and convert(varchar(8),[wl].[SubmittedDate],112) >= '''+@strSDate+'''
and convert(varchar(8),[wl].[SubmittedDate],112) <= '''+@strEDate+'''
and [wl].[Active] like '''+ CONVERT(NVARCHAR,@bitActive) + '''
and (eh.Sup_ID = '''+@nvcSupID+''' and eh.Sup_ID <> ''999999'')
Order By [wl].[SubmittedDate] DESC'

	
EXEC (@nvcSQL)	
--PRINT @nvcSQL
	    
END --sp_SelectFrom_Warning_Log_SUPCSRCompleted



GO




--******************************

-- step 17
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_SubCoachingReasons_By_Reason' 
)
   DROP PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module, Direct or Indirect, a Coaching Reason and the submitter lanid 
--  and returns the Sub Coaching Reasons associated with the Coaching Reason.
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 10/29/2014
-- Modified per SCR to display ETS as a Sub coaching Reason irrespective of Job Code
-- for Warnings related Coaching Reasons.
--
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason] 
@strReasonin nvarchar(200), @strModulein nvarchar(30), @strSourcein nvarchar(30), @nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@dtmDate datetime,
	@nvcSQL nvarchar(max)
	
	
SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)


IF  (@strSourcein = 'Direct' and (@nvcEmpJobCode like 'WISY13' OR @nvcEmpJobCode like 'WSQA70' OR @nvcEmpJobCode like '%CS40%' OR @nvcEmpJobCode like '%CS50%' OR @nvcEmpJobCode like '%CS60%'))
OR
(@strSourcein = 'Direct' and @strReasonin in ('Verbal Warning', 'Written Warning' ,'Final Written Warning'))

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
Order by CASE WHEN [SubCoachingReason] in (''Other: Specify reason under coaching details.'', ''Other Policy (non-Security/Privacy)'', ''Other: Specify'') Then 1 Else 0 END, [SubCoachingReason]'

ELSE

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
AND [SubCoachingReason] <> ''ETS''
Order by CASE WHEN [SubCoachingReason] in (''Other: Specify reason under coaching details.'', ''Other Policy (non-Security/Privacy)'', ''Other: Specify'') Then 1 Else 0 END, [SubCoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_SubCoachingReasons_By_Reason
GO







--******************************

-- step 18

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateCoachingLogsForTerms' 
)
   DROP PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    04/09/2014
-- Description:	Inactivate Coaching logs for Termed Employees
-- Last Modified Date: 10/27/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to add Inactivations for warning_log table - SCR 13624.

-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms] 
AS
BEGIN

-- Inactivate Coaching logs for Termed Employees

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms


-- Inactivate Warnings logs for Termed Employees

BEGIN
UPDATE [EC].[Warning_Log]
SET [StatusID] = 2
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpLanID] = H.[Emp_LanID]
AND W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2
OPTION (MAXDOP 1)
END

END  -- [EC].[sp_InactivateCoachingLogsForTerms]
GO



--******************************

-- step 19

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateExpiredWarningLogs' 
)
   DROP PROCEDURE [EC].[sp_InactivateExpiredWarningLogs]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    10/27/2014
-- Description:	Inactivate Expired warning logs.
-- Warning Logs are considered as expired 13 Weeks after the Warning Given Date.
-- Last Modified Date:
-- Last Updated By: 

-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateExpiredWarningLogs] 
AS
BEGIN

-- Inactivate Expired Warning logs 
-- Warnings expire 91 days (13 weeks) from warningGivenDate

BEGIN
UPDATE [EC].[Warning_Log]
SET [Active] = 0
WHERE DATEDIFF(D, [WarningGivenDate],GetDate()) > 91
OPTION (MAXDOP 1)
END


END  -- [EC].[sp_InactivateExpiredWarningLogs]

GO