CCO_eCoaching_V2_DB_Phase2_Implementation_Plan.txt (01)
09/11/2014

Version 01: 09/11/2014 
1. Initial Revision

/*

Changes for  Modular Phase II eCL
 Run in a sql window pointed to eCoaching DB on vdenssdbp07


Implementation Date : 09/12/2014
Implemented By: Bill Leferink

Summary of Changes

There are 3 sections in this dcoument.
Section 1 is for updating, creating and populating data to existing and or new tables.
Section 1 has 12 steps with sub steps. run each sub step identified by begin and end labels one at a time.

Section 2 is for updating and or creating functions and procedures.
This section can be implemented in one step. all code modules will be dropped and recreated if exists.

Section 3 is for staging the updated ssis package and config file.
This step involved copying over 2 files from version manager and staging them on the database server share.

*/

--*****************************************************

		-- Section1--
-- Run each each individual statement identified by begin and end labels one at a time.

--*******************************************************


***************************************
--1. Create DIM_Module table and populate
***************************************
-- <Begin 1a>

CREATE TABLE [EC].[DIM_Module](
	[ModuleID] [int] IDENTITY(1,1) NOT NULL,
	[Module] [nvarchar](30) NOT NULL,
	[BySite] [Bit]NULL,
	[isActive] [Bit] NULL,
	[ByProgram] [Bit]NULL
 CONSTRAINT [Module_ID] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

--</End 1a>



--<Begin 1b>

INSERT INTO [EC].[DIM_Module]
           ([Module],[BySite],[isActive], [ByProgram])
     VALUES
           ('CSR',1,1,1),
           ('Supervisor',0,1,1),
           ('Quality',0,1,1)
GO

--</End 1b>

--<Begin 1c>

SET IDENTITY_INSERT [EC].[DIM_Module] ON

--</End 1c>

-- <Begin 1d>

INSERT INTO [EC].[DIM_Module]
           ([ModuleID],[Module],[BySite],[isActive],[ByProgram])
     VALUES
           (-1,'Unknown',0,0,0)
       GO

--</End 1d>

--<Begin 1e>

SET IDENTITY_INSERT [EC].[DIM_Module] OFF

--</End 1e>


***************************************
--2. Create Employee_selection table and populate
***************************************

--<Begin 2a>

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Employee_Selection](
	[Job_Code] [nvarchar](50) NOT NULL,
	[Job_Code_Description] [nvarchar](50) NULL,
	[isCSR][bit] NULL,
	[isSupervisor][bit] NULL,
	[isQuality][bit] NULL
) ON [PRIMARY]

--</End 2a>

--<Begin 2b>

INSERT INTO [EC].[Employee_Selection]
           ([Job_Code]
           ,[Job_Code_Description]
           ,[isCSR]
           ,[isSupervisor]
           ,[isQuality])
     VALUES
(N'WACS01', N'Assoc Specialist, Cust Svc',1,0,0),
(N'WACQ02', N'Monitor, Quality (CS)',0,0,1),
(N'WACS02', N'Specialist, Customer Service',1,0,0),
(N'WACS40', N'Supervisor, Customer Service',0,1,0),
(N'WACQ12', N'Specialist, Quality (CS)',0,0,1),
(N'WISO13', N'Sr Engineer, Software',1,1,1),
(N'WACS03', N'Sr Specialist, Customer Svc',1,0,0)
GO

--</End  2b>


***************************************
-- 3. Alter table Coaching_log
***************************************

--<begin 3a>

ALTER table [EC].[Coaching_Log]
ADD ModuleID int  

--</End 3a>

--<begin 3b>

  Update [EC].[Coaching_Log]
  set ModuleID = 1
  where ModuleID is NULL 

--</End 3b>

--<begin 3c>

sp_RENAME 'EC.Coaching_Log.CSR' , 'EmpLanID', 'COLUMN'
sp_RENAME 'EC.Coaching_Log.CSRID' , 'EmpID', 'COLUMN'

--</End 3c>

***************************************
-- 4. Create Module_Submission table and populate
***************************************

--<Begin 4a>

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Module_Submission](
	[Job_Code] [nvarchar](50) NOT NULL,
	[Job_Code_Description] [nvarchar](50) NULL,
	[CSR] [bit] NULL,
	[Supervisor] [bit] NULL,
	[Quality] [bit] NULL
) ON [PRIMARY]
GO

--</End 4a>

--<Begin 4b.

INSERT INTO [EC].[Module_Submission]
           ([Job_Code]
           ,[Job_Code_Description]
           ,[CSR]
           ,[Supervisor]
           ,[Quality])
     VALUES
(N'WACQ02', 'Monitor, Quality (CS)',1,0,1),
(N'WACQ03', 'Sr Monitor, Quality (CS)', 1, 0,	1),
(N'WACQ12', 'Specialist, Quality (CS)', 1, 0, 1),
(N'WACQ13', 'Sr Specialist, Quality (CS)', 1,	0, 1),
(N'WACQ40', 'Supervisor, Quality (CS)', 1, 0,	1),
(N'WACS02', 'Specialist, Customer Service', 1, 0, 0),
(N'WACS40', 'Supervisor, Customer Service', 1, 1, 0),
(N'WACS50', 'Manager, Customer Service', 1,	1, 0),
(N'WACS60', 'Sr Manager, Customer Service', 1, 1, 0),
(N'WBCO50', 'Manager, Communications', 1,	1, 0),
(N'WBCO70', 'Director, Communications', 1,	1, 0),
(N'WEEX90', 'Section Vice President', 1, 1, 1),
(N'WEEX91', 'Program Vice President', 1, 1, 1),
(N'WFFA40', 'Supervisor, Finance', 1, 1, 0),
(N'WFFA50', 'Manager, Finance', 1, 1, 0),
(N'WISO13', 'Sr Engineer, Software', 1, 1, 1),
(N'WISY13', 'Sr Analyst, Systems', 1, 1, 1),
(N'WMPR40', 'Supervisor, Production', 1, 1, 0),
(N'WMPR50', 'Manager, Production', 1, 1, 0),
(N'WPOP50', 'Manager, Operations', 1, 1, 0),
(N'WPOP60', 'Sr Manager, Operations', 1, 1, 0),
(N'WPPM11', 'Associate Analyst, Program', 1,	1, 0),
(N'WPPM12', 'Analyst, Program', 1, 0, 1),
(N'WPPM13', 'Sr Analyst, Program', 1, 0, 1),
(N'WPPM50', 'Manager, Program', 1, 1, 0),
(N'WPPM60', 'Sr Manager, Program', 1, 1, 0),
(N'WPPM70', 'Director, Program', 1, 1, 0),
(N'WPPM80', 'Sr Director, Program', 1, 1, 0),
(N'WPPT40', 'Supervisor, Project/Task', 1, 1, 0),
(N'WPPT50', 'Manager, Project/Task', 1, 1, 0),
(N'WPPT60', 'Sr Manager, Project/Task', 1, 1,	0),
(N'WPSM11', 'Associate Analyst, Functional', 1, 1, 0),
(N'WPSM12', 'Analyst, Functional', 1, 1, 0),
(N'WPSM13', 'Sr Analyst, Functional', 1, 1, 0),
(N'WPSM14', 'Principal Analyst, Functional', 1, 1, 0),
(N'WPSM15', 'Sr Princ Analyst, Functional', 1,	1, 0),
(N'WSQA50', 'Manager, Quality Assurance', 1, 0, 1),
(N'WSQA70', 'Director, Quality Assurance', 1,	0, 1),
(N'WSTE13', 'Sr Engineer, Test', 1, 1, 1),
(N'WTTI02', 'Instructor', 1, 1, 0),
(N'WTTR12', 'Specialist, Training',	1, 1,0),
(N'WTTR40', 'Supervisor, Training', 1, 1, 0),
(N'WTTR50', 'Manager, Training',	1, 1, 0)

--</End 4b>



***************************************
-- 5. Changes to DIM_Site
***************************************
--<Begin 5a>

ALTER table [EC].[DIM_Site]
ADD isActive Bit

--</End 5a>

--<Begin 5b>

Update [EC].[DIM_Site]
SET isActive = 1

--</End 5b>

--<Begin 5c>

Update [EC].[DIM_Site]
SET isActive =0
where City in ('Houston','Layton','Unknown','Boise','Brownsville','Pearl')

--</End 5c>


***************************************
-- 6. Insert additional rows into DIM_Source
***************************************
--<begin 6a>

INSERT INTO [EC].[DIM_Source]
           ([SourceID]
           ,[CoachingSource]
           ,[SubCoachingSource]
        )
     VALUES
           (119, 'Direct', 'DMEPOS Escalations'),
           (219, 'Indirect', 'DMEPOS Escalations')
       
GO

--</End 6a>

--Begin 6b>

ALTER Table [EC].[DIM_Source]
ADD isActive BIT 

--</End 6b>

-- <Begin 6c>

ALTER Table [EC].[DIM_Source]
ADD CSR BIT 

--</End 6c>

-- <Begin 6d>

ALTER Table [EC].[DIM_Source]
ADD Supervisor BIT 

--</End 6d>

-- begin 6e>

ALTER Table [EC].[DIM_Source]
ADD Quality BIT 
--/End 6e>

-- <begin 6f>


UPDATE [EC].[DIM_Source]
SET isActive = 1
,CSR = 0
,Supervisor = 0
,Quality = 0

--</End 6f>

-- <begin 6g>

UPDATE [EC].[DIM_Source]
SET CSR = 1
WHERE SourceID in 
(106,109,118,107,103,105,101,102,110,104,108,206,209,218,207,203,205,201,202,210,204,208)
GO
--</End 6g>

--< begin 6h>

UPDATE [EC].[DIM_Source]
SET Quality = 1
WHERE SourceID in 
(106,109,118,107,103,105,102,110,104,108,206,209,218,207,203,205,202,210,204,208)
GO
--/End 6h>

-- <begin 6i>

UPDATE [EC].[DIM_Source]
SET Supervisor = 1
WHERE SourceID in 
(109,118,110,108,119, 209,218,210,208, 219)
GO

--</End 6i>

*********************************************
--7. Create and populate DIM_Program
*********************************************
--<Begin 7a.

CREATE TABLE [EC].[DIM_Program](
	[ProgramID] [int] IDENTITY(1,1) NOT NULL,
	[Program] [nvarchar](30) NOT NULL,
	[isActive][bit]
 CONSTRAINT [ProgramID_ID] PRIMARY KEY CLUSTERED 
(
	[ProgramID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

--</End 7a>

--<Begin 7b>

INSERT INTO [EC].[DIM_Program]
           ([Program]
           ,[isActive])
     VALUES
         ('Marketplace', 1),
         ('Medicare',1)
         
GO

--</End 7b>

--<begin 7c>

SET IDENTITY_INSERT [EC].[DIM_Program] ON

--</End 7c>

--<begin 7d>

INSERT INTO [EC].[DIM_Program]
           ([ProgramID],[Program],[isActive])
     VALUES
           (-1,'Unknown',0)      
GO

--</End 7d>

--< Begin 7e>

SET IDENTITY_INSERT [EC].[DIM_Program] OFF

--</End 7e>




*********************************************************
-- 8. Create table to store Coaching Reason attributes
*********************************************************

--<Begin 8a>

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Coaching_Reason_Selection](
	[CoachingReasonID] [int] NOT NULL,
	[CoachingReason] [nvarchar](200) NOT NULL,
	[SubCoachingReasonID] [int] NOT NULL,
	[SubCoachingReason] [nvarchar](200) NOT NULL,
	[isActive] [bit] NULL,
	[Direct] [bit] NULL,
	[Indirect] [bit] NULL,
	[isOpportunity] [bit] NULL,
	[isReinforcement] [bit] NULL,
	[CSR] [bit] NULL,
	[Quality] [bit] NULL,
	[Supervisor] [bit] NULL,
	[splReason] [bit] NULL
) ON [PRIMARY]

GO

--</End 8a>

*********************************************************
-- 9. Import data from test database into DIM_Coaching_Reason and Coaching_Reson_Selection
*********************************************************
--<Begin 9a>

Import data for  tables from Test

Source Instance -vrivfssdbt02\scort01,1438
Source database - eCoachingTest


Destination Instance - vdenssdbp07\scorp01
Destination database - eCoaching


Copy data for the following 3 tables

Select 
1. [EC].[DIM_Coaching_Reason] --> [EC].[DIM_Coaching_Reason] (Delete existing rows and enable identity insert)
2. [EC].[DIM_Sub_Coaching_Reason] --> [EC].[DIM_Sub_Coaching_Reason] (Delete existing rows and enable identity insert)
3. [EC].[Coaching_Reason_Selection] --> [EC].[Coaching_Reason_Selection]

--</End 9a>



*************************************************************
--10.Create and populate table CallID_Selection
*************************************************************
--<Begin 10a>

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[CallID_Selection](
	[CallIdType] [nvarchar](50) NOT NULL,
	[Format] [nvarchar](50) NULL,
	[CSR] [bit] NULL,
	[Supervisor] [bit] NULL,
	[Quality] [bit] NULL
) ON [PRIMARY]

GO

--</End 10a>

--<Begin 10b>


INSERT INTO [EC].[CallID_Selection]
           ([CallIdType]
           ,[Format]
           ,[CSR]
           ,[Supervisor]
           ,[Quality])
     VALUES
           ('Verint','^[0-9]{10,19}$',1,1,1),
           ('NGD ID','^[a-zA-Z0-9\-]{9,16}$',1,1,1),
          ('Avoke','^[a-zA-Z0-9_]{24}$',1,1,1),
          ('UCID','^[a-zA-Z0-9]{26}$',1,1,1)

GO

--</End 10b>


***********************************************************************
--11. Updates to DIM_Status table
***********************************************************************
--<begin 11a>

UPDATE [EC].[DIM_Status]
SET [Status]= 'Pending Employee Review'
WHERE [StatusID] = 4

--</end 11a>

--<begin 11b>

INSERT INTO [EC].[DIM_Status]
           ([Status])
     VALUES
           ('Pending Sr. Manager Review'),
           ('Pending Quality Lead Review'),
           ('Pending Deputy Program Manager Review')
GO

--</end 11b>


*****************************************************
--12. Create Email Notifications table
*****************************************************
--<Begin 12a>

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Email_Notifications](
	[Module] [nvarchar](30) NULL,
	[Submission] [nvarchar](30) NULL,
	[Source] [nvarchar](30) NULL,
	[SubSource] [nvarchar](100) NULL,
	[isCSE] [bit] NULL,
	[Status] [nvarchar](100) NULL,
	[Recipient] [nvarchar](100) NULL,
	[Subject] [nvarchar](200) NULL,
	[Body] [nvarchar](2000) NULL,
                  [isCCRecipient] [bit] NULL,
	[CCRecipient] [nvarchar](100) NULL
) ON [PRIMARY]
GO

--</End 12a>


--<begin 12b>

INSERT INTO [EC].[Email_Notifications]
           ([Module]
           ,[Submission]
           ,[Source]
           ,[SubSource]
           ,[isCSE]
           ,[Status]
           ,[Recipient]
           ,[Subject]
           ,[Body]
           ,[isCCRecipient]
           ,[CCRecipient])
     VALUES
     ('CSR','UI','Direct','Quality Specialist Coaching',0,'Completed','NA','NA','NA',0,'NA'),
     ('CSR','UI','Direct', 'Quality Specialist Coaching',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL 
entered on <strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Supervisor Coaching',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on
<strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Verint Quality Monitoring',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL
entered on <strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Quality Call Listening',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on
<strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'CMS Reported Item',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on
<strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Leadership Listening',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on
<strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Walk-By',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong>
strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'CSR Reported Issue',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on
<strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Training and Development',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL
entered on <strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct', 'Internal CCO Reporting',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered
on <strong> strDateTime </strong>   for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Direct','Manager Coaching',1,'Pending Employee Review','Employee','eCL: Pending CSR Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity
received on <strong> strDateTime </strong>.',0,'NA'),        
     ('CSR','UI','Direct','Supervisor Coaching',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching
opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Manager Coaching',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Verint Quality Monitoring',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Quality Call Listening',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','CMS Reported Item',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Leadership Listening',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Walk-By',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','CSR Reported Issue',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Training and Development',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','UI','Direct','Internal CCO Reporting',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
     ('CSR','UI','Indirect','Quality Specialist Coaching',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Supervisor Coaching',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Manager Coaching',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Verint Quality Monitoring',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Quality Call Listening',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','CMS Reported Item',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Leadership Listening',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Walk-By',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','CSR Reported Issue',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
	 ('CSR','UI','Indirect','Training and Development',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
     ('CSR','UI','Indirect','Internal CCO Reporting',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below  to review the eCoaching log.',0,'NA'),
     ('CSR','UI','Indirect','Quality Specialist Coaching',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Supervisor Coaching',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Manager Coaching',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Verint Quality Monitoring',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Quality Call Listening',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','CMS Reported Item',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Leadership Listening',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Walk-By',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','CSR Reported Issue',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Training and Development',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
     ('CSR','UI','Indirect','Internal CCO Reporting',1,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong>  for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
	 ('CSR','Outlier','Indirect','OMR',0,'Pending Acknowledgement','Employee','eCL: Pending Acknowledgement','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','Outlier','Indirect','OMR',0,'Pending Employee Review','Employee','eCL: Pending CSR Review ','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','Outlier','Indirect','OMR',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong> that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
	 ('CSR','Outlier','Indirect','OMR',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong>  is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
	 ('CSR','IQS','Indirect','IQS',0,'Pending Acknowledgement','Employee','eCL: Pending Acknowledgement','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
	 ('CSR','IQS','Indirect','IQS',0,'Pending Supervisor Review','Supervisor','eCL: Pending Supervisor Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong>  on <strong> strDateTime </strong> that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
	 ('CSR','IQS','Indirect','IQS',1,'Pending Manager Review','Mananger','eCL: Pending Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA')
GO

--</End 12b>



--<Begin 12c>


INSERT INTO [EC].[Email_Notifications]
           ([Module]
           ,[Submission]
           ,[Source]
           ,[SubSource]
           ,[isCSE]
           ,[Status]
           ,[Recipient]
           ,[Subject]
           ,[Body]
           ,[isCCRecipient]
           ,[CCRecipient])
     VALUES
           ('Supervisor','UI','Direct','Walk-By',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Direct','CSR Reported Issue',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Direct','Training and Development',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Direct','Internal CCO Reporting',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Direct','DMEPOS Escalations',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Direct','Walk-By',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received  on <strong> strDateTime.',0,'NA'),
           ('Supervisor','UI','Direct','CSR Reported Issue',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received  on <strong>  strDateTime </strong> .',0,'NA'),
           ('Supervisor','UI','Direct','Training and Development',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received  on <strong>  strDateTime </strong> . ',0,'NA'),
           ('Supervisor','UI','Direct','Internal CCO Reporting',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received  on <strong>  strDateTime </strong> . ',0,'NA'),
           ('Supervisor','UI','Direct','DMEPOS Escalations',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received  on <strong>  strDateTime </strong> . ',0,'NA'),
           ('Supervisor','UI','Indirect','Walk-By',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered on behalf of  <strong> strPerson </strong> on <strong>  strDateTime  </strong>   that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Supervisor','UI','Indirect','CSR Reported Issue',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered on behalf of  <strong> strPerson </strong> on <strong>  strDateTime  </strong>   that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Supervisor','UI','Indirect','Training and Development',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered on behalf of  <strong> strPerson </strong> on <strong>  strDateTime  </strong>   that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Supervisor','UI','Indirect','Internal CCO Reporting',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered on behalf of  <strong> strPerson </strong> on <strong>  strDateTime  </strong>   that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Supervisor','UI','Indirect','DMEPOS Escalations',0,'Pending Manager Review','Manager','eCL: Pending Manager Review','A new eCoaching Log has been entered on behalf of  <strong> strPerson </strong> on <strong>  strDateTime  </strong>   that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Supervisor','UI','Indirect','Walk-By',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Indirect','CSR Reported Issue',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Indirect','Training and Development',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Indirect','Internal CCO Reporting',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Supervisor','UI','Indirect','DMEPOS Escalations',1,'Pending Sr. Manager Review','Senior Manager','eCL: Pending Sr. Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA')

--</End 12c>



--<Begin 12d>


INSERT INTO [EC].[Email_Notifications]
           ([Module]
           ,[Submission]
           ,[Source]
           ,[SubSource]
           ,[isCSE]
           ,[Status]
           ,[Recipient]
           ,[Subject]
           ,[Body]
           ,[isCCRecipient]
           ,[CCRecipient])
     VALUES
           ('Quality','UI','Direct','Supervisor Coaching',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Manager Coaching',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Verint Quality Monitoring',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Quality Call Listening',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','CMS Reported Item',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Leadership Listening',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Walk-By',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','CSR Reported Issue',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Training and Development',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Internal CCO Reporting',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Direct','Supervisor Coaching',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Manager Coaching',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Verint Quality Monitoring',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Quality Call Listening',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','CMS Reported Item',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Leadership Listening',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Walk-By',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','CSR Reported Issue',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Training and Development',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Direct','Internal CCO Reporting',0,'Pending Employee Review','Employee','eCL: Pending Employee Review','A new eCoaching Log has been entered on your behalf. Please click on the link below to review and verify the coaching opportunity received on <strong> strDateTime </strong>.',0,'NA'),
           ('Quality','UI','Indirect','Supervisor Coaching',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Manager Coaching',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Verint Quality Monitoring',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Quality Call Listening',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','CMS Reported Item',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Leadership Listening',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Walk-By',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','CSR Reported Issue',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Training and Development',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Internal CCO Reporting',0,'Pending Quality Lead Review','Quality Lead','eCL: Pending Quality Lead Review','A new eCoaching Log has been entered on behalf of <strong> strPerson </strong> on <strong> strDateTime </strong>  that requires your action. Please click on the link below to review the eCoaching log.',0,'NA'),
           ('Quality','UI','Indirect','Supervisor Coaching',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Manager Coaching',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Verint Quality Monitoring',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Quality Call Listening',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','CMS Reported Item',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Leadership Listening',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Walk-By',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','CSR Reported Issue',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Training and Development',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA'),
           ('Quality','UI','Indirect','Internal CCO Reporting',1,'Pending Deputy Program Manager Review','Deputy Program Manager','eCL: Pending Deputy Program Manager Review','A new eCoaching Log has been entered and requires your action. Please click on the link below to review and verify that the eCL entered on <strong> strDateTime </strong> for <strong> strPerson </strong> is a valid Customer Service Escalation (CSE). Further directions are provided on the form.',0,'NA')
GO

--</End 12d>

-- </End Section1>

--*****************************************************

		-- Section 2--
-- Procedure and Function changes for Modular Phase II eCL
-- Select entire code in this section, paste into a sql window pointing to eCoaching database and run with nothing selected.

--*******************************************************

-- <Begin Section 2>

--Procedure Changes for  Modular Phase II eCL
-- Open and run once in a sql window pointed to eCoaching DB on vdenssdbp07 with nothing selected


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_CSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
-- Last Modified Date: 08/20/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRCompleted] @strCSRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

 Set @strFormStatus = 'Completed'

SET @nvcSQL = 'SELECT [cl].[FormName] strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName,
		[eh].[Mgr_Name]	strCSRMgrName,
		[S].[Status]	strFormStatus,
		[cl].[SubmittedDate] SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Emp_LanID] = '''+@strCSRin+'''
and [S].[Status] = '''+@strFormStatus+'''
Order By [cl].[SubmittedDate] DESC'

		
EXEC (@nvcSQL)	
END -- sp_SelectFrom_Coaching_Log_CSRCompleted


GO

--*************************************************************************************


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_CSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_CSRPending] @strCSRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30)


 Set @strFormStatus = 'Pending Employee Review'
 Set @strFormStatus2 = 'Pending Acknowledgement'

SET @nvcSQL = 'SELECT [cl].[FormName] strFormID,
		[eh].[Emp_Name]	strCSRName,
		[S].[Status]	strFormStatus,
		[cl].[SubmittedDate] SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Emp_LanID] = '''+@strCSRin+'''
and ([S].[Status] = '''+@strFormStatus+''' or [S].[Status] = '''+@strFormStatus2+''')
Order By [cl].[SubmittedDate] DESC'

		
EXEC (@nvcSQL)	
	    
END -- sp_SelectFrom_Coaching_Log_CSRPending



GO





--**********************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_HistoricalSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	4/30/12
--	Description: *	This procedure selects the CSR e-Coaching completed records to display on SUP historical page
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_HistoricalSUP] 

@strSourcein nvarchar(100),
@strCSRSitein nvarchar(30),
@strCSRin nvarchar(30),
@strSUPin nvarchar(30),
@strMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime,
@strIsOpp nvarchar(8),
@strStatusin nvarchar(30), 
@strIsForce nvarchar(8) 

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
--@strFormStatus2 nvarchar(30),
--@strFormStatus3 nvarchar(30),
--@strFormStatus4 nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8)


Set @strFormStatus = 'Inactive'
--Set @strFormStatus2 = 'Pending CSR Review'
--Set @strFormStatus3 = 'Pending Supervisor Review'
--Set @strFormStatus4 = 'Pending Manager Review'

Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)
 

SET @nvcSQL = 'select	 x.strFormID
		,x.strCSRName
		,x.strCSRSupName
		,x.strCSRMgrName
		,x.strFormStatus
		,x.strSource
		,x.SubmittedDate
		,x.strSubmitterName
		,x.numOpportunity
		,x.numReinforcement
from (
SELECT [cl].[FormName]	strFormID
		,[eh].[Emp_Name]	strCSRName
		,[eh].[Sup_Name]	strCSRSupName
		,[eh].[Mgr_Name]	strCSRMgrName
		,[s].[Status]		strFormStatus
		,[so].[SubCoachingSource]	strSource
		,[cl].[SubmittedDate]	SubmittedDate
		,[sh].[Emp_Name]	strSubmitterName
		,SUM(case when [clr].[Value] = ''Opportunity'' THEN 1 ELSE 0 END) numOpportunity
		,SUM(case when [clr].[Value] = ''Reinforcement'' THEN 1 ELSE 0 END) numReinforcement
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK),
	 [EC].[DIM_Source] so,
	 [EC].[Coaching_Log_Reason] clr,
	 [EC].[DIM_Site] si
WHERE cl.EmpID = eh.Emp_ID
AND cl.StatusID = s.StatusID
AND cl.SubmitterID = sh.EMP_ID 
AND cl.SourceID = so.SourceID
AND cl.CoachingID = clr.CoachingID
AND cl.SiteID = si.SiteID
AND [so].[SubCoachingSource] Like '''+@strSourcein+'''
and [s].[Status] Like '''+@strStatusin+'''
AND ISNULL([eh].[Emp_Name], '' '') LIKE '''+@strCSRin+''' 
AND ISNULL([eh].[Sup_Name], '' '') LIKE '''+@strSUPin+''' 
AND ISNULL([eh].[Mgr_Name], '' '') LIKE '''+@strMGRin+''' 
and ISNULL([si].[City], '' '') LIKE '''+@strCSRSitein+'''
and convert(varchar(8),[cl].[SubmittedDate],112) >= '''+@strSDate+'''
and convert(varchar(8),[cl].[SubmittedDate],112) <= '''+@strEDate+'''
and [s].[Status] <> '''+@strFormStatus+'''
GROUP BY [cl].[FormName],[eh].[Emp_Name],[eh].[Sup_Name],[eh].[Mgr_Name],
[s].[Status],[so].[SubCoachingSource],[cl].[SubmittedDate],[sh].[Emp_Name]
) x
where ISNULL(x.numOpportunity, '' '') LIKE '''+@strIsOpp+'''
and ISNULL(x.numReinforcement, '' '') LIKE '''+@strIsForce+'''
Order By x.SubmittedDate DESC'


EXEC (@nvcSQL)	
	    
END -- sp_SelectFrom_Coaching_Log_HistoricalSUP



GO





--*****************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the CSR e-Coaching records from the Coaching_Log table
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRCompleted] 

@strSourcein nvarchar(100),
@strCSRMGRin nvarchar(30),
@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime
 
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8)

Set @strFormStatus = 'Completed'
Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)
 

SET @nvcSQL = 'SELECT	[cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource]	strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[DIM_Source] sc,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and [cl].[SourceID] = [sc].[SourceID]
and [eh].[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] = '''+@strFormStatus+'''
and [sc].[SubCoachingSource] Like '''+@strSourcein+'''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [eh].[Sup_Name] Like  '''+@strCSRSUPin+''' 
and convert(varchar(8),[cl].[SubmittedDate],112) >= '''+@strSDate+'''
and convert(varchar(8),[cl].[SubmittedDate],112) <= '''+@strEDate+'''
Order By [cl].[SubmittedDate] DESC'
	
EXEC (@nvcSQL)	
	   
END --sp_SelectFrom_Coaching_Log_MGRCSRCompleted


GO




--*********************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRCSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the CSR e-Coaching records from the Coaching_Log table
-- Where the status is Prnding Review. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename  CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending] 

@strCSRMGRin nvarchar(30),
@strCSRSUPin nvarchar(30),
@strSourcein nvarchar(100),
@strCSRin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)




SET @nvcSQL = 'SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource] strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[DIM_Source] sc,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and [cl].[SourceID] = [sc].[SourceID]  
and [eh].[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] like ''Pending%''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [eh].[Sup_Name] Like '''+@strCSRSUPin+'''
Order By [SubmittedDate] DESC'
		
EXEC (@nvcSQL)	   
END --sp_SelectFrom_Coaching_Log_MGRCSRPending
GO





--*****************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the CSR e-Coaching records from the Coaching_Log table
-- Where the status is Pending Review. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename  CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending] 
@strCSRMGRin nvarchar(30),
@strCSRin nvarchar(30),
@strCSRSUPin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(50),
@strFormStatus2 nvarchar(50),
@strFormStatus3 nvarchar(50),
@strFormStatus4 nvarchar(50),
@strFormStatus5 nvarchar(50),
@strFormStatus6 nvarchar(50)


 Set @strFormStatus1 = 'Pending Manager Review'
 Set @strFormStatus2 = 'Pending Supervisor Review'
 Set @strFormStatus3 = 'Pending Acknowledgement'
 Set @strFormStatus4 = 'Pending Sr. Manager Review'
 Set @strFormStatus5 = 'Pending Deputy Program Manager Review'
 Set @strFormStatus6 = 'Pending Quality Lead Review'

SET @nvcSQL = 'SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_LanID] strCSR,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[s].[Status]	strFormStatus,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and ((([eh].[Mgr_LanID] =  '''+@strCSRMGRin+''') and ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus4+''' OR [S].[Status] = '''+@strFormStatus5+''')) 
OR (([eh].[Sup_LanID] =  '''+@strCSRMGRin+''') and ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus2+''' OR [S].[Status] = '''+@strFormStatus3+''' OR [S].[Status] = '''+@strFormStatus6+''')))
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [eh].[Sup_Name] Like '''+@strCSRSUPin+'''
Order By [SubmittedDate] DESC'
		
EXEC (@nvcSQL)	
--Print @nvcsql
	    
END -- sp_SelectFrom_Coaching_Log_MGRPending
GO





--*************************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the support staff's submitted comopleted records from the Coaching_Log table and displayed on dashboard
-- Where the user's LAN is strSubmitter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename  CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30) 

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

 Set @strFormStatus = 'Completed'

SET @nvcSQL = 'SELECT [cl].[FormName]	strFormID
		,[s].[Status]	strFormStatus
		,[eh].[Emp_Name]	strCSRName
		,[eh].[Sup_Name]	strCSRSupName
		,[eh].[Mgr_Name]	strCSRMgrName
		,[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
WHERE cl.EmpID = eh.Emp_ID
AND cl.StatusID = s.StatusID
AND cl.SubmitterID = sh.EMP_ID 
AND sh.Emp_LanID = '''+@strUserin+''' 
AND [eh].[Emp_Name]= '''+@strCSRin+''' 
AND [eh].[Sup_Name]= '''+@strCSRSupin+''' 
AND [eh].[Mgr_Name]= '''+@strCSRMgrin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [cl].[SubmittedDate] DESC'

		
EXEC (@nvcSQL)	
	    
END -- sp_SelectFrom_Coaching_Log_MyCompSubmitted_DashboardStaff


GO






--**********************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the support staff's submitted pending records from the Coaching_Log table and displayed on dashboard
-- Where the user's LAN is strSubmitter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename  CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30) 

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30)


 Set @strFormStatus = 'Pending Employee Review'
 Set @strFormStatus2 = 'Pending Manager Review'
 Set @strFormStatus3 = 'Pending Supervisor Review'


SET @nvcSQL = 'SELECT
		 cl.FormName	strFormID
		,S.Status	strFormStatus
		,eh.Emp_Name	strCSRName
		,eh.Sup_Name	strCSRSupName
		,eh.Mgr_Name	strCSRMgrName
		,cl.SubmittedDate	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.SubmitterID = sh.Emp_ID
and sh.Emp_LanID = '''+@strUserin+''' 
and eh.Emp_Name Like '''+@strCSRin+'%''
and eh.Sup_Name Like '''+@strCSRSupin+'%''
and eh.Mgr_Name Like '''+@strCSRMgrin+'%''
and ((S.Status = '''+@strFormStatus+''') or (S.Status = '''+@strFormStatus2+''') or (S.Status = '''+@strFormStatus3+'''))
Order By cl.SubmittedDate DESC'

		
EXEC (@nvcSQL)	
	    
END --sp_SelectFrom_Coaching_Log_MyPenSubmitted_DashboardStaff


GO





--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the user's recent submitted records from the Coaching_Log table and displayed on dashboard (includes completed)
-- Where the user's LAN is strSubmitter.
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename  CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard] 
@strUserin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'


SET @nvcSQL = 'SELECT [cl].[FormName]	strFormID,
		[s].[Status]	strFormStatus,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName,
		[eh].[Mgr_Name]	strCSRMgrName,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strUserin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [cl].[SubmittedDate] DESC'
		
EXEC (@nvcSQL)	
    
END --sp_SelectFrom_Coaching_Log_MySubmitted_Dashboard


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the Supervisor user's submitted records from the Coaching_Log table and displayed on dashboard (includes completed)
--  Where the user's LAN is strSubmitter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30), 
@strStatusin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT  cl.[FormName] strFormID,
		s.[Status]	strFormStatus,
		eh.[Emp_Name]	strCSRName,
		eh.[Sup_Name]	strCSRSupName,
		eh.[Mgr_Name]	strCSRMgrName,
		cl.[SubmittedDate] SubmittedDate
from EC.Coaching_Log cl WITH(NOLOCK),
	EC.Employee_Hierarchy eh,
	EC.DIM_Status s
where cl.StatusID = s.StatusID
and cl.EmpID = eh.Emp_ID
and cl.submitterID = (
select sh.emp_ID
from EC.Employee_Hierarchy sh
where sh.emp_LanID = '''+@strUserin+''')
and eh.[Emp_Name] LIKE '''+@strCSRin+'''
and eh.[Sup_Name] LIKE '''+@strCSRSupin+'''
and eh.[Mgr_Name] LIKE '''+@strCSRMgrin+'''
and s.[Status] LIKE '''+@strStatusin+'''
and s.[Status] <> '''+@strFormStatus+'''

Order by cl.[SubmittedDate] DESC'

		
EXEC (@nvcSQL)	
	    
END --sp_SelectFrom_Coaching_Log_MySubmitted_DashboardMGR


GO







--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the Supervisor user's submitted records from the Coaching_Log table and displayed on dashboard (includes completed)
-- Where the user's LAN is strSubmitter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP] 
@strUserin nvarchar(30),
@strCSRin nvarchar(30), 
@strCSRSupin nvarchar(30),
@strCSRMgrin nvarchar(30), 
@strStatusin nvarchar(30) 

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'


SET @nvcSQL = 'SELECT  cl.[FormName] strFormID,
		s.[Status]	strFormStatus,
		eh.[Emp_Name]	strCSRName,
		eh.[Sup_Name]	strCSRSupName,
		eh.[Mgr_Name]	strCSRMgrName,
		cl.[SubmittedDate] SubmittedDate
from EC.Coaching_Log cl WITH(NOLOCK),
	EC.Employee_Hierarchy eh,
	EC.DIM_Status s
where cl.StatusID = s.StatusID
and cl.EmpID = eh.Emp_ID
and cl.submitterID = (
select sh.emp_ID
from EC.Employee_Hierarchy sh
where sh.emp_LanID = '''+@strUserin+''')
and eh.[Emp_Name] LIKE '''+@strCSRin+'''
and eh.[Sup_Name] LIKE '''+@strCSRSupin+'''
and eh.[Mgr_Name] LIKE '''+@strCSRMgrin+'''
and s.[Status] LIKE '''+@strStatusin+'''
and s.[Status] <> '''+@strFormStatus+'''
Order by cl.[SubmittedDate] DESC'
	
EXEC (@nvcSQL)	
	    
END --sp_SelectFrom_Coaching_Log_MySubmitted_DashboardSUP


GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the SUP e-Coaching records from the Coaching_Log table
-- Where the status is Completed. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRCompleted] 
@strSourcein nvarchar(100),
@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30),
@strCSRMGRin nvarchar(30),
@strSDatein datetime,
@strEDatein datetime

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strSDate nvarchar(8),
@strEDate nvarchar(8)

Set @strFormStatus = 'Completed'
Set @strSDate = convert(varchar(8),@strSDatein,112)
Set @strEDate = convert(varchar(8),@strEDatein,112)

SET @nvcSQL = 'SELECT	[cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource]	strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[DIM_Source] sc,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and [cl].[SourceID] = [sc].[SourceID]
and [eh].[Sup_LanID] =  '''+@strCSRSUPin+''' 
and [eh].[Mgr_Name] Like '''+@strCSRMGRin+'''
and [S].[Status] = '''+@strFormStatus+'''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [sc].[SubCoachingSource] Like '''+@strSourcein+'''
and convert(varchar(8),[cl].[SubmittedDate],112) >= '''+@strSDate+'''
and convert(varchar(8),[cl].[SubmittedDate],112) <= '''+@strEDate+'''
Order By [cl].[SubmittedDate] DESC'

	
EXEC (@nvcSQL)	
	    
END --sp_SelectFrom_Coaching_Log_SUPCSRCompleted


GO







--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPCSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the CSR e-Coaching records from the Coaching_Log table
-- Where the status is Prnding Review. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPCSRPending] 

@strCSRSUPin nvarchar(30),
@strCSRin nvarchar(30), 
@strSourcein nvarchar(100)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


SET @nvcSQL = 'SELECT	[cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource]	strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[DIM_Source] sc,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and [cl].[SourceID] = [sc].[SourceID]
and [eh].[Sup_LanID] =  '''+@strCSRSUPin+'''
and [S].[Status] like ''Pending%''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [sc].[SubCoachingSource] Like '''+@strSourcein+'''
Order By [eh].[Sup_LanID],[cl].[SubmittedDate] DESC'

		
EXEC (@nvcSQL)	
	    
END--sp_SelectFrom_Coaching_Log_SUPCSRPending



GO





--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the CSR e-Coaching records from the Coaching_Log table
-- Where the status is Prnding Review. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending] @strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30),
@strFormStatus4 nvarchar(30),
@strFormStatus5 nvarchar(30)

 Set @strFormStatus1 = 'Pending Supervisor Review'
 Set @strFormStatus2 = 'Pending Acknowledgement'
 Set @strFormStatus3 = 'Pending Manager Review'
 Set @strFormStatus4 = 'Pending Quality Lead Review'
 Set @strFormStatus5 = 'Pending Employee Review'
 
SET @nvcSQL = 'SELECT [cl].[FormName] strFormID,
			[eh].[Emp_LanID] strCSR,
			[eh].[Emp_Name]	strCSRName,
			[eh].[Sup_Name] strCSRSupName,
			[S].[Status]	strFormStatus,
			[cl].[SubmittedDate] SubmittedDate
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and (((eh.[Sup_LanID] = '''+@strCSRSUPin+''')
and ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus2+'''OR [S].[Status] = '''+@strFormStatus3+'''OR [S].[Status] = '''+@strFormStatus4+'''))
or (eh.[Emp_LanID] = '''+@strCSRSUPin+''' and [S].[Status] = '''+@strFormStatus5+'''))

Order By [cl].[SubmittedDate] DESC'
		
EXEC (@nvcSQL)	
	    
END --sp_SelectFrom_Coaching_Log_SUPPending
GO


--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctCSRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	4/30/12
--	Description: *	This procedure selects the distinct CSRs from completed e-Coaching records to display on Historical dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


 Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.Emp_Name	CSR,
		s.City	strCSRSite
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Site] s,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.SiteID = s.SiteID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Emp_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctCSRCompleted


GO





--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctCSRCompleted2' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted2]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	4/30/12
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctCSRCompleted2] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.Emp_Name	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Emp_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctCSRCompleted2


GO



--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctMGRCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	7/12/12
--	Description: *	This procedure selects the distinct MGRs from completed e-Coaching records to display on Historical dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.Mgr_Name MGR,
		s.City	strCSRSite
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Site] s,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.SiteID = s.SiteID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Mgr_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctMGRCompleted


GO


--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctMGRCompleted2' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted2]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	7/12/12
--	Description: *	This procedure selects the distinct MGRs from completed e-Coaching records to display on Historical dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctMGRCompleted2] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.Mgr_Name MGR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Mgr_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctMGRCompleted2


GO


--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctSUPCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	7/12/12
--	Description: *	This procedure selects the distinct SUPs from completed e-Coaching records to display on Historical dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


 Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.Sup_Name	SUP,
		s.City	strCSRSite
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Site] s,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.SiteID = s.SiteID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Sup_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctSUPCompleted


GO

--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogDistinctSUPCompleted2' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted2]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	7/12/12
--	Description: *	This procedure selects the distinct SUPs from completed e-Coaching records to display on Historical dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogDistinctSUPCompleted2] 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'


SET @nvcSQL = 'SELECT DISTINCT eh.Sup_Name	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] st,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = st.StatusID
and st.Status <> '''+@strFormStatus+'''
Order By eh.Sup_Name ASC'

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogDistinctSUPCompleted2


GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSR] @strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30)

Set @strFormStatus = 'Pending Manager Review'
Set @strFormStatus2 = 'Pending Supervisor Review'
Set @strFormStatus3 = 'Pending Acknowledgement'


SET @nvcSQL = 'SELECT DISTINCT	[eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and (([eh].[Mgr_LanID] =  '''+@strCSRMGRin+''' and [S].[Status] = '''+@strFormStatus+''') OR ([eh].[Sup_LanID] =  '''+@strCSRMGRin+''' and ([S].[Status] = '''+@strFormStatus2+''' or [S].[Status] = '''+@strFormStatus3+''')))
Order By [eh].[Emp_Name] ASC'
		
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogMgrDistinctCSR


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT distinct [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Emp_Name] ASC'	

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogMgrDistinctCSRSubmitted


GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam] 

@strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max)


SET @nvcSQL = 'SELECT DISTINCT [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] like ''Pending%''
Order By [eh].[Emp_Name] ASC'
		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogMgrDistinctCSRTeam
GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted] 

@strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


 Set @strFormStatus = 'Completed'

SET @nvcSQL = 'SELECT DISTINCT [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] = '''+@strFormStatus+'''
Order By [eh].[Emp_Name] ASC'
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogMgrDistinctCSRTeamCompleted


GO





--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT distinct [eh].[Mgr_Name]	MGR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Mgr_Name] ASC'	

		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogMgrDistinctMGRSubmitted


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUP] @strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30)

Set @strFormStatus = 'Pending Manager Review'
Set @strFormStatus2 = 'Pending Supervisor Review'
Set @strFormStatus3 = 'Pending Acknowledgement'

		
SET @nvcSQL = 'SELECT DISTINCT	[eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EmpID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and (([eh].[Mgr_LanID] =  '''+@strCSRMGRin+''' and [S].[Status] = '''+@strFormStatus+''') OR ([eh].[Sup_LanID] =  '''+@strCSRMGRin+''' and ([S].[Status] = '''+@strFormStatus2+''' or [S].[Status] = '''+@strFormStatus3+''')))
Order By [eh].[Sup_Name] ASC'
		

		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogMgrDistinctSUP


GO



--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT distinct [eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Sup_Name] ASC'	

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogMgrDistinctSUPSubmitted


GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam] 

@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max)


SET @nvcSQL = 'SELECT DISTINCT [eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] like ''Pending%''
Order By [eh].[Sup_Name] ASC'
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogMgrDistinctSUPTeam



GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted] 

@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


 Set @strFormStatus = 'Completed'

SET @nvcSQL = 'SELECT DISTINCT [eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Mgr_LanID] = '''+@strCSRMGRin+'''
and [S].[Status] = '''+@strFormStatus+'''
Order By [eh].[Sup_Name] ASC'

		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogMgrDistinctSUPTeamCompleted


GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


Set @strFormStatus = 'Completed'
		
SET @nvcSQL = 'SELECT distinct [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Emp_Name] ASC'		

EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogStaffDistinctCompletedCSRSubmitted


GO


--*************************************************************


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted] 
@strCSRMGRin nvarchar(30)

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Completed'
		
SET @nvcSQL = 'SELECT distinct [eh].[Mgr_Name]	MGR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EMPID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Mgr_Name] ASC'		

EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogStaffDistinctCompletedMGRSubmitted


GO





--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct Supervisors from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted] 
@strCSRMGRin nvarchar(30)

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Completed'	

SET @nvcSQL = 'SELECT distinct [eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
Order By [eh].[Sup_Name] ASC'

EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogStaffDistinctCompletedSUPSubmitted


GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted] 
@strCSRMGRin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30)

Set @strFormStatus = 'Completed'
Set @strFormStatus2 = 'Inactive'


SET @nvcSQL = 'SELECT distinct [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
and s.[Status] <> '''+@strFormStatus+'''
AND S.Status <> '''+@strFormStatus2+'''
Order By [eh].[Emp_Name] ASC'		

		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingCSRSubmitted


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted] 
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30)

Set @strFormStatus = 'Completed'
Set @strFormStatus2 = 'Inactive'

SET @nvcSQL = 'SELECT distinct [eh].[Mgr_Name]	MGR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
		AND S.Status <> '''+@strFormStatus+'''
		AND S.Status <> '''+@strFormStatus2+'''
Order By [eh].[Mgr_Name] ASC'		

 
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogStaffDistinctPendingMGRSubmitted


GO





--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct Supervisors from e-Coaching records to display on staff dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted]  
@strCSRMGRin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30),
@strFormStatus2 nvarchar(30)

Set @strFormStatus = 'Completed'
Set @strFormStatus2 = 'Inactive'

 
SET @nvcSQL = 'SELECT distinct [eh].[Sup_Name]	SUP
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.[SubmitterID] = sh.[Emp_ID]
and sh.[Emp_LanID] = '''+@strCSRMGRin+''' 
		AND S.Status <> '''+@strFormStatus+'''
		AND S.Status <> '''+@strFormStatus2+'''
Order By [eh].[Sup_Name] ASC' 
 
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogStaffDistinctPendingSUPSubmitted


GO






--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSR] @strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.[Emp_Name] AS CSR
FROM [EC].[Coaching_Log] cl WITH(NOLOCK),
[EC].[Employee_Hierarchy] eh,
[EC].[Employee_Hierarchy] sh,
[EC].[DIM_Status] s
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.SubmitterID = sh.emp_ID
and sh.Emp_LanID = '''+@strCSRSUPin+''' 
and s.Status <> '''+@strFormStatus+'''
Order By CSR ASC'
		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogSupDistinctCSR


GO



--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeam' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeam] 

@strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max)



SET @nvcSQL = 'SELECT DISTINCT [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and eh.[Sup_LanID] = '''+@strCSRSUPin+'''
and [S].[Status] like ''Pending%''
Order By [eh].[Emp_Name] ASC'
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeam
GO




--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct CSRs from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted] 

@strCSRSUPin nvarchar(30)
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)


 Set @strFormStatus = 'Completed'


SET @nvcSQL = 'SELECT DISTINCT [eh].[Emp_Name]	CSR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and [eh].[Sup_LanID] = '''+@strCSRSUPin+'''
and [S].[Status] = '''+@strFormStatus+'''
Order By [eh].[Emp_Name] ASC'
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogSupDistinctCSRTeamCompleted


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGR' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGR] @strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.[Mgr_Name] AS MGR
FROM [EC].[Coaching_Log] cl WITH(NOLOCK),
[EC].[Employee_Hierarchy] eh,
[EC].[Employee_Hierarchy] sh,
[EC].[DIM_Status] s
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.SubmitterID = sh.Emp_ID
and sh.Emp_LanID = '''+@strCSRSUPin+''' 
and s.Status <> '''+@strFormStatus+'''
Order By MGR ASC'
		
EXEC (@nvcSQL)	

End --sp_SelectFrom_Coaching_LogSupDistinctMGR


GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct managers for supervisors from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted]

 @strCSRSUPin nvarchar(30)

AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Completed'

SET @nvcSQL = 'SELECT DISTINCT [eh].[Mgr_Name]	MGR
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and [eh].[Sup_LanID] = '''+@strCSRSUPin+'''
and [S].[Status] = '''+@strFormStatus+'''
Order By [eh].[Mgr_Name] ASC'
		
EXEC (@nvcSQL)	

End  --sp_SelectFrom_Coaching_LogSupDistinctMGRTeamCompleted


GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_LogSupDistinctSUP' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: *	This procedure selects the distinct supervisors from e-Coaching records to display on dashboard for filter. 
-- Last Modified Date: 08/20/14
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSRID to EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_LogSupDistinctSUP] @strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus nvarchar(30)

Set @strFormStatus = 'Inactive'

SET @nvcSQL = 'SELECT DISTINCT eh.[Sup_Name] AS SUP
FROM [EC].[Coaching_Log] cl WITH(NOLOCK),
[EC].[Employee_Hierarchy] eh,
[EC].[Employee_Hierarchy] sh,
[EC].[DIM_Status] s
where cl.EmpID = eh.Emp_ID
and cl.StatusID = s.StatusID
and cl.SubmitterID = sh.Emp_ID
and sh.Emp_LanID = '''+@strCSRSUPin+''' 
and s.Status <> '''+@strFormStatus+'''
Order By SUP ASC'
		
EXEC (@nvcSQL)	

End -- sp_SelectFrom_Coaching_LogSupDistinctSUP


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectCoaching4Contact' 
)
   DROP PROCEDURE [EC].[sp_SelectCoaching4Contact]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:		       Jourdain Augustin
--	Create Date:	   6/10/13
--	Description: 	   This procedure queries db for feed records to send out mail
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectCoaching4Contact]
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(30),
@strFormStatus2 nvarchar(30),
@intSource1 int,
@intSource2 int,
@strFormType nvarchar(30),
@strFormMail nvarchar (30)

 Set @strFormStatus1 = 'Completed'
 Set @strFormStatus2 = 'Inactive'
 Set @intSource1 = 211
 Set @intSource2 = 212
 
 Set @strFormType = 'Indirect'
--Set @strFormMail = 'jourdain.augustin@gdit.com'
 
SET @nvcSQL = 'SELECT   cl.CoachingID	numID	
		,cl.FormName	strFormID
		,s.Status		strFormStatus
		,eh.Emp_Email	strCSREmail
		,eh.Sup_Email	strCSRSupEmail
		,eh.Mgr_Email	strCSRMgrEmail
		,so.SubCoachingSource	strSource
		,eh.Emp_Name	strCSRName
		,so.CoachingSource	strFormType
		,cl.SubmittedDate	SubmittedDate
		,cl.CoachingDate	CoachingDate
		,cl.EmailSent	EmailSent
		,cl.sourceid
		,cl.isCSE
		,mo.Module
FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[DIM_Status] s,
	 [EC].[Coaching_Log] cl,
	 [EC].[DIM_Source] so,
	 [EC].[DIM_Module] mo
WHERE cl.EMPID = eh.Emp_ID
AND cl.StatusID = s.StatusID
AND cl.SourceID = so.SourceID
AND cl.ModuleID = mo.ModuleID
AND S.Status <> '''+@strFormStatus1+'''
AND S.Status <> '''+@strFormStatus2+'''
AND cl.SourceID in (211,212)
AND cl.EmailSent = ''False''
AND ((s.status =''Pending Acknowledgement'' and eh.Emp_Email is NOT NULL and eh.Sup_Email is NOT NULL)
OR (s.Status =''Pending Supervisor Review'' and eh.Sup_Email is NOT NULL)
OR (s.Status =''Pending Manager Review'' and eh.Mgr_Email is NOT NULL)
OR (s.Status =''Pending Employee Review'' and eh.Emp_Email is NOT NULL))
AND LEN(cl.FormName) > 10
Order By cl.SubmittedDate DESC'
--and [strCSREmail] = '''+@strFormMail+'''
EXEC (@nvcSQL)	
	    
END --sp_SelectCoaching4Contact
GO




--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name. 
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log] @strFormIDin nvarchar(50)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max)

	 
  SET @nvcSQL = 'SELECT cl.CoachingID 	numID,
		cl.FormName	strFormID,
		m.Module,
		sc.CoachingSource	strFormType,
		s.Status	strFormStatus,
		cl.EventDate	EventDate,
		cl.CoachingDate	CoachingDate,
		sh.Emp_LanID	strSubmitter,		
		sh.Emp_Name	strSubmitterName,
		sh.Emp_Email	strSubmitterEmail,			
		cl.EmpLanID	strEmpLanID,
		eh.Emp_Name	strCSRName,
		eh.Emp_Email	strCSREmail,
		st.City	strCSRSite,
		eh.Sup_LanID	strCSRSup,
		eh.Sup_Name	strCSRSupName,
		eh.Sup_Email	strCSRSupEmail,
		eh.Mgr_LanID	strCSRMgr,
		eh.Mgr_Name	strCSRMgrName,
		eh.Mgr_Email	strCSRMgrEmail,
		sc.SubCoachingSource	strSource,
		CL.isUCID    isUCID,
		CL.UCID	strUCID,
		CL.isVerintID	isVerintMonitor,
		CL.VerintID	strVerintID,
		CL.VerintFormName VerintFormName,
		CL.isAvokeID	isBehaviorAnalyticsMonitor,
		CL.AvokeID	strBehaviorAnalyticsID,
		CL.isNGDActivityID	isNGDActivityID,
		CL.NGDActivityID	strNGDActivityID,
		CASE WHEN CC.CSE = ''Opportunity'' Then 1 ELSE 0 END	"Customer Service Escalation",
		CASE WHEN CC.CCI is Not NULL Then 1 ELSE 0 END	"Current Coaching Initiative",
		CASE WHEN CC.OMR is Not NULL Then 1 ELSE 0 END	"OMR / Exceptions",
		CL.Description txtDescription,
		CL.CoachingNotes txtCoachingNotes,
		CL.isVerified,
		CL.SubmittedDate,
		CL.StartDate,
		CL.SupReviewedAutoDate,
		CL.isCSE,
		CL.MgrReviewManualDate,
		CL.MgrReviewAutoDate,
		CL.MgrNotes txtMgrNotes,
		CL.isCSRAcknowledged,
		CL.isCoachingRequired,
		CL.CSRReviewAutoDate,
		CL.CSRComments txtCSRComments
	 FROM [EC].[Employee_Hierarchy] eh,
	 [EC].[Employee_Hierarchy] sh,
	 [EC].[DIM_Status] s,
	 [EC].[DIM_Source] sc,
	 [EC].[DIM_Site] st,
	 [EC].[DIM_Module] m,
	 (SELECT  ccl.FormName,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Customer Service Escalation'' THEN [clr].[Value] ELSE NULL END)	CSE,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Current Coaching Initiative'' THEN [clr].[Value] ELSE NULL END)	CCI,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''OMR / Exceptions'' THEN [clr].[Value] ELSE NULL END)	OMR
	 FROM [EC].[Coaching_Log_Reason] clr,
	 [EC].[DIM_Coaching_Reason] cr,
	 [EC].[Coaching_Log] ccl WITH(NOLOCK)
	 WHERE [ccl].[FormName] = '''+@strFormIDin+'''
	 AND [clr].[CoachingReasonID] = [cr].[CoachingReasonID]
	 AND [ccl].[CoachingID] = [clr].[CoachingID] 
	 GROUP BY ccl.FormName ) CC,
	 [EC].[Coaching_Log] cl WITH(NOLOCK)
where [cl].[EMPID] = [eh].[Emp_ID]
and [cl].[StatusID] = [s].[StatusID]
and [cl].[SourceID] = [sc].[SourceID]
and [cl].[SiteID] = [st].[SiteID]
and [cl].[ModuleID] = [m].[ModuleID]
and [cl].[SubmitterID] = [sh].[Emp_ID]
and [cl].[FormName] = [CC].[FormName] 
Order By [cl].[FormName]'
		

EXEC (@nvcSQL)
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log
GO




--*************************************************************
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log_Reasons' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_Reasons]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log Reason and Sub Coaching Reason values for 
--  a given Form Name.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_Reasons] @strFormIDin nvarchar(50)
AS

BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@intCoachingID INT

 
SET @intCoachingID = (SELECT CoachingID From [EC].[Coaching_Log]where[FormName]=@strFormIDin)


SET @nvcSQL = 'SELECT cr.CoachingReason, scr.SubCoachingReason, clr.value
FROM [EC].[Coaching_Log_Reason] clr join [EC].[DIM_Coaching_Reason] cr
ON[clr].[CoachingReasonID] = [cr].[CoachingReasonID]Join [EC].[DIM_Sub_Coaching_Reason]scr
ON [clr].[SubCoachingReasonID]= [scr].[SubCoachingReasonID]
Where CoachingID = '''+CONVERT(NVARCHAR(20),@intCoachingID) + '''
ORDER BY cr.CoachingReason,scr.SubCoachingReason,clr.value'

		
EXEC (@nvcSQL)	
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log_Reasons

GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Email_Attributes' 
)
   DROP PROCEDURE [EC].[sp_Select_Email_Attributes]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/1814
--	Description: *	This procedure takes a Module, Source(Direct/Indirect), SubCoachingSource and isCSE and returns the  
--                  Status and Email attributes.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Email_Attributes] 
@strModulein NVARCHAR(30), @intSourceIDin INT, @bitisCSEin BIT

AS
BEGIN
	DECLARE	
	@Source nvarchar(30),
	@SubSource nvarchar(100),
	@nvcSQL nvarchar(max)
	
	SET @Source = (Select [CoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)
	SET @SubSource = (Select [SubCoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)

SET @nvcSQL = 'Select [EC].[fn_strStatusIDFromStatus]([Status]) as StatusID, [Status]as StatusName, [Recipient] as Receiver,
 [Body] as EmailText, [isCCRecipient] as isCCReceiver, [CCRecipient] as CCReceiver
 from [EC].[Email_Notifications]
Where [Module]= '''+@strModulein+'''
and [Source] = '''+@Source+'''
and [SubSource] = '''+@SubSource+'''
and [isCSE] = '''+CONVERT(NVARCHAR(1),@bitisCSEin)+''''

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Email_Attributes

GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Whoami' 
)
   DROP PROCEDURE [EC].[sp_Whoami]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Jourdain Augustin
--	Create Date:	07/22/13
--  Last Modified Date: 08/21/14
--  Last Modified By: Susmitha Palacherla
--  Modified during the modular design to look up the Employee ID using the Employee ID From Lan ID Function.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Whoami] 

(
 @strUserin	Nvarchar(30)
)
AS

BEGIN
DECLARE	
@EmpID nvarchar(100),
@nvcSQL nvarchar(max)

--SET @EmpID = (Select Emp_ID from [EC].[Employee_Hierarchy]where Emp_LanID = @strUserin)

SET @EmpID = (Select [EC].[fn_nvcGetEmpIdFromLanId](@strUserin,GETDATE()))
/*
SET @nvcSQL = 'SELECT [Emp_Job_Code] + ''$'' + [Emp_Email] + ''$'' +  [Emp_Name] as Submitter
              FROM [EC].[Employee_Hierarchy]WITH(NOLOCK)
              WHERE [Emp_LanID] = '''+@strUserin+''''
 */
 SET @nvcSQL = 'SELECT [Emp_Job_Code] + ''$'' + [Emp_Email] + ''$'' +  [Emp_Name] as Submitter
              FROM [EC].[Employee_Hierarchy]WITH(NOLOCK)
              WHERE [Emp_ID] = '''+@EmpID+''''
            
		
EXEC (@nvcSQL)	
--Print @nvcSQL
END --sp_Whoami

GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fnSplit_WithRowID' 
)
   DROP FUNCTION [EC].[fnSplit_WithRowID]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      08/03/2014
--    Description:     This Function takes a string of values separated by commas 
--                     and parses it returning individual values with a row number.
--    =====================================================================

CREATE FUNCTION [EC].[fnSplit_WithRowID](
    @InputList NVARCHAR(200) -- List of delimited items
  , @Delimiter NVARCHAR(1)   -- delimiter that separates items
) RETURNS @List TABLE (RowID INT Identity (1,1),Item NVARCHAR(200))

BEGIN
DECLARE @Item VARCHAR(200)
WHILE CHARINDEX(@Delimiter,@InputList,0) <> 0
 BEGIN
 SELECT
  @Item=RTRIM(LTRIM(SUBSTRING(@InputList,1,CHARINDEX(@Delimiter,@InputList,0)-1))),
  @InputList=RTRIM(LTRIM(SUBSTRING(@InputList,CHARINDEX(@Delimiter,@InputList,0)+LEN(@Delimiter),LEN(@InputList))))
 
 IF LEN(@Item) > 0
  INSERT INTO @List SELECT @Item
 END

IF LEN(@InputList) > 0
 INSERT INTO @List SELECT @InputList -- Put the last item in
RETURN
END -- fnSplit_WithRowID

GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Employees_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_Employees_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure pulls the list of Employee names to be displayed 
--  in the drop downs for the selected Module using the job_code in the Employee_Selection table.
--  Created to replace the sp_SelectCSRsbyLocation used by the original CSR Module 
--  
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Employees_By_Module] 

@strModulein nvarchar(30), @strCSRSitein nvarchar(30)= NULL

AS

BEGIN
DECLARE	
@isBySite BIT,
@nvcSQL nvarchar(max),
@nvcSQL01 nvarchar(max),
@nvcSQL02 nvarchar(max),
@nvcSQL03 nvarchar(max)

SET @nvcSQL01 = 'select [Emp_Name] + '' ('' + [Emp_LanID] + '') '' + [Emp_Job_Description] as FrontRow1
	  ,[Emp_Name] + ''$'' + [Emp_Email] + ''$'' + [Emp_LanID] + ''$'' + [Sup_Name] + ''$'' + [Sup_Email] + ''$'' + [Sup_LanID] + ''$'' + [Sup_Job_Description] + ''$'' + [Mgr_Name] + ''$'' + [Mgr_Email] + ''$'' + [Mgr_LanID] + ''$'' + [Mgr_Job_Description]  + ''$'' + [Emp_Site] as BackRow1, [Emp_Site]
       from [EC].[Employee_Hierarchy] WITH (NOLOCK) JOIN [EC].[Employee_Selection]
       on [EC].[Employee_Hierarchy].[Emp_Job_Code]= [EC].[Employee_Selection].[Job_Code]
where [EC].[Employee_Selection].[is'+ @strModulein + ']= 1'

SET @nvcSQL02 = ' and [Emp_Site] = ''' +@strCSRSitein + ''''


SET @nvcSQL03 = ' and [End_Date] = ''99991231''
and [Emp_LanID]is not NULL and [Sup_LanID] is not NULL and [Mgr_LanID]is not NULL
order By [Emp_Name] ASC'

--IF @strModulein = 'CSR'
SET @isBySite = (SELECT BySite FROM [EC].[DIM_Module] Where [Module] = @strModulein and isActive =1)
IF @isBySite = 1

SET @nvcSQL = @nvcSQL01 + @nvcSQL02 +@nvcSQL03 
ELSE
SET @nvcSQL = @nvcSQL01 + @nvcSQL03 

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Employees_By_Module


GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Modules_By_Job_Code' 
)
   DROP PROCEDURE [EC].[sp_Select_Modules_By_Job_Code]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	7/31/14
--	Description: *	This procedure takes the lan ID of the user and looks up the job code.
--  If Job code exists in the submisison table returns the valid submission modules.
--  If job code does not exist in the submisisons table returns 'CSR' as a valid sumission module.

--  
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Modules_By_Job_Code] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@nvcCSR nvarchar(30),
	@dtmDate datetime

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)

SET @nvcCSR = (SELECT CASE WHEN [CSR]= 1 THEN N'CSR' ELSE NULL END  as Module FROM [EC].[Module_Submission]
WHERE Job_Code = @nvcEmpJobCode)

if @nvcCSR is null

/*
 The BySite string below is a combination of the  following
 whether site will be a selection
 Module Name
 Module ID
 Whether CSE will be displayed or not
*/

SET @nvcSQL = 'SELECT TOP 1 CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1'' as BySite
from [EC].[Module_Submission]'
 
ELSE

SET @nvcSQL = 'SELECT Module, BySite FROM 
(SELECT CASE WHEN [CSR]= 1 THEN N''CSR'' ELSE N''CSR'' END as Module, ''1-CSR-1-1'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION
SELECT CASE WHEN [Supervisor]= 1 THEN N''Supervisor'' ELSE NULL END as Module, ''0-Supervisor-2-1'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+'''
UNION 
SELECT CASE WHEN [Quality]= 1 THEN N''Quality'' ELSE NULL END as Module, ''0-Quality Specialist-3-0'' as BySite from [EC].[Module_Submission] 
where Job_Code = '''+@nvcEmpJobCode+''')AS Modulelist
where Module is not Null '


---Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Modules_By_Job_Code


GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Display_Sites_For_Module' 
)
   DROP PROCEDURE [EC].[sp_Display_Sites_For_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/01/14
--	Description: *	This procedure takes in a Module ID and returns the list of sites if the Module passed in 
--  supports By Site submissions.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Display_Sites_For_Module] 

@strModulein nvarchar(30)

AS

BEGIN
DECLARE	
@isBySite BIT,
@nvcSQL nvarchar(max)


SET @isBySite = (SELECT BySite FROM [EC].[DIM_Module] Where [Module] = @strModulein and isActive =1)
IF @isBySite = 1

SET @nvcSQL = 'select [SiteID],[City] FROM [EC].[DIM_Site]WHERE [isActive] = 1 ORDER BY City'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Display_Sites_For_Module
  

GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Source_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_Source_By_Module]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module and Source (Direct or Indirect)
--  and returns the Source IDis for the coresponding Sub Coaching Source.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Source_By_Module] 
@strModulein nvarchar(30), @strSourcein nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'Select [SourceID] as SourceID, [SubCoachingSource]as Source from [EC].[DIM_Source]
Where ' + @strModulein +' = 1 and 
IsActive = 1 and 
CoachingSource =  '''+@strSourcein+'''
Order by [SubCoachingSource] '


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_Source_By_Module

GO


--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Programs' 
)
   DROP PROCEDURE [EC].[sp_Select_Programs]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure returns a list of Active Programs to
--  be made available in the UI submission page.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Programs] 
@strModulein nvarchar(30)

AS
BEGIN
	DECLARE	
	@isByProgram BIT,
	@nvcSQL nvarchar(max)
	
SET @isByProgram = (SELECT ByProgram FROM [EC].[DIM_Module] Where [Module] = @strModulein and isActive =1)
IF @isByProgram = 1

SET @nvcSQL = 'Select [Program] as Program from [EC].[DIM_Program]
Where isActive = 1
Order by [Program] '

--Print @nvcSQL

EXEC (@nvcSQL)	
END


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CoachingReasons_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module 
--  and returns the Coaching Reasons associated with the Module. 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CoachingReasons_By_Module] 
@strModulein nvarchar(30), @strSourcein nvarchar(30), @isSplReason BIT

AS
BEGIN
	DECLARE	
	
	@nvcSQL nvarchar(max)
	
IF @isSplReason = 1

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 and 
IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason]=1
Order by  [CoachingReason]'

Else

SET @nvcSQL = 'Select  DISTINCT [CoachingReasonID] as CoachingReasonID, [CoachingReason] as CoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 and 
IsActive = 1 
AND ' + @strSourcein +' = 1
AND [splReason] = 0
Order by  [CoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_CoachingReasons_By_Module


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_CallID_By_Module' 
)
   DROP PROCEDURE [EC].[sp_Select_CallID_By_Module]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module value and returns the Call Ids 
--                  valid for that Module and the format for the corresponding Ids for validation.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_CallID_By_Module] 
@strModulein nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'Select [CallIdType] as CallIdType, [Format]as IdFormat from [EC].[CallID_Selection]
Where ' + @strModulein +' = 1' 


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_Select_CallID_By_Module

GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_SubCoachingReasons_By_Reason' 
)
   DROP PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module, Direct or Indirect, a Coaching Reason and the submitter lanid 
--  and returns the Sub Coaching Reasons associated with the Coaching Reason.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_SubCoachingReasons_By_Reason] 
@strReasonin nvarchar(200), @strModulein nvarchar(30), @strSourcein nvarchar(30), @nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcEmpID nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@dtmDate datetime,
	@nvcSQL nvarchar(max)
	
	
SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)


IF  @strSourcein = 'Direct' and (@nvcEmpJobCode like 'WISY13' OR @nvcEmpJobCode like 'WSQA70' OR @nvcEmpJobCode like '%CS40%' OR @nvcEmpJobCode like '%CS50%' OR @nvcEmpJobCode like '%CS60%')

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
Order by CASE WHEN [SubCoachingReason] = ''Other: Specify reason under coaching details.'' Then 1 Else 0 END, [SubCoachingReason]'

ELSE

SET @nvcSQL = 'Select [SubCoachingReasonID] as SubCoachingReasonID, [SubCoachingReason] as SubCoachingReason from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
AND [SubCoachingReason] <> ''ETS''
Order by CASE WHEN [SubCoachingReason] = ''Other: Specify reason under coaching details.'' Then 1 Else 0 END, [SubCoachingReason]'

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_SubCoachingReasons_By_Reason


GO





--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Email_Attributes' 
)
   DROP PROCEDURE [EC].[sp_Select_Email_Attributes]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/1814
--	Description: *	This procedure takes a Module, Source(Direct/Indirect), SubCoachingSource and isCSE and returns the  
--                  Status and Email attributes.
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Email_Attributes] 
@strModulein NVARCHAR(30), @intSourceIDin INT, @bitisCSEin BIT

AS
BEGIN
	DECLARE	
	@Source nvarchar(30),
	@SubSource nvarchar(100),
	@nvcSQL nvarchar(max)
	
	SET @Source = (Select [CoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)
	SET @SubSource = (Select [SubCoachingSource] from [EC].[DIM_Source]WHERE [SourceID]=  @intSourceIDin)

SET @nvcSQL = 'Select [EC].[fn_strStatusIDFromStatus]([Status]) as StatusID, [Status]as StatusName, [Recipient] as Receiver,
 [Body] as EmailText, [isCCRecipient] as isCCReceiver, [CCRecipient] as CCReceiver
 from [EC].[Email_Notifications]
Where [Module]= '''+@strModulein+'''
and [Source] = '''+@Source+'''
and [SubSource] = '''+@SubSource+'''
and [isCSE] = '''+CONVERT(NVARCHAR(1),@bitisCSEin)+''''

--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Email_Attributes
GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_CSR_Hierarchy' 
)
   DROP PROCEDURE [EC].[sp_Update_CSR_Hierarchy]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date: 01/20/2014
-- Description:	Performs the following actions.
-- Adds an End Date to an Employee record with a Hierarchy change.
-- Inserts a new row for the Updated Hierarchy.
-- Last Modified Date: 08/21/2014
-- Last Modified By: Susmitha Palacherla
-- Modified to remove the condition to insert and update records for CSRS only. 
-- This will support the Modul approcah being implemented to support non CSR ecls.

-- =============================================
CREATE PROCEDURE [EC].[sp_Update_CSR_Hierarchy] 
AS
BEGIN


-- Assigns End_Date to CSR records with changed Hierarchy.
BEGIN
UPDATE [EC].[CSR_Hierarchy]
SET [EndDate] = DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
FROM [EC].[Employee_Hierarchy]EH JOIN [EC].[CSR_Hierarchy]CH
ON EH.[Emp_ID]= CH.[EmpID]
WHERE (EH.[Sup_ID]<> CH.[SupID]OR EH.[Mgr_ID]<> CH.[MgrID])
AND (EH.[Sup_ID]IS NOT NULL AND EH.[Mgr_ID] IS NOT NULL)
AND CH.[EndDate] = '9999-12-31 00:00:00.000'
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms


-- Inserts new rows for CSRs with changed Hierarchy.
BEGIN
;
With LatestRecord as
(Select [EmpID], max([EndDate])as LEnd_Date from [EC].[CSR_Hierarchy]
 GROUP BY [EmpID])
INSERT INTO [EC].[CSR_Hierarchy]
           ([EmpID]
           ,[SupID]
           ,[MgrID]
           ,[StartDate]
           ,[EndDate]
            )
SELECT distinct EH.[Emp_ID]
,EH.[Sup_ID]
,EH.[Mgr_ID]
, DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
,'9999-12-31 00:00:00.000'
FROM [EC].[Employee_Hierarchy]EH  JOIN
(SELECT C.* FROM [EC].[CSR_Hierarchy] C JOIN  LatestRecord L
ON C. EMPID =L.EMPID WHERE L.LEnd_Date <> '9999-12-31 00:00:00.000') AS CH
on EH.Emp_ID = CH.EmpID
--where EH.[Emp_Job_Code]in ('WACS01','WACS02','WACS03')
WHERE (EH.[Sup_ID]<> CH.[SupID]OR EH.[Mgr_ID]<> CH.[MgrID])
AND (EH.[Sup_ID]IS NOT NULL AND EH.[Mgr_ID] IS NOT NULL)
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Inserts New CSR records 

BEGIN
INSERT INTO [EC].[CSR_Hierarchy]
           ([EmpID]
           ,[SupID]
           ,[MgrID]
           ,[StartDate]
           ,[EndDate] )
SELECT EH.[Emp_ID]
,EH.[Sup_ID]
,EH.[Mgr_ID]
, DATEADD(dd, DATEDIFF(dd, 0, GETDATE()), 0)
,'9999-12-31 00:00:00.000'
FROM [EC].[Employee_Hierarchy]EH LEFT OUTER JOIN [EC].[CSR_Hierarchy]CH
ON EH.[Emp_ID]= CH.[EmpID]
WHERE CH.[EmpID]IS NULL
--AND EH.[Emp_Job_Code]in ('WACS01','WACS02','WACS03')
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms


END --sp_Update_CSR_Hierarchy



GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strSiteNameFromSiteLocation' 
)
   DROP FUNCTION [EC].[fn_strSiteNameFromSiteLocation]
GO
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:              Susmitha Palacherla
-- Create date:         07/25/2013
-- Description:	  Given a site location returns the site name
-- Last modified by: Susmitha Palacherla   
-- Last modified date:  08/21/2014
-- Updated mapping for Arlington during Modular design development.

-- =============================================
CREATE FUNCTION [EC].[fn_strSiteNameFromSiteLocation] (
  @strSiteLocation NVARCHAR(50)
)
RETURNS NVARCHAR(20)
AS
BEGIN
  DECLARE @strSiteName NVARCHAR(20)
  
  IF @strSiteLocation IS NOT NULL
    SET @strSiteName =
      CASE @strSiteLocation 
        WHEN N'AZ-Phoenix-8900 N 22nd Avenue'       THEN N'Phoenix'
        WHEN N'FL-Lynn Haven-1002 Arthur Dr'     THEN N'Lynn Haven'
        WHEN N'FL-Riverview-3020 US Hwy 301 S'       THEN N'Riverview'
        WHEN N'IA-Coralville-2400 Oakdale Blv'        THEN N'Coralville'
        WHEN N'IA-Coralville-2450 Oakdale Blv'        THEN N'Coralville'
        WHEN N'KS-Lawrence-3833 Greenway Dr'      THEN N'Lawrence'
        WHEN N'KY-Corbin-14892 N USHighway25E'      THEN N'Corbin'
        WHEN N'KY-London-4550 Old Whitley Rd'     THEN N'London'
        WHEN N'KY-Winchester-1025 Bypass Rd'     THEN N'Winchester'
        WHEN N'LA-Bogalusa-411 IndustrialPkwy'     THEN N'Bogalusa'
        WHEN N'MS-Hattiesburg-5912 Highway 49'     THEN N'Hattiesburg'
        WHEN N'TX-Houston-5959 Corporate Dr'     THEN N'Houston'
        WHEN N'TX-Waco-1205 N Loop 340'        THEN N'Waco'
        WHEN N'UT-Layton-2195 N Univ Pk Blvd' THEN 'Layton'
        WHEN N'UT-Sandy-8475 S Sandy Parkway'       THEN N'Sandy'
        WHEN N'VA-Chester-701 Liberty Way'      THEN N'Chester'
        WHEN N'VA-Falls Church-5201 Leesburg'     THEN N'Arlington'
        ELSE 'OTHER'
      END
    ELSE
      SET @strSiteName = N'Unknown'
      
   --IF @strSiteName like '%HOME%'
   -- SET @strSiteName = 'Other'
    
  RETURN @strSiteName  
END  -- fn_strSiteNameFromSiteLocation()

GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Populate_Employee_Hierarchy' 
)
   DROP PROCEDURE [EC].[sp_Populate_Employee_Hierarchy]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date: 07/25/2013
-- Description:	Performs the following actions.
-- Updates existing records and Inserts New records from the Staging table.
-- Last Modified By: Susmitha Palacherla
-- Last Modified Date: 08/14/2014
-- updated during modular redesign to update name attribute for existing records 
-- =============================================
CREATE PROCEDURE [EC].[sp_Populate_Employee_Hierarchy] 
AS
BEGIN


 --Assigns End_Date to Inactive Records with status change in feed
 
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [END_DATE] = CONVERT(nvarchar(10),getdate(),112)
	FROM [EC].[Employee_Hierarchy_Stage] S JOIN [EC].[Employee_Hierarchy]H
	ON H.Emp_ID = S.Emp_ID
	AND S.Active in ('T', 'D')
	AND H.END_DATE= '99991231'
OPTION (MAXDOP 1)
END


-- Assigns End_Date to Inactive Records that stop arriving in feed
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [END_DATE] = CONVERT(nvarchar(10),getdate(),112)
	,[Active] = 'T'
	 WHERE END_DATE = '99991231' AND Active = 'A'
	 AND Emp_ID <> '999999'
	 AND EMP_ID NOT IN
	(SELECT Emp_ID FROM [EC].[Employee_Hierarchy_Stage])

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms

-- Assigns Open Ended End_Date for Rehire records
BEGIN
	UPDATE [EC].[Employee_Hierarchy] 
	SET [Active]= S.Active
	,[Start_Date] = S.Start_Date
	,[END_DATE] = '99991231'
	FROM [EC].[Employee_Hierarchy_Stage] S JOIN [EC].[Employee_Hierarchy]H
	ON H.Emp_ID = S.Emp_ID
	AND S.Active not in ('T', 'D')
	AND H.END_DATE  <> '99991231'
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
	
-- Updates Existing Records
BEGIN
	UPDATE [EC].[Employee_Hierarchy]
	   SET [Emp_Name] = S.Emp_Name
	      ,[Emp_Email] = S.Emp_Email
		  ,[Emp_LanID] = S.Emp_LanID
		  ,[Emp_Site] =  [EC].[fn_strSiteNameFromSiteLocation](S.Emp_Site)
		  ,[Emp_Job_Code] = S.Emp_Job_Code
		  ,[Emp_Job_Description] = S.Emp_Job_Description
		  ,[Emp_Program] = S.Emp_Program
		  ,[Sup_ID] = S.Sup_EMP_ID
		  ,[Sup_Name] = S.Sup_Name 
		  ,[Sup_Email] = S.Sup_Email
		  ,[Sup_LanID] = S.Sup_LanID
		  ,[Sup_Job_Code] = S.Sup_Job_Code 
		  ,[Sup_Job_Description] = S.Sup_Job_Description
		  ,[Mgr_ID] = S.Mgr_EMP_ID 
		  ,[Mgr_Name] = S.Mgr_Name
		  ,[Mgr_Email] = S.Mgr_Email
		  ,[Mgr_LanID] = S.Mgr_LanID
		  ,[Mgr_Job_Code] = S.Mgr_Job_Code 
		  ,[Mgr_Job_Description] = S.Mgr_Job_Description
		  ,[Start_Date] = CONVERT(nvarchar(8),S.[Start_Date],112)
		  ,[Active] = S.Active
	 FROM [EC].[Employee_Hierarchy]H JOIN [EC].[Employee_Hierarchy_Stage]S
	 ON H.[Emp_ID] = S.[EMP_ID]
	 WHERE H.[Emp_ID] is NOT NULL
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Inserts New Records
BEGIN
	INSERT INTO [EC].[Employee_Hierarchy]
			  ([Emp_ID]
			   ,[Emp_Name]
			   ,[Emp_Email]
			   ,[Emp_LanID]
			   ,[Emp_Site]
			   ,[Emp_Job_Code]
			   ,[Emp_Job_Description]
			   ,[Emp_program]
			   ,[Sup_ID]
			   ,[Sup_Name]
			   ,[Sup_Email]
			   ,[Sup_LanID]
			   ,[Sup_Job_Code]
			   ,[Sup_Job_Description]
			   ,[Mgr_ID]
			   ,[Mgr_Name]
			   ,[Mgr_Email]
			   ,[Mgr_LanID]
			   ,[Mgr_Job_Code]
			   ,[Mgr_Job_Description]
			   ,[Start_Date]
			   ,[Active]
			  )
							 SELECT S.[Emp_ID]
							  ,S.[Emp_Name]
							  ,S.[Emp_Email]
							  ,S.[Emp_LanID]
							  ,[EC].[fn_strSiteNameFromSiteLocation](S.[Emp_Site])
							  ,S.[Emp_Job_Code]
							  ,S.[Emp_Job_Description]
							  ,S.[Emp_Program]
							  ,S.[Sup_Emp_ID]
							  ,S.[Sup_Name]
							  ,S.[Sup_Email]
							  ,S.[Sup_LanID]
							  ,S.[Sup_Job_Code]
							  ,S.[Sup_Job_Description]
							  ,S.[Mgr_Emp_ID]
							  ,S.[Mgr_Name]
							  ,S.[Mgr_Email]
							  ,S.[Mgr_LanID]
							  ,S.[Mgr_Job_Code]
							  ,S.[Mgr_Job_Description]
							  ,CONVERT(nvarchar(8),S.[Start_Date],112)
							  ,S.[Active]
						  FROM [EC].[Employee_Hierarchy_Stage]S Left outer Join [EC].[Employee_Hierarchy]H
						  ON S.Emp_ID = H.Emp_ID
						  WHERE (H.EMP_ID IS NULL and S.Emp_ID <> '')

OPTION (MAXDOP 1)
END


END --sp_Populate_Employee_Hierarchy


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Migrated_User_Logs' 
)
   DROP PROCEDURE [EC].[sp_Update_Migrated_User_Logs]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 04/05/2014
-- Description:	Updates historical Coaching logs for Migrated users
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.

-- =============================================
CREATE PROCEDURE [EC].[sp_Update_Migrated_User_Logs] 
AS
BEGIN

-- Update CSR value in Coaching logs for migrated users
BEGIN
UPDATE [EC].[Coaching_Log]
SET [EmpLanID] = H.[Emp_LanID]
FROM [EC].[Coaching_Log]F JOIN [EC].[Employee_Hierarchy]H
ON F.[EmpID] = H.[Emp_ID]
WHERE F.[EmpLanID] <>  H.[Emp_LanID]
AND H.[Emp_LanID] is not NULL AND H.[Emp_LanID] <> ''
OPTION (MAXDOP 1)
END

END  -- [EC].[sp_Update_Migrated_User_Logs]


GO

--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Quality' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      02/23/2014
--    Description:     This procedure inserts the Quality scorecards into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Quality]
@Count INT OUTPUT
  
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @maxnumID INT
       -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])    
      
      
      -- Inserts records from the Quality_Coaching_Stage table to the Coaching_Log Table

         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[VerintID]
           ,[VerintEvalID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSE]
           ,[isCSRAcknowledged]
           ,[VerintFormName]
           ,[ModuleID]
           )

            SELECT DISTINCT
            lower(csr.Emp_LanID)	[FormName],
            CASE qs.Program  
            WHEN NULL THEN csr.Emp_Program
            WHEN '' THEN csr.Emp_Program
            ELSE qs.Program  END       [ProgramName],
             211             [SourceID],
            [EC].[fn_strStatusIDFromIQSEvalID](qs.CSE, qs.Oppor_Rein )[StatusID],
            [EC].[fn_intSiteIDFromEmpID](LTRIM(qs.User_EMPID))[SiteID],
            lower(csr.Emp_LanID)	[EmpLanID],
            qs.User_EMPID [EmpID],
            qs.Evaluator_ID	 [SubmitterID],       
            qs.Call_Date [EventDate],
            0			[isAvokeID],
		    0			[isNGDActivityID],
            0			[isUCID],
            1 [isVerintID],
            qs.Journal_ID	[VerintID],
            qs.Eval_ID [VerintEvalID],
            EC.fn_nvcHtmlEncode(qs.Summary_CallerIssues)[Description],	
            GetDate()  [SubmittedDate], 
		    qs.Eval_Date	[StartDate],
		    CASE WHEN qs.CSE = '' THEN 0
	            	ELSE 1 END	[isCSE],			
		    0 [isCSRAcknowledged],
		    qs.VerintFormname [verintFormName],
		    1 [ModuleID]
FROM [EC].[Quality_Coaching_Stage] qs 
join EC.Employee_Hierarchy csr on qs.User_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on qs.[Journal_ID] = cf.[VerintID]
AND qs.Evaluator_ID = cf.[SubmitterID]
where cf.[VerintID] is null	and cf.[SubmitterID] is NULL
OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.

INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
           10,
           42,
           qs.[Oppor_Rein]
    FROM [EC].[Quality_Coaching_Stage] qs JOIN  [EC].[Coaching_Log] cf      
    ON qs.[Eval_ID] = cf.[VerintEvalID] 
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Quality


GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Outlier' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Outlier]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        03/10/2014
-- Loads records from [EC].[Outlier_Coaching_Stage]to [EC].[Coaching_Log]
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.

-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Outlier]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   

-- Inserts records from the Outlier_Coaching_Stage table to the Coaching_Log Table

 INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           )
select  Distinct LOWER(cs.CSR_LANID)	[FormName],
        CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  END       [ProgramName],
        212                             [SourceID],
        [EC].[fn_strStatusIDFromStatus](cs.Form_Status)[StatusID],
        [EC].[fn_intGetSiteIDFromLanID](cs.CSR_LANID,@dtmDate)[SiteID],
        LOWER(cs.CSR_LANID)				[EmpLanID],
        cs.CSR_EMPID                    [EmpID],
        [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)[SubmitterID],
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		 EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
	     cs.Submitted_Date			SubmittedDate,
		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
		 0                          [isCSE],
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 1							[ModuleID]
	                   
from [EC].[Outlier_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null


-- Updates the strFormID value

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
           9,
           [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3)),
           os.[CoachReason_Current_Coaching_Initiatives]
    FROM [EC].[Outlier_Coaching_Stage] os JOIN  [EC].[Coaching_Log] cf      
    ON os.[Report_ID] = cf.[numReportID] AND  os.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Outlier



GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      02/03/2014
--    Description:     This procedure inserts the e-Coaching records into the Coaching_Log table. 
--                     The main attributes of the eCL are written to the Coaching_Log table.
--                     The Coaching Reasons are written to the Coaching_Reasons Table.
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to support the Modular design.
--
--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log]
(     @nvcFormName Nvarchar(50),
      @nvcEmpLanID Nvarchar(40),
      @nvcProgramName Nvarchar(50),
      @intSourceID INT,
      @intStatusID INT,
      @SiteID INT,
      @nvcSubmitter Nvarchar(40),
      @dtmEventDate datetime,
      @dtmCoachingDate datetime,
      @bitisAvokeID bit  ,
      @nvcAvokeID Nvarchar(40) ,
      @bitisNGDActivityID bit,
      @nvcNGDActivityID Nvarchar(40) ,
      @bitisUCID bit,
      @nvcUCID Nvarchar(40),
      @bitisVerintID bit,
      @nvcVerintID Nvarchar(255),
      @intCoachReasonID1 INT,
      @nvcSubCoachReasonID1 Nvarchar(255),
      @nvcValue1 Nvarchar(30),
      @intCoachReasonID2 INT ,
      @nvcSubCoachReasonID2 Nvarchar(255),
      @nvcValue2 Nvarchar(30),
      @intCoachReasonID3 INT ,
      @nvcSubCoachReasonID3 Nvarchar(255),
      @nvcValue3 Nvarchar(30),
      @intCoachReasonID4 INT ,
      @nvcSubCoachReasonID4 Nvarchar(255) ,
      @nvcValue4 Nvarchar(30),
      @intCoachReasonID5 INT,
      @nvcSubCoachReasonID5 Nvarchar(255),
      @nvcValue5 Nvarchar(30),
      @intCoachReasonID6 INT,
      @nvcSubCoachReasonID6 Nvarchar(255),
      @nvcValue6 Nvarchar(30),
      @intCoachReasonID7 INT,
      @nvcSubCoachReasonID7 Nvarchar(255),
      @nvcValue7 Nvarchar(30),
      @intCoachReasonID8 INT,
      @nvcSubCoachReasonID8 Nvarchar(255),
      @nvcValue8 Nvarchar(30),
      @intCoachReasonID9 INT,
      @nvcSubCoachReasonID9 Nvarchar(255),
      @nvcValue9 Nvarchar(30),
      @intCoachReasonID10 INT,
      @nvcSubCoachReasonID10 Nvarchar(255),
      @nvcValue10 Nvarchar(30),
      @intCoachReasonID11 INT,
      @nvcSubCoachReasonID11 Nvarchar(255),
      @nvcValue11 Nvarchar(30),
      @intCoachReasonID12 INT,
      @nvcSubCoachReasonID12 Nvarchar(255),
      @nvcValue12 Nvarchar(30),
      @nvcDescription Nvarchar(3000) ,
      @nvcCoachingNotes Nvarchar(3000) ,
      @bitisVerified bit  ,
      @dtmSubmittedDate datetime ,
      @dtmStartDate datetime ,
      @dtmSupReviewedAutoDate datetime ,
      @bitisCSE bit  ,
      @dtmMgrReviewManualDate datetime ,
      @dtmMgrReviewAutoDate datetime ,
      @nvcMgrNotes Nvarchar(3000) ,
      @bitisCSRAcknowledged bit  ,
      @dtmCSRReviewAutoDate datetime ,
      @nvcCSRComments Nvarchar(3000),
      @bitEmailSent bit ,
      @ModuleID INT
      )
   
AS
BEGIN
   
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
    --	Fetch the Employee ID of the current User (@nvcCSR) and Employee ID of the Submitter (@nvcSubmitter).

	DECLARE @nvcEmpID Nvarchar(10),
	        @nvcSubmitterID	Nvarchar(10),
	        @nvcNotPassedSiteID INT,
	        @dtmDate datetime
	        
	  
	        
	        
	SET @dtmDate  = GETDATE()   
	SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanID,@dtmDate)
	SET @nvcSubmitterID = EC.fn_nvcGetEmpIdFromLanID(@nvcSubmitter,@dtmDate)
	SET @nvcNotPassedSiteID = EC.fn_intSiteIDFromEmpID(@nvcEmpID)
        
  
         INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[CoachingDate]
           ,[isAvokeID]
           ,[AvokeID]
           ,[isNGDActivityID]
           ,[NGDActivityID]
           ,[isUCID]
           ,[UCID]
           ,[isVerintID]
           ,[VerintID]
           ,[Description]
	       ,[CoachingNotes]
           ,[isVerified]
           ,[SubmittedDate]
           ,[StartDate]
           ,[SupReviewedAutoDate]
           ,[isCSE]
           ,[MgrReviewManualDate]
           ,[MgrReviewAutoDate]
           ,[MgrNotes]
           ,[isCSRAcknowledged]
           ,[CSRReviewAutoDate]
           ,[CSRComments]
           ,[EmailSent]
           ,[ModuleID])
     VALUES
           (@nvcFormName
           ,@nvcProgramName 
           ,@intSourceID 
           ,@intStatusID 
           ,ISNULL(@SiteID,@nvcNotPassedSiteID)
           ,@nvcEmpLanID
           ,@nvcEmpID 
           ,@nvcSubmitterID
           ,@dtmEventDate 
           ,@dtmCoachingDate 
		   ,@bitisAvokeID 
           ,@nvcAvokeID 
           ,@bitisNGDActivityID 
		   ,@nvcNGDActivityID 
		   ,@bitisUCID 
		   ,@nvcUCID 
		   ,@bitisVerintID 
		   ,@nvcVerintID 
		   ,@nvcDescription 
		   ,@nvcCoachingNotes
           ,@bitisVerified 
		   ,@dtmSubmittedDate 
		   ,@dtmStartDate 
		   ,@dtmSupReviewedAutoDate 
		   ,@bitisCSE 
		   ,@dtmMgrReviewManualDate 
		   ,@dtmMgrReviewAutoDate 
		   ,@nvcMgrNotes 
		   ,@bitisCSRAcknowledged 
		   ,@dtmCSRReviewAutoDate 
		   ,@nvcCSRComments
		   ,@bitEmailSent
		   ,@ModuleID)
            
            
     --PRINT 'STEP1'
            
    SELECT @@IDENTITY AS 'Identity';
    --PRINT @@IDENTITY
    
    DECLARE @I BIGINT = @@IDENTITY,
            @MaxSubReasonRowID INT,
            @SubReasonRowID INT
    

     /*
           IF NOT @intCoachReasonID1 IS NULL
       BEGIN
            INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
            VALUES (@I, @intCoachReasonID1,@intSubCoachReasonID1,
            CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END) 
        END
        
        */
    
 IF NOT @intCoachReasonID1 IS NULL
  BEGIN
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ','))
       --PRINT  @MaxSubReasonRowID
       SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
   BEGIN
   
   
		INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID1,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID1, ',')where Rowid = @SubReasonRowID ),
             CASE WHEN @intCoachReasonID1 = 6 THEN 'Opportunity'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Opportunity') THEN 'Did Not Meet Goal'
                 WHEN (@intCoachReasonID1 = 10 AND @nvcValue1 = 'Reinforcement') THEN 'Met Goal'
             ELSE @nvcValue1 END)       
             
		SET @SubReasonRowID = @SubReasonRowID + 1

     END           
  END
 
        
       /*  
        IF NOT @intCoachReasonID2 IS NULL  
        BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,@intSubCoachReasonID2,@nvcValue2)
        END 

*/


 IF NOT @intCoachReasonID2 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ','))
  	   SET @SubReasonRowID = 1
	

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID2,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID2, ',')where Rowid = @SubReasonRowID )
           ,@nvcValue2)       
         
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 


  IF NOT @intCoachReasonID3 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ','))
  	   SET @SubReasonRowID = 1

While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID3,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID3, ',')where Rowid = @SubReasonRowID )
           , @nvcValue3)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END      
   
	 IF NOT @intCoachReasonID4 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID4,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID4, ',')where Rowid = @SubReasonRowID )
           , @nvcValue4)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END  
  
   IF NOT @intCoachReasonID5 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID5,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID5, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue5)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END     


 IF NOT @intCoachReasonID6 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID6,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID6, ',')where Rowid = @SubReasonRowID )
           , @nvcValue6) 
                    
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
   IF NOT @intCoachReasonID7 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID7,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID7, ',')where Rowid = @SubReasonRowID )
        , @nvcValue7)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END 
  
  
  IF NOT @intCoachReasonID8 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ','))
   	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID8,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID8, ',')where Rowid = @SubReasonRowID )
          , @nvcValue8)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END  
  
  
   IF NOT @intCoachReasonID9 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID9,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID9, ',')where Rowid = @SubReasonRowID )
          , @nvcValue9)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END 
  
  
   IF NOT @intCoachReasonID10 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ','))
       SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID10,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID10, ',')where Rowid = @SubReasonRowID )
            , @nvcValue10)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
		
    END
  END 
  
   IF NOT @intCoachReasonID11 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ','))
 	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID11,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID11, ',')where Rowid = @SubReasonRowID )
            , @nvcValue11)        
             
      	SET @SubReasonRowID = @SubReasonRowID + 1
	
    END
  END
  
  
   IF NOT @intCoachReasonID12 IS NULL  
    BEGIN
        
       SET @MaxSubReasonRowID = (Select MAX(RowID) FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ','))
	   SET @SubReasonRowID = 1


While @SubReasonRowID <= @MaxSubReasonRowID 
    BEGIN
			INSERT INTO [EC].[Coaching_Log_Reason]
            ([CoachingID],[CoachingReasonID],[SubCoachingReasonID],[Value])
             VALUES (@I, @intCoachReasonID12,
            (Select Item FROM [EC].[fnSplit_WithRowID]( @nvcSubCoachReasonID12, ',')where Rowid = @SubReasonRowID )
            ,@nvcValue12) 
             
      	SET @SubReasonRowID = @SubReasonRowID + 1

    END
  END  
COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

  END -- sp_InsertInto_Coaching_Log
GO




--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateCoachingLogsForTerms' 
)
   DROP PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    04/09/2014
-- Description:	Inactivate Coaching logs for Termed Employees
-- Last Modified Date: 08/13/2014
-- Last Updated By: Susmitha Palacherla
-- Modified to rename CSR and CSRID to EmpLanID and EmpID to support the Modular design.

-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms] 
AS
BEGIN

-- Inactivate Coaching logs for Termed Employees

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

END  -- [EC].[sp_InactivateCoachingLogsForTerms]
GO



--*************************************************************

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Select_Values_By_Reason' 
)
   DROP PROCEDURE [EC].[sp_Select_Values_By_Reason]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	8/01/14
--	Description: *	This procedure takes a Module 
--  and returns the Coaching Reasons associated with the Module. 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_Select_Values_By_Reason] 
@strReasonin nvarchar(200), @strModulein nvarchar(30), @strSourcein nvarchar(30)

AS
BEGIN
	DECLARE	
	@nvcSQL nvarchar(max)

SET @nvcSQL = 'Select CASE WHEN [isOpportunity] = 1 THEN ''Opportunity'' ElSE NULL END as Value from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1
UNION
Select CASE WHEN [isReinforcement] = 1 THEN ''Reinforcement'' ElSE NULL END as Value from [EC].[Coaching_Reason_Selection]
Where ' + @strModulein +' = 1 
and [CoachingReason] = '''+@strReasonin +'''
and [IsActive] = 1 
AND ' + @strSourcein +' = 1'


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_Select_Values_By_Reason

GO


--*************************************************************

--</End Section2>


--*****************************************************

		-- Section 3--
-- Stage updated SSIS Package and Config file on production dataabse server share


--*******************************************************
-- <Begin Section 3>
/*
Files to get from VM
Location: cms\eCoaching_V2\ETL
File1- Prod_IQS_Coaching.dtsConfig (VM version 1.1)
File 2- IQS_Coaching.dtsx (VM version 1.3)

Copy the 2 files to \\vdenssdbp07\scorecard-ssis\Coaching\ overwriting existing files

*/

-- </End Section 3>