--Open in an ssms window pointing to eCoaching DB in target environment and run with nothing selected

--1. Create SP [EC].[sp_SelectReviewFrom_Coaching_Log_For_Delete]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log_For_Delete' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_For_Delete]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	05/04/2015
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
--  Initial Revision per SCR 14478.

--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log_For_Delete] @strFormIDin nvarchar(50)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max)
	 
  SET @nvcSQL = 'SELECT  [CoachingID],
			[FormName],
			[EmpLanID],
			[EmpID],
			[SourceID]
		FROM  [EC].[Coaching_Log] WITH (NOLOCK)
	 	WHERE [FormName] = '''+@strFormIDin+''''
	 
		

EXEC (@nvcSQL)
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log_For_Delete


GO


--***************************************************************************************************************

--2. Create SP [EC].[sp_Delete_From_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Delete_From_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Delete_From_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--    ====================================================================
--    Author:                 Susmitha Palacherla
--	  Create Date:	05/04/2015
--    Description:     This procedure deletes a Coaching record from the Coaching Log Reason table and the 
--    Coaching Log table given a Faorm Name.
--     Initial Revision per SCR 14478.

--    =====================================================================
CREATE PROCEDURE [EC].[sp_Delete_From_Coaching_Log]
  (
    @intCoachingID bigint,
	@nvcErrorMsgForEndUser nvarchar(180) OUT

)
AS
BEGIN

DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY	

	DECLARE @strFormName nvarchar(50)
	
SET @nvcErrorMsgForEndUser = N''
SET @strFormName = (SELECT FormName From [EC].[Coaching_Log] WHERE CoachingID =  @intCoachingID)

	     
           IF @strFormName IS NOT NULL
          BEGIN
           	DELETE FROM [EC].[Coaching_Log_Reason] WHERE [CoachingID] = @intCoachingID 
			DELETE FROM [EC].[Coaching_Log] WHERE [CoachingID] = @intCoachingID 
	     END
	ELSE
	     BEGIN
	     	  SET @nvcErrorMsgForEndUser = N'Coaching ID ' + CAST(@intCoachingID as nvarchar(10)) + N' not found.'
	     END
	     

COMMIT TRANSACTION
END TRY
      
      BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
     SET @doRetry = 0;
     SELECT @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE()
    
    
    IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
   END
  END CATCH  

	
END --sp_InsertInto_Historical_Dashboard_ACL
GO



--***************************************************************************************************************
