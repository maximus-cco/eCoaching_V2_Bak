
/*

TFS 1709  - Admin Tool Setup


Implement in eCoaching database in target environment.


Dev - eCoahingDev
Test - eCoachingTest
Prod - eCoaching



****************************************

IMPLEMENTATION SUMMARY

SECTION 1
Stage SSIS Package

SECTION 2 - Create/Modify TABLES

SECTION 2A - Create Tables
1. [EC].[AT_Coaching_Inactivation_Reactivation_Audit]
2. [EC].[AT_Warning_Inactivation_Reactivation_Audit]
3. [EC].[AT_Coaching_Reassignment_Audit]
4. [EC].[AT_User]
6. [EC].[AT_Role]
5. [EC].[AT_User_Role_Link]
7. [EC].[AT_Entitlement]
8. [EC].[AT_Role_Entitlement_Link]
9. [EC].[AT_Action_Reasons]
10.[EC].[AT_Module_Access]
11.[EC].[AT_Role_Access]
12.[EC].[AT_Reassign_Status_For_Module]
13.[EC].[IdsTableType]
14.
15.

SECTION 2B - MODIFY Tables
1. [EC].[Coaching_Log]
2.


 
SECTION 3 - Create/Modify PROCEDURES AND FUNCTIONS

SECTION 3A - PROCEDURES
1. [EC].[sp_AT_Coaching_Inactivation_Reactivation]
2. [EC].[sp_AT_Warning_Inactivation_Reactivation]
3. [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 
4. [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]
5. [EC].[sp_AT_Select_Employees_Inactivation_Reactivation]  
6. [EC].[sp_AT_Select_Logs_Inactivation_Reactivation]
7. [EC].[sp_AT_Check_Entitlements]
8. [EC].[sp_AT_Select_Action_Reasons] 
9. [EC].[sp_AT_Select_Modules_By_LanID] 
10.[EC].[sp_AT_Select_Roles_By_User]
11.[EC].[sp_AT_Select_Status_By_Module] 
12.[EC].[sp_AT_Coaching_Reassignment]
13.[EC].[sp_AT_Select_ReassignFrom_Users] 
14.[EC].[sp_AT_Select_ReassignTo_Users] 
15.[EC].[sp_AT_Select_Logs_Reassign] 
16.[EC].[sp_AT_Populate_User] 
17.[EC].[sp_InactivateCoachingLogsForTerms] 
18.[EC].[sp_Update1Review_Coaching_Log]
19.[EC].[sp_Update2Review_Coaching_Log]
20.[EC].[sp_Update3Review_Coaching_Log]
21.[EC].[sp_Update5Review_Coaching_Log]
22.[EC].[sp_Update8Review_Coaching_Log]
23.[EC].[sp_SelectFrom_Coaching_Log_MGRPending] 
24.[EC].[sp_SelectFrom_Coaching_Log_SUPPending]
25.[EC].[sp_SelectReviewFrom_Coaching_Log]
26.[EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending] 

SECTION 3B - FUNCTIONs

1.[EC].[fn_intLastKnownStatusForCoachingID]
2.[EC].[fn_strCheckIfATSysAdmin]
3.[EC].[fn_strCheckIfATCoachingAdmin] 
4.[EC].[fn_strCheckIfATWarningAdmin]
5.[EC].[fn_strStatusFromStatusID]
6.[EC].[fn_strStatusIDFromStatus]

***************************************

	IMPLEMENTATION DETAILS

***************************************

SECTION 1 

***************************************
 
Fetch and Stage ssis Package

--Fetch the following ssis Package from TFS source Control and stage accordingly.
   Employee_Hierarchy.dtsx (Changeset 34492)

FROM 
\cms\eCoaching_V2\ETL\ in Source Control

TO
 \\vdenssdbp07\scorecard-ssis\Coaching


***************************************
SECTION 2

**************************************/


--1.TABLE [EC].[AT_Coaching_Inactivate_Reactivate_Audit]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Coaching_Inactivate_Reactivate_Audit](
	[SeqNum] [int] IDENTITY(1,1) NOT NULL,
	[CoachingID] [bigint]NOT NULL,
	[FormName] [nvarchar](50) NOT NULL,
	[LastKnownStatus] [int] NOT NULL,
	[Action] [nvarchar](30) NOT NULL,
	[ActionTimestamp] [datetime] NOT NULL,
	[RequesterID] [nvarchar](30) NOT NULL,
	[Reason] [nvarchar](250) NOT NULL,
	[RequesterComments] [nvarchar](4000) NULL

) ON [PRIMARY]

GO

--**************************************************


--2.TABLE [EC].[AT_Warning_Inactivate_Reactivate_Audit]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Warning_Inactivate_Reactivate_Audit](
	[SeqNum] [int] IDENTITY(1,1) NOT NULL,
	[WarningID] [bigint]NOT NULL,
	[FormName] [nvarchar](50) NOT NULL,
	[LastKnownStatus] [int] NOT NULL,
	[Action] [nvarchar](30) NOT NULL,
	[ActionTimestamp] [datetime] NOT NULL,
	[RequesterID] [nvarchar](30) NOT NULL,
	[Reason] [nvarchar](250) NOT NULL,
	[RequesterComments] [nvarchar](4000) NULL

) ON [PRIMARY]

GO

--************************************************

--3. TABLE [EC].[AT_Coaching_Reassign_Audit]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Coaching_Reassign_Audit](
	[SeqNum] [int] IDENTITY(1,1) NOT NULL,
	[CoachingID] [bigint] NOT NULL,
	[FormName] [nvarchar](50) NOT NULL,
	[LastKnownStatus] [int] NOT NULL,
	[ActionTimestamp] [datetime] NOT NULL,
	[RequesterID] [nvarchar](10) NOT NULL,
	[AssignedToID] [nvarchar](10) NOT NULL,
	[Reason] [nvarchar](250) NOT NULL,
	[RequesterComments] [nvarchar](4000) NULL
	
) ON [PRIMARY]

GO




--************************************************

--4. TABLE [EC].[AT_User]

Create Table [EC].[AT_User]
(
UserId NVARCHAR(10) NOT NULL,
UserLanID NVARCHAR(30) NOT NULL,
UserName NVARCHAR(50) NOT NULL,
EmpJobCode NVARCHAR(50) NOT NULL,
Active bit NULL,
PRIMARY KEY (UserId)
)
GO



INSERT INTO [EC].[AT_User]
            ([UserId],
            [UserLanID],
			[UserName],
			[EmpJobCode],
			[Active])        
VALUES
('500306','JohnEric.Tiongson', 'John Eric Z','WISY13',1)
          
GO



--************************************************

--5. TABLE [EC].[AT_Role]

Create Table [EC].[AT_Role]
(
RoleId int  IDENTITY(101,1) NOT NULL,
RoleDescription NVARCHAR(20) NOT NULL,
IsSysAdmin bit NOT NULL,
PRIMARY KEY (RoleId)
)
GO

INSERT INTO [EC].[AT_Role]
            ([RoleDescription],
			[IsSysAdmin])        
VALUES
('CoachingAdmin',1),
('CoachingUser',0),
('WarningAdmin',1),
('WarningUser',0)

          
GO



--************************************************

--6. TABLE [EC].[AT_User_Role_Link]

Create Table [EC].[AT_User_Role_Link]
(
UserId NVARCHAR(10) NOT NULL,
RoleId int NOT NULL,
PRIMARY KEY (UserId,RoleId)
)
GO

ALTER TABLE [EC].[AT_User_Role_Link]  WITH NOCHECK ADD CONSTRAINT [fkUserId] FOREIGN KEY([UserId])
REFERENCES [EC].[AT_User] ([UserId])
GO

ALTER TABLE [EC].[AT_User_Role_Link] CHECK CONSTRAINT [fkUserId]
GO

ALTER TABLE [EC].[AT_User_Role_Link]  WITH NOCHECK ADD  CONSTRAINT [fkRoleId] FOREIGN KEY([RoleId])
REFERENCES [EC].[AT_Role] ([RoleId])
GO

ALTER TABLE [EC].[AT_User_Role_Link] CHECK CONSTRAINT [fkRoleId]
GO



INSERT INTO [EC].[AT_User_Role_Link]
            ([UserId] ,
			[RoleId])  
VALUES
(500306,101),
(500306,103)


--************************************************

--7. TABLE [EC].[AT_Entitlement]

Create Table [EC].[AT_Entitlement]
(
EntitlementId int  IDENTITY(201,1) NOT NULL,
EntitlementDescription NVARCHAR(100) NOT NULL,
PRIMARY KEY (EntitlementId)
)
GO


INSERT INTO [EC].[AT_Entitlement]
            ([EntitlementDescription])
		     
VALUES
('EmployeeLog-SearchForInactivate'),
('EmployeeLog-SearchForReassign'),
('EmployeeLog-SearchForReactivate'),
('ManageCoachingLogs'),
('ManageWarningLogs'),
('ReactivateCoachingLogs'),
('ReactivateWarningLogs')


--************************************************

--8. TABLE [EC].[AT_Role_Entitlement_Link]


Create Table [EC].[AT_Role_Entitlement_Link]
(
RoleId int NOT NULL,
EntitlementId int NOT NULL,
PRIMARY KEY (RoleId,EntitlementId)
)
GO


ALTER TABLE [EC].[AT_Role_Entitlement_Link]  WITH NOCHECK ADD  CONSTRAINT [fkEntRoleId] FOREIGN KEY([RoleId])
REFERENCES [EC].[AT_Role] ([RoleId])
GO

ALTER TABLE [EC].[AT_Role_Entitlement_Link] CHECK CONSTRAINT [fkEntRoleId]
GO

ALTER TABLE [EC].[AT_Role_Entitlement_Link]  WITH NOCHECK ADD CONSTRAINT [fkEntitlementId] FOREIGN KEY([EntitlementId])
REFERENCES [EC].[AT_Entitlement] ([EntitlementId])
GO

ALTER TABLE [EC].[AT_Role_Entitlement_Link] CHECK CONSTRAINT [fkEntitlementId]
GO



INSERT INTO [EC].[AT_Role_Entitlement_Link]
(RoleId,EntitlementId)
VALUES
(101,201),
(101,202),
(101,203),
(101,204),
(102,201),
(102,202),
(102,204),
(103,201),
(103,203),
(103,205),
(101,206),
(103,207)


--****************************************************


--9. TABLE [EC].[AT_Action_Reasons]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Action_Reasons](
    [ReasonId] [int] IDENTITY(1,1) NOT NULL,
	[Reason] [nvarchar](100) NOT NULL,
	[isActive] [bit] NULL,
	[Coaching] [bit] NULL,
	[Warning] [bit] NULL,
	[Inactivate] [bit] NULL,
	[Reactivate] [bit] NULL,
	[Reassign] [bit] NULL
) ON [PRIMARY]

GO


INSERT INTO [EC].[AT_Action_Reasons]
           ([Reason]
           ,[isActive]
           ,[Coaching]
           ,[Warning]
           ,[Inactivate]
           ,[Reactivate]
           ,[Reassign])
     VALUES
           ('Error in submission',1,1,1,1,0,0),
           ('Extended absence',1,1,0,1,0,0),
           ('Termed',1,1,0,1,0,0),
           ('Other',1,1,1,1,1,1),
           ('HR request',1,0,1,1,0,0),
           ('Error in inactivation',1,1,1,0,1,0),
           ('Return to work',1,1,1,0,1,0),
           ('Supervisor / manager unavailable',1,1,0,0,0,1),
           ('Team change',1,1,0,0,0,1)
      
GO




***************************************


--10. TABLE [EC].[AT_Module_Access]


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Module_Access](
	[JobCode] [nvarchar](50) NOT NULL,
	[JobCodeDescription] [nvarchar](50)NOT NULL,
	[ModuleId] [int] NOT NULL,
	[Module] [nvarchar](20) NOT NULL,
	[isActive][bit]NOT NULL,
	) ON [PRIMARY]

GO



INSERT INTO [EC].[AT_Module_Access]
           ([JobCode]
           ,[JobCodeDescription]
           ,[ModuleId]
           ,[Module]
           ,[isActive])
              VALUES
           ('WISY13','Sr Analyst, Systems',1,'CSR',1),
           ('WISY13','Sr Analyst, Systems',2,'Supervisor',1),
           ('WISY13','Sr Analyst, Systems',3,'Quality',1),
           ('WISY13','Sr Analyst, Systems',4,'LSA',1),
           ('WISY13','Sr Analyst, Systems',5,'Training',1),
           ('WACS50','Manager, Customer Service',1,'CSR',1),
           ('WACS60','Sr Manager, Customer Service',2,'Supervisor',1),
           ('WACS50','Manager, Customer Service',2,'Supervisor',1),
           ('WACS60','Sr Manager, Customer Service',1,'CSR',1)
           ('WIHD50','Manager, Help Desk',4,'LSA',1),
           ('WTTR50','Manager, Training',5,'Training',1),
           ('WPPM13','Sr Analyst, Program',3,'Quality',1) 
           

--***************************************

--11. TABLE [EC].[AT_Role_Access]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Role_Access](
	[JobCode] [nvarchar](50) NOT NULL,
	[JobCodeDescription] [nvarchar](50)NOT NULL,
	[RoleId] [int] NOT NULL,
	[RoleDescription] [nvarchar](20) NOT NULL,
	[AddToUser][bit]NOT NULL,
	[isActive][bit]NOT NULL,
	) ON [PRIMARY]

GO



INSERT INTO [EC].[AT_Role_Access]
           ([JobCode]
           ,[JobCodeDescription]
           ,[RoleId]
           ,[RoleDescription]
           ,[AddToUser]
           ,[isActive])
              VALUES
           ('WISY13','Sr Analyst, Systems',101,'CoachingAdmin',0,1),
           ('WACS50','Manager, Customer Service',102,'CoachingUser',1,1),
           ('WACS60','Sr Manager, Customer Service',102,'CoachingUser',1,1),
           ('WIHD50','Manager, Help Desk',102,'CoachingUser',1,1),
           ('WTTR50','Manager, Training',102,'CoachingUser',1,1),
           ('WPPM13','Sr Analyst, Program',102,'CoachingUser',1,1),
           ('WISY13','Sr Analyst, Systems',103,'WarningAdmin',0,1)
      

--***************************************

--12. TABLE  [EC].[AT_Reassign_Status_For_Module]

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[AT_Reassign_Status_For_Module](
	[ModuleId] [int] NOT NULL,
	[Module] [nvarchar](20) NOT NULL,
	[StatusId] [int] NOT NULL,
	[Status] [nvarchar](50) NOT NULL,
	[isActive] [bit] NOT NULL
) ON [PRIMARY]

GO



INSERT INTO [EC].[AT_Reassign_Status_For_Module]
           ([ModuleId]
           ,[Module]
           ,[StatusId] 
	       ,[Status] 
           ,[isActive])
     VALUES
            (1,'CSR',5, 'Pending Manager Review',1),
            (1,'CSR',6, 'Pending Supervisor Review',1),
            (2,'Supervisor',5, 'Pending Manager Review',1),
            (2,'Supervisor',7, 'Pending Sr.Manager Review',1),
            (3,'Quality',8, 'Pending Quality Lead Review',1),
            (4,'LSA',6, 'Pending Supervisor Review',1),
            (5,'Training',5, 'Pending Manager Review',1),
            (5,'Training',6, 'Pending Supervisor Review',1)
            


--***************************************

--13. TYPE [EC].[IdsTableType]

CREATE TYPE [EC].[IdsTableType] AS TABLE(
	[ID] [bigint] NOT NULL
)
GO



--***************************************

-- SECTION 2B
--1. TABLE [EC].[Coaching_Log]


ALTER TABLE [EC].[Coaching_Log]
ADD [ReassignCount] [INT] DEFAULT(0)NOT NULL,
[ReassignedToID][nvarchar](20) NULL

GO


--***************************************


--***************************************


--***************************************

--***************************************


/***************************************
***************************************



SECTION 3 - Create/Modify PROCEDURES AND FUNCTIONS
      
 


***************************************


--SECTION 3A - PROCEDURES


***************************************/






--1. [EC].[sp_AT_Coaching_Inactivation_Reactivation]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Coaching_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Coaching_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Coaching_Inactivation_Reactivation]
-- go
CREATE PROCEDURE [EC].[sp_AT_Coaching_Inactivation_Reactivation] (
  @strRequesterLanId NVARCHAR(50),
  @strAction NVARCHAR(30), 
  @tableIds IdsTableType READONLY,
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Coaching_Inactivation_Reactivation'
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime
     	

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID],[FormName],[LastKnownStatus],[Action]
           ,[ActionTimestamp] ,[RequesterID] ,[Reason],[RequesterComments])
      SELECT [CoachingID], [Formname], [StatusID],  @strAction,
      Getdate(), @strRequestrID, @strReason, @strComments 
      FROM  [EC].[Coaching_Log]CL JOIN @tableIds ID ON
      CL.CoachingID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'STEP1'


UPDATE [EC].[Coaching_Log]
SET StatusID = (SELECT  CASE @strAction
						WHEN 'Inactivate' THEN 2 ELSE [EC].[fn_intLastKnownStatusForCoachingID](CL.CoachingID) END)
FROM [EC].[Coaching_Log]CL JOIN @tableIds ID ON
CL.CoachingID = ID.ID						
						
          

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
GO





--***************************************



--2. [EC].[sp_AT_Warning_Inactivation_Reactivation]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Warning_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Warning_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Warning_Inactivation_Reactivation]
-- go
CREATE PROCEDURE [EC].[sp_AT_Warning_Inactivation_Reactivation] (
  @strRequesterLanId NVARCHAR(50),
  @strAction NVARCHAR(30), 
  @tableIds IdsTableType READONLY,
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Warning_Inactivation_Reactivation'
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime
     	

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Warning_Inactivate_Reactivate_Audit]
           ([WarningID],[FormName],[LastKnownStatus],[Action]
           ,[ActionTimestamp] ,[RequesterID] ,[Reason],[RequesterComments])
      SELECT [WarningID], [Formname], [StatusID],  @strAction,
      Getdate(), @strRequestrID, @strReason, @strComments 
      FROM  [EC].[Warning_Log]CL JOIN @tableIds ID ON
      CL.WarningID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'STEP1'


UPDATE [EC].[Warning_Log]
SET StatusID = (SELECT  CASE @strAction
WHEN 'Inactivate' THEN 2 ELSE 1 END)
FROM [EC].[Warning_Log]CL JOIN @tableIds ID ON
CL.WarningID = ID.ID						
						
          

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
GO






--***************************************

--3. [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Coaching_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Coaching logs for Inactivation or Reactivation.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@intRequesterSiteID int,
@strConditionalSite nvarchar(100),
@strATCoachAdminUser nvarchar(10),
@dtmDate datetime,
@nvcSQL nvarchar(max)

SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@strRequesterID)
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@strRequesterID) 

SET @strConditionalSite = ' '
IF @strATCoachAdminUser <> 'YES'

BEGIN
	SET @strConditionalSite = ' AND Fact.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+''' '
END	

IF @strActionin = N'Inactivate'

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID  JOIN [EC].[Employee_Hierarchy]MGR
 ON Emp.Mgr_ID = MGR.Emp_ID 
 WHERE Fact.StatusID NOT IN (1,2)
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active = ''A'''
 + @strConditionalSite 
 + 'AND Emp.Emp_Site = MGR.Emp_Site
  AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'

ELSE 

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy]Emp JOIN [EC].[Coaching_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID JOIN (Select * FROM
 [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
 WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname
 WHERE Fact.StatusID = 2
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active = ''A''
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'
 
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Employees_Coaching_Inactivation_Reactivation





GO






--***************************************


--4. [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Warning_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Employees who have 
--  Warning logs for Inactivation or Reactivation.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strActionin nvarchar(10), @intModulein int
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(20),
@nvcWhere nvarchar(50),
@strRequesterID nvarchar(10),
@strRequesterSiteID int,
@dtmDate datetime,
@nvcSQL nvarchar(max)

SET @dtmDate  = GETDATE()   
SET @strRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)



IF @strActionin = N'Inactivate'

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy] Emp JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID  
 WHERE Fact.StatusID = 1
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active = ''A''
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'

ELSE 

SET @nvcSQL = 'SELECT DISTINCT Emp.Emp_ID,Emp.Emp_Name 
 FROM [EC].[Employee_Hierarchy]Emp JOIN [EC].[Warning_Log] Fact WITH(NOLOCK)
 ON Emp.Emp_ID = Fact.EmpID JOIN (Select * FROM
 [EC].[AT_Warning_Inactivate_Reactivate_Audit]
 WHERE LastKnownStatus = 1) Aud
 ON Aud.FormName = Fact.Formname
 WHERE Fact.StatusID = 2
 AND Fact.ModuleId = '''+CONVERT(NVARCHAR,@intModulein)+'''
 AND Fact.EmpID <> ''999999''
 AND Emp.Active = ''A''
 AND Fact.EmpLanID <> '''+@strRequesterLanId+''' 
 ORDER BY Emp.Emp_Name'
 
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Employees_Warning_Inactivation_Reactivation


GO



--***************************************

--5. [EC].[sp_AT_Select_Employees_Inactivation_Reactivation] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Employees_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Employees_Inactivation_Reactivation]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure calls the Coaching or Warning Inactivation 
--  Reactivation procedure based on the strType passed in.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/20/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Employees_Inactivation_Reactivation] 

@strRequesterLanId nvarchar(30),@strTypein nvarchar(10), @strActionin nvarchar(10), @intModulein int
AS


BEGIN

IF @strTypein = N'Coaching'
BEGIN 
EXEC [EC].[sp_AT_Select_Employees_Coaching_Inactivation_Reactivation] @strRequesterLanId ,@strActionin , @intModulein 
END

IF @strTypein = N'Warning'
BEGIN 
EXEC [EC].[sp_AT_Select_Employees_Warning_Inactivation_Reactivation]@strRequesterLanId ,@strActionin , @intModulein 
END


END --sp_AT_Select_Employees_Inactivation_Reactivation
GO






--***************************************

--6. [EC].[sp_AT_Select_Logs_Inactivation_Reactivation]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Logs_Inactivation_Reactivation' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Logs_Inactivation_Reactivation]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Coaching or Warning logs 
--  in the appropriate Status for the Action for the selected Employee.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/2/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Logs_Inactivation_Reactivation] 

@strTypein nvarchar(10)= NULL, @strActionin nvarchar(10), @strEmployeein nvarchar(10),  @intModuleIdin INT
AS

BEGIN
DECLARE	
@nvcTableName nvarchar(500),
@nvcWhere nvarchar(100),
@nvcSQL nvarchar(max),
@strID nvarchar(30)


IF @strTypein = N'Coaching' 
SET @strID = 'Fact.CoachingID LogID, '
ELSE 
SET @strID = 'Fact.WarningID LogID, '

IF @strTypein = N'Coaching' AND @strActionin = 'Inactivate'
SET @nvcTableName = ' FROM [EC].[Coaching_Log] Fact WITH(NOLOCK) '

IF @strTypein = N'Warning' AND @strActionin = 'Inactivate'
SET @nvcTableName = ' FROM [EC].[Warning_Log] Fact WITH(NOLOCK) '

IF @strTypein = N'Coaching' AND @strActionin = 'Reactivate'
SET @nvcTableName = ',Aud.LastKnownStatus, [EC].[fn_strStatusFromStatusID](Aud.LastKnownStatus)LKStatus
 FROM [EC].[Coaching_Log] Fact WITH(NOLOCK) JOIN (Select * FROM
 [EC].[AT_Coaching_Inactivate_Reactivate_Audit] WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname '

IF @strTypein = N'Warning' AND @strActionin = 'Reactivate'
SET @nvcTableName = ',Aud.LastKnownStatus, [EC].[fn_strStatusFromStatusID](Aud.LastKnownStatus)LKStatus 
 FROM [EC].[Warning_Log] Fact WITH(NOLOCK) JOIN (Select * FROM
 [EC].[AT_Warning_Inactivate_Reactivate_Audit] WHERE LastKnownStatus <> 2) Aud
 ON Aud.FormName = Fact.Formname '


IF @strActionin = N'Reactivate'
SET @nvcWhere = ' WHERE Fact.StatusID = 2 '
ELSE 
IF @strTypein = N'Coaching' AND @strActionin = 'Inactivate'
SET @nvcWhere = ' WHERE Fact.StatusID NOT IN (1,2) '
ELSE
IF @strTypein = N'Warning' AND @strActionin = 'Inactivate'
SET @nvcWhere = ' WHERE Fact.StatusID <> 2 '



 SET @nvcSQL = 'SELECT DISTINCT '+@strID+' 
        fact.FormName strFormName,
		eh.Emp_Name	strEmpName,
		eh.Sup_Name	strSupName,
	    CASE
		 WHEN  fact.[strReportCode] like ''LCS%'' AND fact.[MgrID] <> eh.[Mgr_ID]
		 THEN [EC].[fn_strEmpNameFromEmpID](fact.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE eh.Mgr_Name END strMgrName,
		sh.Emp_Name strSubmitter,
		s.Status,
		Fact.SubmittedDate strCreatedDate '
  +  @nvcTableName +
 'JOIN [EC].[Employee_Hierarchy] eh
	 ON [Fact].[EMPID] = [eh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] sh
	 ON [Fact].[SubmitterID] = [sh].[Emp_ID] JOIN [EC].[DIM_Status] s
	 ON [Fact].[StatusID] = [s].[StatusID] '+
 @nvcWhere +
 'AND EmpID = '''+@strEmployeein+'''
  AND [Fact].[ModuleId] = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
  ORDER BY Fact.FormName DESC'


--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Logs_Inactivation_Reactivation

GO




--***************************************

--7. [EC].[sp_AT_Check_Entitlements]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Check_Entitlements' 
)
   DROP PROCEDURE [EC].[sp_AT_Check_Entitlements]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/22/2016
--	Description: *	This procedure returns the list of Entitlements 
--  within the eCoaching admin tool for a given user.
--  Last Modified By: 
--  Last Modified date: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/2/12016
 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Check_Entitlements] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
    @dtmDate datetime

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)



 


SET @nvcSQL = 'SELECT DISTINCT [EntitlementId], [EntitlementDescription]
               FROM [EC].[AT_Entitlement]
               WHERE [EntitlementId] IN (
					 SELECT DISTINCT([EntitlementId]) 
                     FROM [EC].[AT_Role_Entitlement_Link]
		             WHERE [RoleId] IN (
                            SELECT DISTINCT([RoleId]) 
                            FROM [EC].[AT_User_Role_Link] ur 
		                    JOIN [EC].[AT_User]u ON u.UserId = ur.UserId 
		                     WHERE u.UserID = '''+@nvcEmpID+'''))'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Check_Entitlements
GO





--***************************************


--8. [EC].[sp_AT_Select_Action_Reasons] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Action_Reasons' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Action_Reasons]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/18/2016
--	Description: *	This procedure takes a value of either Coaching or Warning and 
-- the Action Type and returns the Reasons for that Action Type.
-- Last Modified By:
-- Last Modified Date: 
-- Initial revision to set up admin tool - TFS 1709 - 4/18/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Action_Reasons] 
@strType nvarchar(20), @strAction nvarchar(20)
AS
BEGIN
	DECLARE	
	
	@nvcSQL nvarchar(max)
	
	

SET @nvcSQL = 'Select [ReasonID],[Reason] FROM [EC].[AT_Action_Reasons]
Where ' + @strType +' = 1 
and ' + @strAction +'= 1
Order by CASE WHEN [Reason]= ''Other'' THEN 1 ELSE 0 END'


--Print @nvcSQL

EXEC (@nvcSQL)	
END -- sp_AT_Select_Action_Reasons
GO







--***************************************


--9. [EC].[sp_AT_Select_Modules_By_LanID] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Modules_By_LanID' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Modules_By_LanID]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Module(s) for the logged in user. 
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Modules_By_LanID] 
@nvcEmpLanIDin nvarchar(30),@strTypein nvarchar(10)= NULL

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@strATWarnAdminUser nvarchar(10),
	@strATCoachAdminUser nvarchar(10),
	@nvcEmpJobCode nvarchar(30),
	@dtmDate datetime

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)
SET @nvcEmpJobCode = (SELECT Emp_Job_Code From EC.Employee_Hierarchy
WHERE Emp_ID = @nvcEmpID)
SET @strATWarnAdminUser = EC.fn_strCheckIfATWarningAdmin(@nvcEmpID) 
SET @strATCoachAdminUser = EC.fn_strCheckIfATCoachingAdmin(@nvcEmpID) 


IF ((@strATWarnAdminUser = 'YES' AND @strATCoachAdminUser = 'YES')
   OR (@strTypein is NULL AND @strATCoachAdminUser = 'YES')
   OR (@strTypein = 'Coaching' AND @strATCoachAdminUser = 'YES')
   OR (@strTypein = 'Warning' AND @strATWarnAdminUser = 'YES'))

SET @nvcSQL = 'SELECT DISTINCT ModuleId, Module 
			   FROM [EC].[AT_Module_Access]
			   WHERE [isActive]=1
			   ORDER BY Module'
			   
ELSE

SET @nvcSQL = 'SELECT ModuleId, Module 
			   FROM [EC].[AT_Module_Access]
			   WHERE [JobCode]= '''+@nvcEmpJobCode+'''
			   AND [isActive]=1
			   ORDER BY Module'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Modules_By_LanID

GO




--***************************************


--10. [EC].[sp_AT_Select_Roles_By_User]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Roles_By_User' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Roles_By_User]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Role(s) for the logged in user. 
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
 
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Roles_By_User] 
@nvcEmpLanIDin nvarchar(30)

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max),
	@nvcEmpID nvarchar(10),
	@dtmDate datetime

SET @dtmDate  = GETDATE()  
SET @nvcEmpID = EC.fn_nvcGetEmpIdFromLanID(@nvcEmpLanIDin,@dtmDate)


SET @nvcSQL = 'SELECT U.[UserId], [RoleDescription]
FROM [EC].[AT_User] U JOIN [EC].[AT_User_Role_Link] URL
ON U.[UserId]= URL.[UserId]JOIN [EC].[AT_ROLE]R ON
R.[RoleId]= URL.[RoleId]
WHERE U.[UserId]= '''+@nvcEmpID+''''

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Roles_By_User

GO



--***************************************

--11.[EC].[sp_AT_Select_Status_By_Module] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Status_By_Module' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Status_By_Module]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Status(es) for a selected Module 
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Status_By_Module] 
@intModuleIdin INT

AS
BEGIN
	DECLARE	

	@nvcSQL nvarchar(max)




SET @nvcSQL = 'SELECT StatusId, Status
			   FROM [EC].[AT_Reassign_Status_For_Module]
			   WHERE [ModuleID]= '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
			   AND [isActive]=1'

--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Status_By_Module

GO




--***************************************


--12. [EC].[sp_AT_Coaching_Reassignment]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Coaching_Reassignment' 
)
   DROP PROCEDURE [EC].[sp_AT_Coaching_Reassignment]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

---------------------------------------------------------------------------------------------------------
-- MULTIPLE ASTERISKS (***) DESIGNATE SECTIONS OF THE STORED PROCEDURE TEMPLATE THAT SHOULD BE CUSTOMIZED
---------------------------------------------------------------------------------------------------------
-- REQUIRED PARAMETERS:
-- INPUT: @***sampleInputVariable varchar(35)***
-- OUTPUT: @returnCode int, @returnMessage varchar(100)
-- The following 2 statements need to be executed when re-creating this stored procedure:
-- drop procedure [EC].[sp_AT_Coaching_Reassignment]
-- go
CREATE PROCEDURE [EC].[sp_AT_Coaching_Reassignment] (
  @strRequesterLanId NVARCHAR(50),
  @tableIds IdsTableType READONLY,
  @strAssignedId NVARCHAR(10),
  @intReasonId INT, 
  @strReasonOther NVARCHAR(250)= NULL, 
  @strComments NVARCHAR(4000)= NULL, 
     

-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
@returnCode int OUTPUT,
@returnMessage varchar(100) OUTPUT
)
as
   declare @storedProcedureName varchar(80)
   declare @transactionCount int
   set @transactionCount = @@trancount
   set @returnCode = 0
   set @returnMessage = 'ok'
   -- If already in transaction, don't start another
   if @@trancount > 0
   begin
      save transaction currentTransaction
   end
   else
   begin
      begin transaction currentTransaction
   end
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED
-------------------------------------------------------------------------------------
   set @storedProcedureName = 'sp_AT_Coaching_Reassignment'
-------------------------------------------------------------------------------------
-- Notes: set @returnCode and @returnMessage as appropriate
--        @returnCode defaults to '0',  @returnMessage defaults to 'ok'
--        IMPORTANT: do NOT place "return" statements in this custom code section
--        IF no severe error occurs,
--           @returnCode and @returnMessage will contain the values set by you
--        IF this procedure is not nested within another procedure,
--           you can force a rollback of the transaction
--              by setting @returnCode to a negative number
-------------------------------------------------------------------------------------
-- sample: select * from table where column = @sampleInputVariable
-- sample: update table set column = @sampleInputVariable where column = someValue
-- sample: insert into table (column1, column2) values (value1, value2)
-------------------------------------------------------------------------------------
-- *** BEGIN: INSERT CUSTOM CODE HERE ***
SET TRANSACTION ISOLATION LEVEL READ COMMITTED

SET NOCOUNT ON;


DECLARE @strRequestrID nvarchar(10),
        @strReason NVARCHAR(250),
        @intStatusID int,
        @intLKStatusID int,
     	@dtmDate datetime
     	

SET @dtmDate  = GETDATE()   
SET @strRequestrID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterLanId,@dtmDate)
SET @strReason = (SELECT [Reason] FROM [EC].[AT_Action_Reasons]WHERE [ReasonId]= @intReasonId)

IF @strReason = 'Other'
BEGIN
SET @strReason = 'Other - ' + @strReasonOther
END
             
  INSERT INTO [EC].[AT_Coaching_Reassign_Audit]
           ([CoachingID],[FormName],[LastKnownStatus],
           [ActionTimestamp] ,[RequesterID],[AssignedToID],[Reason],[RequesterComments])
      SELECT [CoachingID], [Formname], [StatusID], 
      Getdate(), @strRequestrID,@strAssignedId, @strReason, @strComments 
      FROM  [EC].[Coaching_Log]CL JOIN @tableIds ID ON
      CL.CoachingID = ID.ID 

          
             
WAITFOR DELAY '00:00:00:02'  -- Wait for 2 ms
    --PRINT 'STEP1'


UPDATE [EC].[Coaching_Log]
SET [ReassignedToID] =  @strAssignedId,
    [ReassignDate]= Getdate(),
	[ReassignCount] = ReassignCount + 1
FROM [EC].[Coaching_Log]CL JOIN @tableIds ID 
ON CL.CoachingID = ID.ID 
								
						
          

-- *** END: INSERT CUSTOM CODE HERE ***
-------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------
-- THE FOLLOWING CODE SHOULD NOT BE MODIFIED
   if @@error <> 0
   begin
      set @returnCode = @@error
      set @returnMessage = 'Error in stored procedure ' + @storedProcedureName
      rollback transaction currentTransaction
      return -1
   end
   --  We were NOT already in a transaction so one was started
   --  Therefore safely commit this transaction
   if @transactionCount = 0
   begin
      if @returnCode >= 0
      begin
         commit transaction
      end
      else -- custom code set the return code as negative, causing rollback
      begin
         rollback transaction currentTransaction
      end
   end
   -- if return message was not changed from default, do so now
   if @returnMessage = 'ok'
   begin
      set @returnMessage = @storedProcedureName + ' completed successfully'
   end
return 0
-- THE PRECEDING CODE SHOULD NOT BE MODIFIED

GO







--***************************************

--13.[EC].[sp_AT_Select_ReassignFrom_Users] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignFrom_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO










--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that currently have 
--  ecls assigned to them. Same module and site as the logged in user performing the reassign.
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignFrom_Users] 
@strRequesterin nvarchar(30), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
@intRequesterSiteID int,
@strATAdminUser nvarchar(10),
@strConditionalSelect nvarchar(100),
@strConditionalSite nvarchar(100),
@strConditionalRestrict nvarchar(100),
@dtmDate datetime

SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @strATAdminUser = EC.fn_strCheckIfATSysAdmin(@nvcRequesterID) 

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.SUP_ID UserID, eh.SUP_Name UserName '
SET @strConditionalRestrict = N'AND eh.SUP_ID <> '''+@nvcRequesterID+''' ' 
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalSelect = N'SELECT DISTINCT eh.MGR_ID UserID, eh.MGR_Name UserName '
SET @strConditionalRestrict = N'AND eh.MGR_ID <> '''+@nvcRequesterID+''''
END
		
SET @strConditionalSite = ' '
IF @strATAdminUser <> 'YES'

BEGIN
	SET @strConditionalSite = ' AND cl.SiteID = '''+CONVERT(NVARCHAR,@intRequesterSiteID)+''' '
END			 

-- Non reassigned and Non LCS eCLs
-- UNION
-- Reassigned ecls
-- UNION
-- LCS ecls


SET @nvcSQL = @strConditionalSelect +
'FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ' +
' ON cl.EmpID = eh.Emp_ID 
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND CL.ReassignCount = 0
AND NOT (CL.statusid = 5 AND ISNULL(CL.strReportCode,'' '') like ''LCS%'')'
+ @strConditionalSite 
+ @strConditionalRestrict
+ 'AND (eh.SUP_Name is NOT NULL AND eh.MGR_Name is NOT NULL)
AND eh.Active = ''A''

UNION 

SELECT DISTINCT rm.Emp_ID UserID, rm.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] rm JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.ReassignedToID = rm.Emp_ID 
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.ReassignedToID is not NULL 
AND (cl.ReassignCount < 2 and cl.ReassignCount <> 0)
AND (rm.Emp_Name is NOT NULL AND rm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND rm.Active = ''A''


UNION 

SELECT DISTINCT rm.Emp_ID UserID, rm.Emp_Name UserName
FROM [EC].[Employee_Hierarchy] rm JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) 
ON cl.MgrID = rm.Emp_ID 
WHERE cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
AND cl.StatusId= '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
AND cl.MgrID is not NULL
AND cl.strReportCode like ''LCS%''
AND CL.ReassignCount = 0
AND (rm.Emp_Name is NOT NULL AND rm.Emp_Name <> ''Unknown'')'
+ @strConditionalSite 
+ 'AND rm.Emp_ID <> '''+@nvcRequesterID+''' 
AND rm.Active = ''A''
Order By UserName'

--PRINT @nvcSQL		
EXEC (@nvcSQL)


End --sp_AT_Select_ReassignFrom_Users





GO






--***************************************


--14.[EC].[sp_AT_Select_ReassignTo_Users] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_ReassignTo_Users' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/28/2016
--	Description: *	This procedure selects the list of users that an ECL
-- can be reassigned to. users at the same level and site as the original owner. 
-- Last Updated By: 
-- Initial revision per TFS 1709 - 4/28/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_ReassignTo_Users] 
@strRequesterin nvarchar(30),@strFromUserIdin nvarchar(10), @intModuleIdin INT, @intStatusIdin INT
AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcRequesterID nvarchar(10),
--@nvcRequesterJobCode Nvarchar(30),
--@intModuleID INT,
@intRequesterSiteID int,
@intFromUserSiteID int,
@strSelect nvarchar(100),
@dtmDate datetime

--cl.ModuleID = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
SET @dtmDate  = GETDATE()   
SET @nvcRequesterID = EC.fn_nvcGetEmpIdFromLanID(@strRequesterin,@dtmDate)
--SET @intRequesterSiteID = EC.fn_intSiteIDFromEmpID(@nvcRequesterID)
SET @intFromUserSiteID = EC.fn_intSiteIDFromEmpID(@strFromUserIdin)

IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))


BEGIN
SET @strSelect = N'SELECT DISTINCT eh.SUP_ID UserID, eh.SUP_Name UserName '
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strSelect = N'SELECT DISTINCT eh.MGR_ID UserID, eh.MGR_Name UserName '
END
			 

SET @nvcSQL = @strSelect +
'FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
cl.EmpID = eh.Emp_ID 
WHERE cl.SiteID = '''+CONVERT(NVARCHAR,@intFromUserSiteID)+'''
AND (eh.SUP_Name is NOT NULL AND eh.MGR_Name is NOT NULL AND eh.SUP_Name <> ''Unknown'' AND eh.MGR_Name <> ''Unknown'')
AND (eh.SUP_ID <> '''+@strFromUserIdin+''' AND eh.MGR_ID <> '''+@strFromUserIdin+''')
AND EH.Active = ''A''
Order By UserName'

--PRINT @nvcSQL		
EXEC (@nvcSQL)


End --sp_AT_Select_ReassignTo_Users

GO









--***************************************


--15.[EC].[sp_AT_Select_Logs_Reassign] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Select_Logs_Reassign' 
)
   DROP PROCEDURE [EC].[sp_AT_Select_Logs_Reassign]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO











--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	4/21/2016
--	Description: *	This procedure returns the list of Coaching or Warning logs 
--  in the appropriate Status for the Action for the selected Employee.
--  Last Modified By: 
--  Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_AT_Select_Logs_Reassign] 
@istrOwnerin nvarchar(10), @intStatusIdin INT, @intModuleIdin INT
AS

BEGIN
DECLARE	
@strConditionalWhere nvarchar(100),
@nvcSQL nvarchar(max)


IF ((@intStatusIdin IN (6,8) AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 5 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Sup_ID = '''+@istrOwnerin+''' '
END

ELSE IF 
((@intStatusIdin = 5 AND @intModuleIdin IN (1,3,4,5))
OR (@intStatusIdin = 7 AND @intModuleIdin = 2))

BEGIN
SET @strConditionalWhere = ' WHERE EH.Mgr_ID = '''+@istrOwnerin+''' '
END

-- Check for 3 scenarios
--1. Original hierarchy owner
--2. Reassigned owner
--3. Review owner for LCS

SET @nvcSQL = 'SELECT cfact.CoachingID,  
        cfact.FormName strFormName,
		eh.Emp_Name	strEmpName,
		eh.Sup_Name	strSupName,
	    CASE
		 WHEN cfact.[strReportCode] like ''LCS%'' AND cfact.[MgrID] <> eh.[Mgr_ID]
		 THEN [EC].[fn_strEmpNameFromEmpID](cfact.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE eh.Mgr_Name END strMgrName,
		 sh.Emp_Name strSubmitter,
		s.Status,
		cfact.SubmittedDate strCreatedDate 
     FROM [EC].[Coaching_Log]cfact WITH(NOLOCK) JOIN 
     
     (SELECT fact.CoachingID
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] eh
	 ON [Fact].[EMPID] = [eh].[Emp_ID]
	 AND NOT(fact.statusid = 5 AND ISNULL(fact.strReportCode,'' '') LIKE ''LCS%'')'
	 + @strConditionalWhere +
	 'AND fact.ReassignCount = 0
	
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[ReassignedToID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND (fact.ReassignCount < 2 and fact.ReassignCount <> 0)
	 AND fact.ReassignedToID is not NULL
     UNION
     
     SELECT fact.CoachingID 
     FROM [EC].[Coaching_Log]fact WITH(NOLOCK) JOIN [EC].[Employee_Hierarchy] rm
	 ON [Fact].[MgrID] = [rm].[Emp_ID]
	 WHERE rm.Emp_ID = '''+@istrOwnerin+''' 
	 AND fact.strReportCode like ''LCS%''
	 AND fact.ReassignCount = 0)Selected 
	 
	 ON Selected.CoachingID = cfact.CoachingID JOIN [EC].[Employee_Hierarchy] eh
	 ON [cfact].[EMPID] = [eh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] sh
	 ON [cfact].[SubmitterID] = [sh].[Emp_ID]JOIN [EC].[DIM_Status] s
	 ON [cfact].[StatusID] = [s].[StatusID]
	 
	WHERE cfact.StatusId = '''+CONVERT(NVARCHAR,@intStatusIdin)+'''
	AND cfact.Moduleid = '''+CONVERT(NVARCHAR,@intModuleIdin)+'''
  	 
   ORDER BY cfact.FormName DESC'
   
--Print @nvcSQL

EXEC (@nvcSQL)	
END --sp_AT_Select_Logs_Reassign




GO






	



--***************************************


--16.[EC].[sp_AT_Populate_User] 


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_AT_Populate_User' 
)
   DROP PROCEDURE [EC].[sp_AT_Populate_User]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date: 4/27/12016
-- Description:	Performs the following actions.
-- Updates existing records and Inserts New records from the Employee table.
-- Last Modified By: Susmitha Palacherla
-- Revision History:
--  Initial Revision. Admin tool setup, TFS 1709- 4/27/12016
--
-- =============================================

CREATE PROCEDURE [EC].[sp_AT_Populate_User] 
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION

BEGIN TRY
-- Inactivate termed users and those with job code changes
-- that result in a non allowed job code. 
 
BEGIN
	UPDATE [EC].[AT_User] 
	SET [Active] = 0
	FROM [EC].[Employee_Hierarchy] EH JOIN [EC].[AT_User]U
	ON EH.Emp_ID = U.UserId
	WHERE EH.Emp_Job_Code <> 'WISY13'
	AND (EH.Active in ('T', 'D')OR EH.Emp_Job_Code NOT IN 
	(SELECT DISTINCT JobCode FROM [EC].[AT_Role_Access]
     WHERE [AddToUser] = 1))
     AND U.Active <> 0

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Reactivate users with Active status or with job code changes
-- that result in an allowed job code. 

BEGIN
    UPDATE [EC].[AT_User] 
	SET [Active] = 1
	FROM [EC].[Employee_Hierarchy] EH JOIN [EC].[AT_User]U
	ON EH.Emp_ID = U.UserId
	AND (EH.Active = 'A' AND EH.Emp_Job_Code IN 
	(SELECT DISTINCT JobCode FROM [EC].[AT_Role_Access]
     WHERE [AddToUser] = 1))
     AND U.Active = 0

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
    
-- Inserts new user records 

BEGIN
	INSERT INTO [EC].[AT_User]
	([UserId],[UserLanID],[UserName],[EmpJobCode],[Active] )
							  SELECT EH.[Emp_ID]
				  		      ,EH.[Emp_LanID]
				  		      ,EH.[Emp_Name]
				  		      ,EH.[Emp_Job_Code]
							  ,1
						  FROM [EC].[Employee_Hierarchy]EH Left outer Join [EC].[AT_User]U
						  ON EH.Emp_ID = U.UserId
						  WHERE (U.UserId IS NULL and EH.Emp_ID <> '')
						  AND EH.Active = 'A'
						  AND EH.Emp_Job_Code IN 
						 (SELECT DISTINCT JobCode FROM [EC].[AT_Role_Access]
						  WHERE [AddToUser] =1)

OPTION (MAXDOP 1)
END


-- Inserts new user role link records 

BEGIN
	INSERT INTO [EC].[AT_User_Role_Link]
	([UserId],[RoleID])
			SELECT URA.UserId, URA.RoleId FROM 
		    (SELECT U.[UserId],RA.[RoleId]
			FROM [EC].[AT_User]U JOIN [EC].[AT_Role_Access] RA
			ON U.[EmpJobCode] = RA.[JobCode]
			WHERE RA.[AddToUser]=1
			AND U.Active = 1)URA LEFT OUTER JOIN [EC].[AT_User_Role_Link]URL
			ON URA.UserId = URL.UserId
			AND URA.RoleId = URL.RoleId
			WHERE ( URL.UserId is NULL and URL.RoleId is NULL)
						

OPTION (MAXDOP 1)
END

-- Delete Role link tables for Inactive users

BEGIN
	DELETE URL
	FROM [EC].[AT_User]U JOIN EC.AT_User_Role_Link URL
	ON U.UserId = URL.UserId
	WHERE U.Active = 0
	

OPTION (MAXDOP 1)
END

COMMIT TRANSACTION
END TRY

  BEGIN CATCH
  ROLLBACK TRANSACTION
  END CATCH


END --sp_AT_Populate_User
GO










--***************************************



--17.[EC].[sp_InactivateCoachingLogsForTerms] 



IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InactivateCoachingLogsForTerms' 
)
   DROP PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		   Susmitha Palacherla
-- Create Date:    04/09/2014
-- Description:	Inactivate Coaching logs for Termed Employees.
-- Last Modified By: Susmitha Palacherla
-- Revision History:
-- Modified per TFS 549 - To Inactivate Surveys for termed Employees and Expired Surveys.
-- Surveys expire 5 days from Creation date - 09/04/2015
-- Admin tool setup per TFS 1709-  To log Inactivations in audit tables - 4/27/12016
-- =============================================
CREATE PROCEDURE [EC].[sp_InactivateCoachingLogsForTerms] 
AS
BEGIN

 DECLARE @EWFMSiteCount INT
 
 -- Inactivate Warnings logs for Termed Employees


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION

BEGIN TRY

-- Log records being inactivated to Audit table and 
-- Inactivate Warning logs for Termed Employees
BEGIN
INSERT INTO [EC].[AT_Warning_Inactivate_Reactivate_Audit]
           ([WarningID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT W.WarningID
		 ,W.FormName
		 ,W.StatusID
		 ,'Inactivate'
		 ,GetDate()
	 	 ,'999998'
		 ,'Employee Inactive'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpLanID] = H.[Emp_LanID]
AND W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2	 
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Warning_Log]
SET [StatusID] = 2
FROM [EC].[Warning_Log] W JOIN [EC].[Employee_Hierarchy]H
ON W.[EmpLanID] = H.[Emp_LanID]
AND W.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND W.[StatusID] <> 2
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Inactivate Surveys for Termed Employees

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Employee Not Active'
FROM [EC].[Survey_Response_Header]SH  JOIN [EC].[Employee_Hierarchy]H
ON SH.[EmpLanID] = H.[Emp_LanID]
AND SH.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND SH.[Status] = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


 -- Inactivate Expired Survey records (5 days after creation date)

BEGIN
UPDATE [EC].[Survey_Response_Header]
SET [Status] = 'Inactive'
,[InactivationDate] = GETDATE()
,[InactivationReason] = 'Survey Expired'
WHERE DATEDIFF(DAY, [CreatedDate],  GETDATE())>= 5
AND [Status]  = 'Open'
AND [InactivationReason] IS NULL
OPTION (MAXDOP 1)
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



--Log records being inactivated to Audit table and 
--Inactivate Coaching logs for Termed Employees

BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee Inactive'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)	 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[Employee_Hierarchy]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = H.[Emp_ID]
WHERE CAST(H.[End_Date] AS DATETIME)< GetDate()
AND H.[Active] in ('T','D')
AND H.[End_Date]<> '99991231'
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for Employees on Extended Absence


BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee on EA'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2) 
OPTION (MAXDOP 1)		 
END


WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C JOIN [EC].[EmpID_To_SupID_Stage]H
ON C.[EmpLanID] = H.[Emp_LanID]
AND C.[EmpID] = LTRIM(H.[Emp_ID])
WHERE H.[Emp_Status]= 'EA'
AND H.[Emp_LanID] IS NOT NULL
AND C.[StatusID] not in (1,2)
OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Log records being inactivated to Audit table and 
-- Inactivate Coaching logs for CSRs and Sup Module eCLs for Employees not arriving in eWFM feed.


SET @EWFMSiteCount = (SELECT count(DISTINCT Emp_Site_Code) FROM [EC].[EmpID_To_SupID_Stage])
IF @EWFMSiteCount >= 14



BEGIN
INSERT INTO [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
           ([CoachingID]
           ,[FormName]
           ,[LastKnownStatus]
           ,[Action]
           ,[ActionTimestamp]
           ,[RequesterID]
           ,[Reason]
           ,[RequesterComments]
          )
   SELECT C.CoachingID
		 ,C.FormName
		 ,C.StatusID
		 ,'Inactivate'
		 ,GetDate()
		 ,'999998'
		 ,'Employee not in feed'
		 ,'Employee Hierarchy Load Process'
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END
		 

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

BEGIN
UPDATE [EC].[Coaching_Log]
SET [StatusID] = 2
FROM [EC].[Coaching_Log] C LEFT OUTER JOIN [EC].[EmpID_To_SupID_Stage] S
ON C.EMPID = LTRIM(S.EMP_ID)
WHERE C.[StatusID] not in (1,2)
AND C.[ModuleID]  in (1,2)
AND S.EMP_ID IS NULL
OPTION (MAXDOP 1)
END


COMMIT TRANSACTION
END TRY

  BEGIN CATCH
  ROLLBACK TRANSACTION
  END CATCH

END  -- [EC].[sp_InactivateCoachingLogsForTerms]




GO








--***************************************





--18.[EC].[sp_Update1Review_Coaching_Log]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update1Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update1Review_Coaching_Log]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:      11/16/12
--    Description: *    This procedure allows supervisors to update the e-Coaching records from review page. 
--    Updated per TFS 115/118 to fix issue with Coaching Notes overwritten - 07/22/2015
--    Updated per TFS 1709 Admin tool setup to reset reassign count  - 5/2/2016
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update1Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcReviewSupLanID Nvarchar(20),
      @dtmSupReviewedAutoDate datetime,
	  @nvctxtCoachingNotes Nvarchar(max) 
)
AS

BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

DECLARE @nvcReviewSupID Nvarchar(10),
	    @dtmDate datetime
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewSupID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewSupLanID,@dtmDate)

UPDATE [EC].[Coaching_Log]
	   SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
	       Review_SupID = @nvcReviewSupID,
		   SupReviewedAutoDate = @dtmSupReviewedAutoDate,
		   CoachingNotes = @nvctxtCoachingNotes,
		   ReassignCount = 0
from EC.Coaching_Log      
	WHERE FormName = @nvcFormID
	OPTION (MAXDOP 1)
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
END               
END CATCH


END --sp_Update1Review_Coaching_Log
GO






--***************************************


--19.[EC].[sp_Update2Review_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update2Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update2Review_Coaching_Log]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:      11/16/11
--    Description: *    This procedure allows managers to update the e-Coaching records from the review page with Yes, this is a confirmed Customer Service Escalation. 
--    Updated per TFS 115/118 to fix issue with Coaching Notes overwritten - 07/22/2015
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update2Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcReviewMgrLanID Nvarchar(20),
      @dtmMgrReviewAutoDate datetime,
	  @dtmMgrReviewManualDate datetime,
	  @bitisCSE bit,
      @nvctxtMgrNotes nvarchar(max)

)
AS
BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY 

DECLARE @nvcReviewMgrID Nvarchar(10),
	    @dtmDate datetime
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewMgrID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewMgrLanID,@dtmDate)
      
UPDATE [EC].[Coaching_Log]
	   SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
	       Review_MgrID = @nvcReviewMgrID,
		   MgrReviewAutoDate = @dtmMgrReviewAutoDate,
		   MgrReviewManualDate = @dtmMgrReviewManualDate,
		   isCSE = @bitisCSE,
           MgrNotes = @nvctxtMgrNotes,
           ReassignCount = 0
from EC.Coaching_Log       
	WHERE FormName = @nvcFormID
	OPTION (MAXDOP 1)	
	
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
	END               
END CATCH


END --sp_Update2Review_Coaching_Log

GO







--***************************************


--20.[EC].[sp_Update3Review_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update3Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update3Review_Coaching_Log]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:     11/16/12
--    Description:    This procedure allows managers to update the e-Coaching records from the review page with No, this is not a confirmed Customer Service Escalation. 
--    Updated per SCR 13891 to capture review mgr id - 12/16/2014
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    =====================================================================
CREATE  PROCEDURE [EC].[sp_Update3Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcReviewMgrLanID Nvarchar(20),
      @dtmMgrReviewAutoDate datetime,
      @dtmMgrReviewManualDate datetime,
      @bitisCSE bit,
      @nvcMgrNotes Nvarchar(max)
    
)
AS
BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @nvcReviewMgrID Nvarchar(10),
	    @dtmDate datetime
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewMgrID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewMgrLanID,@dtmDate)
	
UPDATE [EC].[Coaching_Log]
	   SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
	       Review_MgrID = @nvcReviewMgrID,
		   isCSE = @bitisCSE,
		   MgrReviewAutoDate = @dtmMgrReviewAutoDate,
		   MgrReviewManualDate = @dtmMgrReviewManualDate,
           MgrNotes = @nvcMgrNotes,
           ReassignCount = 0
from EC.Coaching_Log        
	WHERE FormName = @nvcFormID
	OPTION (MAXDOP 1)	
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
END               
END CATCH


END --sp_Update3Review_Coaching_Log

GO







--***************************************


--21.[EC].[sp_Update5Review_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update5Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:    11/16/2012
--    Description:    This procedure allows managers to update the e-Coaching records from the review page for Outlier records. 
--    Updated per TFS 644 to add IAE and IAT reports - 09/17/2015
--    Updated per TFS 2145 to reset Email reminder attributes for OMR logs  - 3/2/2016
--    Updated per TFS 1732 to support Training sdr  feed  - 3/4/2016
--    Updated per TFS 2283 to support Training odt feed  - 3/22/2016
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update5Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcstrReasonNotCoachable Nvarchar(30),
      @nvcReviewerLanID Nvarchar(20),
      @dtmReviewAutoDate datetime,
      @dtmReviewManualDate datetime,
      @bitisCoachingRequired bit,
      @nvcReviewerNotes Nvarchar(max),
      @nvctxtReasonNotCoachable Nvarchar(max)
    
)
AS
BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

DECLARE @nvcReviewerID Nvarchar(10),
	    @dtmDate datetime,
	    @nvcCat Nvarchar (10)
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewerID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewerLanID,@dtmDate)
--SET @nvcCat = (select strReportCode from EC.Coaching_Log where FormName = @nvcFormID) 
SET @nvcCat = (select RTRIM(LEFT(strReportCode,LEN(strReportCode)-8)) from EC.Coaching_Log where FormName = @nvcFormID) 


--IF LEFT(@nvcCat,LEN(@nvcCat)-8) IN ('OAE','OAS')
  IF @nvcCat IN ('OAE','OAS', 'IAE','IAT', 'SDR','ODT')

BEGIN      
UPDATE 	EC.Coaching_Log
SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
        Review_SupID = @nvcReviewerID,
		strReasonNotCoachable = @nvcstrReasonNotCoachable,
		isCoachingRequired = @bitisCoachingRequired,
		SupReviewedAutoDate =  @dtmReviewAutoDate,
		CoachingDate =  @dtmReviewManualDate,
		CoachingNotes = @nvcReviewerNotes,		   
		txtReasonNotCoachable = @nvctxtReasonNotCoachable,
		ReassignCount = 0 
	WHERE FormName = @nvcFormID
        OPTION (MAXDOP 1)
        
  
UPDATE EC.Coaching_Log_Reason
SET Value = (CASE WHEN @bitisCoachingRequired = 'True' then 'Opportunity' ELSE 'Not Coachable' END)
  	FROM EC.Coaching_Log cl INNER JOIN EC.Coaching_Log_Reason clr
	ON cl.CoachingID = clr.CoachingID
	WHERE cl.FormName = @nvcFormID
and clr.SubCoachingReasonID in (120,121,29,231,232,233)
        OPTION (MAXDOP 1)

END

ELSE

BEGIN

UPDATE 	EC.Coaching_Log
SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
        Review_MgrID = @nvcReviewerID,
		strReasonNotCoachable = @nvcstrReasonNotCoachable,
		isCoachingRequired = @bitisCoachingRequired,
		MgrReviewAutoDate = @dtmReviewAutoDate,
		MgrReviewManualDate = @dtmReviewManualDate,
		MgrNotes = @nvcReviewerNotes,		   
		txtReasonNotCoachable = @nvctxtReasonNotCoachable, 
		ReminderSent = 0,
        ReminderDate = NULL,
        ReminderCount = 0,
        ReassignCount = 0 
	WHERE FormName = @nvcFormID
        OPTION (MAXDOP 1)

UPDATE EC.Coaching_Log_Reason
SET Value = (CASE WHEN @bitisCoachingRequired = 'True' then 'Opportunity' ELSE 'Not Coachable' END)
  	FROM EC.Coaching_Log cl INNER JOIN EC.Coaching_Log_Reason clr
	ON cl.CoachingID = clr.CoachingID
	INNER JOIN EC.DIM_Coaching_Reason cr ON cr.CoachingReasonID = clr.CoachingReasonID
WHERE cl.FormName = @nvcFormID
and cr.CoachingReason in ('OMR / Exceptions', 'Current Coaching Initiative')
        OPTION (MAXDOP 1)

END
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
END               
END CATCH


END --sp_Update5Review_Coaching_Log

GO





--***************************************


--22.[EC].[sp_Update8Review_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update8Review_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_Update8Review_Coaching_Log]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


--    ====================================================================
--    Author:                 Susmitha Palacherla
--    Create Date:   01/07/2015
--    Description:    This procedure allows managers to update the e-Coaching records from the review page for Outlier records. 
--    Updated per SCR 13891 to capture review mgr id - 12/16/2014
--    Updated per TFS 1709 Admin tool setup to reset reassign count to 0 - 5/2/2016
--    =====================================================================
CREATE PROCEDURE [EC].[sp_Update8Review_Coaching_Log]
(
      @nvcFormID Nvarchar(50),
      @nvcFormStatus Nvarchar(30),
      @nvcstrReasonNotCoachable Nvarchar(30),
      @nvcReviewSupLanID Nvarchar(20),
      @dtmSupReviewAutoDate datetime,
      --@dtmSupReviewManualDate datetime,
      @bitisCoachingRequired bit,
--      @nvcstrCoachReason_Current_Coaching_Initiatives Nvarchar(30), 
      @nvcSupNotes Nvarchar(max),
      @nvctxtReasonNotCoachable Nvarchar(max)
    
)
AS
BEGIN
DECLARE @RetryCounter INT
SET @RetryCounter = 1

RETRY: -- Label RETRY


SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

DECLARE @nvcReviewSupID Nvarchar(10),
	    @dtmDate datetime,
	    @ModuleID INT
	    
       
SET @dtmDate  = GETDATE()   
SET @nvcReviewSupID = EC.fn_nvcGetEmpIdFromLanID(@nvcReviewSupLanID,@dtmDate)
SET @ModuleID = (SELECT ModuleID From EC.Coaching_Log WHERE FormName = @nvcFormID)          
 

      
UPDATE 	EC.Coaching_Log
SET StatusID = (select StatusID from EC.DIM_Status where status = @nvcFormStatus),
        Review_SupID = @nvcReviewSupID,
		strReasonNotCoachable = @nvcstrReasonNotCoachable,
		isCoachingRequired = @bitisCoachingRequired,
		SupReviewedAutoDate = @dtmSupReviewAutoDate,
		CoachingNotes = @nvcSupNotes,		   
		txtReasonNotCoachable = @nvctxtReasonNotCoachable,
		ReassignCount = 0
	WHERE FormName = @nvcFormID
        OPTION (MAXDOP 1)

UPDATE EC.Coaching_Log_Reason
SET Value = (CASE WHEN @bitisCoachingRequired = 'True' then 'Opportunity' ELSE 'Not Coachable' END)
  	FROM EC.Coaching_Log cl INNER JOIN EC.Coaching_Log_Reason clr
	ON cl.CoachingID = clr.CoachingID
	--INNER JOIN EC.DIM_Coaching_Reason cr ON cr.CoachingReasonID = clr.CoachingReasonID
WHERE cl.FormName = @nvcFormID
and clr.SubCoachingReasonID in (120,121)
        OPTION (MAXDOP 1)
	
COMMIT TRANSACTION
END TRY

BEGIN CATCH
	--PRINT 'Rollback Transaction'
	ROLLBACK TRANSACTION
	DECLARE @DoRetry bit; -- Whether to Retry transaction or not
	DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT
    
	SET @doRetry = 0;
	
	IF ERROR_NUMBER() = 1205 -- Deadlock Error Number
	BEGIN
		SET @doRetry = 1; -- Set @doRetry to 1 only for Deadlock
	END
	IF @DoRetry = 1
	BEGIN
		SET @RetryCounter = @RetryCounter + 1 -- Increment Retry Counter By one
		IF (@RetryCounter > 3) -- Check whether Retry Counter reached to 3
		BEGIN
			RAISERROR(@ErrorMessage, 18, 1) -- Raise Error Message if 
				-- still deadlock occurred after three retries
		END
		ELSE
		BEGIN
			WAITFOR DELAY '00:00:00.05' -- Wait for 5 ms
			GOTO RETRY	-- Go to Label RETRY
		END
	END
	ELSE
	BEGIN
    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
END               
END CATCH


END --sp_Update8Review_Coaching_Log

GO







--***************************************


--23.[EC].[sp_SelectFrom_Coaching_Log_MGRPending] 


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: This procedure selects the Pending e-Coaching records 
--  for a given Manager in the Manager Dashboard.
-- Last Updated By: Susmitha Palacherla
-- Modified per SCR 14422 during dashboard resdesign - 04/16/2015
-- 1. To Replace old style joins.
-- 2. Lan ID association by date.
-- Updated per SCR 14818 to support rotating managers for Low CSAT - 05/22/2015
-- Modified per TFS 1710 Admin Tool setup - 5/2/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRPending] 
@strCSRMGRin nvarchar(30),
@strCSRin nvarchar(30),
@strCSRSUPin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(2000),
@nvcSQL2 nvarchar(20),
@nvcSQL3 nvarchar(2000),
@nvcSQL4 nvarchar(100),
@strReportCode nvarchar(30),
@strFormStatus1 nvarchar(50),
@strFormStatus2 nvarchar(50),
@strFormStatus3 nvarchar(50),
@strFormStatus4 nvarchar(50),
@strFormStatus5 nvarchar(50),
@strFormStatus6 nvarchar(50),
@nvcMGRID Nvarchar(10),
@dtmDate datetime

 Set @strReportCode = 'LCS%'
 Set @strFormStatus1 = 'Pending Manager Review'
 Set @strFormStatus2 = 'Pending Supervisor Review'
 Set @strFormStatus3 = 'Pending Acknowledgement'
 Set @strFormStatus4 = 'Pending Sr. Manager Review'
 Set @strFormStatus5 = 'Pending Deputy Program Manager Review'
 Set @strFormStatus6 = 'Pending Quality Lead Review'
 Set @dtmDate  = GETDATE()   
 Set @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL1 = 'select DISTINCT x.strFormID
        ,x.strCSR
		,x.strCSRName
		,x.strCSRSupName
		,x.strFormStatus
		,x.submitteddate
	from (SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_LanID] strCSR,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[s].[Status]	strFormStatus,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[DIM_Status] s ON 
cl.StatusID = s.StatusID
WHERE (([ReassignCount]= 0 AND eh.[Mgr_ID] = '''+@nvcMGRID+''' 
AND([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus4+''' OR [S].[Status] = '''+@strFormStatus5+''')) 
OR(cl.[ReassignedToID] = '''+@nvcMGRID+''' AND [ReassignCount]<> 0
AND ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus4+''' OR [S].[Status] = '''+@strFormStatus5+''')) 
OR([ReassignCount]= 0 AND eh.[Sup_ID] = '''+@nvcMGRID+'''
AND ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus2+''' OR [S].[Status] = '''+@strFormStatus3+''' OR [S].[Status] = '''+@strFormStatus6+''')))
AND [eh].[Emp_Name] Like '''+@strCSRin+'''
AND [eh].[Sup_Name] Like '''+@strCSRSUPin+'''
AND ([cl].[strReportCode] not like '''+@strReportCode+''' OR [cl].[strReportCode] is NULL)
AND (eh.[Mgr_ID] <> ''999999'' AND eh.[Sup_ID] <> ''999999''))X'

		
SET @nvcSQL2 = ' UNION '

SET @nvcSQL3 = 'select DISTINCT x.strFormID
        ,x.strCSR
		,x.strCSRName
		,x.strCSRSupName
		,x.strFormStatus
		,x.submitteddate
	from (SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_LanID] strCSR,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name]	strCSRSupName, 
		[s].[Status]	strFormStatus,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[DIM_Status] s ON 
cl.StatusID = s.StatusID
WHERE (([ReassignCount]= 0 AND cl.[MgrID] = '''+@nvcMGRID+''' AND [S].[Status] = '''+@strFormStatus1+''')
OR (cl.[ReassignedToID] = '''+@nvcMGRID+''' AND [ReassignCount]<> 0 AND [S].[Status] = '''+@strFormStatus1+''')
OR ([ReassignCount]= 0 AND eh.[Sup_ID] = '''+@nvcMGRID+''' AND [S].[Status] = '''+@strFormStatus2+'''))
AND [eh].[Emp_Name] Like '''+@strCSRin+'''
AND [eh].[Sup_Name] Like '''+@strCSRSUPin+'''
AND [cl].[strReportCode] like '''+@strReportCode+'''
AND (cl.[MgrID] <> ''999999'' AND eh.[Sup_ID] <> ''999999'')) X'

SET @nvcSQL4 = '  Order By [SubmittedDate] DESC'


SET @nvcSQL = @nvcSQL1 + @nvcSQL2 +  @nvcSQL3 + @nvcSQL4

	
	
EXEC (@nvcSQL)	
--Print @nvcsql
	    
END -- sp_SelectFrom_Coaching_Log_MGRPending
GO










--***************************************


--24.[EC].[sp_SelectFrom_Coaching_Log_SUPPending]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_SUPPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/11
--	Description: This procedure selects the Pending e-Coaching records 
--  for a given Supervisor in the Supervisor Dashboard.
-- Last Updated By: Susmitha Palacherla
-- Modified per SCR 14422 during dashboard resdesign - 04/16/2015
-- 1. To Replace old style joins.
-- 2. Lan ID association by date.
-- Modified per TFS 1710 Admin Tool setup - 5/2/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_SUPPending] @strCSRSUPin nvarchar(30)
AS


BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@strFormStatus1 nvarchar(30),
@strFormStatus2 nvarchar(30),
@strFormStatus3 nvarchar(30),
@strFormStatus4 nvarchar(30),
@strFormStatus5 nvarchar(30),
@nvcSUPID Nvarchar(10),
@dtmDate datetime

 Set @strFormStatus1 = 'Pending Supervisor Review'
 Set @strFormStatus2 = 'Pending Acknowledgement'
 Set @strFormStatus3 = 'Pending Manager Review'
 Set @strFormStatus4 = 'Pending Quality Lead Review'
 Set @strFormStatus5 = 'Pending Employee Review'
 Set @dtmDate  = GETDATE()   
 Set @nvcSUPID = EC.fn_nvcGetEmpIdFromLanID(@strCSRSUPin,@dtmDate)
 
SET @nvcSQL = 'SELECT [cl].[FormName] strFormID,
			[eh].[Emp_LanID] strCSR,
			[eh].[Emp_Name]	strCSRName,
			[eh].[Sup_Name] strCSRSupName,
			[S].[Status]	strFormStatus,
			[cl].[SubmittedDate] SubmittedDate
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH (NOLOCK) ON
cl.EmpID = eh.Emp_ID JOIN [EC].[DIM_Status] s ON 
cl.StatusID = s.StatusID
WHERE (
([ReassignCount]= 0 AND (eh.[Sup_ID] = '''+@nvcSUPID+''' OR eh.[Mgr_ID] = '''+@nvcSUPID+''')
AND ([S].[Status] = '''+@strFormStatus1+''' OR [S].[Status] = '''+@strFormStatus2+'''OR [S].[Status] = '''+@strFormStatus3+'''OR [S].[Status] = '''+@strFormStatus4+'''))
OR (cl.[ReassignedToId] = '''+@nvcSUPID+''' AND [ReassignCount]<> 0 AND [S].[Status] = '''+@strFormStatus1+''')
OR (eh.[Emp_ID] = '''+@nvcSUPID+''' AND [S].[Status] = '''+@strFormStatus5+''')
)
AND (eh.[Sup_ID] <> ''999999'' AND eh.[Mgr_ID] <> ''999999'')
ORDER BY [cl].[SubmittedDate] DESC'
		
EXEC (@nvcSQL)	
--Print @nvcSQL
	    
END --sp_SelectFrom_Coaching_Log_SUPPending
GO




--***************************************


--25.[EC].[sp_SelectReviewFrom_Coaching_Log]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
-- SQL split into 2 parts to overcome sql string size restriction.

-- Last Updated By: Susmitha Palacherla
-- 1. TFS 1877 to support OMR Low CSAT logs should be viewable by hierarchy manger - 2/17/2016
-- 2. TFS 1914 to support  OMR Short Calls feed with Manager Review - 2/17/2016
-- 3. TFS 1732 to support SDR Training feed - 3/2/2016
-- 4. TFS 2283 to support ODT Training feed - 3/22/2016
-- 5. TFS 1709 to support Reassigned sups and Mgrs - 5/6/2016

--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log] @strFormIDin nvarchar(50)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcEmpID nvarchar(10),
@nvcMgrID nvarchar(10)


SET @nvcEmpID = (SELECT [EmpID] From [EC].[Coaching_Log] WHERE [FormName]= @strFormIDin)	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID)

  SET @nvcSQL1 = 'SELECT  cl.CoachingID 	numID,
		cl.FormName	strFormID,
		m.Module,
		sc.CoachingSource	strFormType,
		s.Status	strFormStatus,
		cl.EventDate	EventDate,
		cl.CoachingDate	CoachingDate,
		cl.SubmitterID strSubmitterID,
		cl.SupID strCLSupID,
		cl.MgrID strCLMgrID,
		sh.Emp_LanID	strSubmitter,		
		sh.Emp_Name	strSubmitterName,
		sh.Emp_Email	strSubmitterEmail,	
		cl.EmpID strEmpID,		
		cl.EmpLanID	strEmpLanID,
		eh.Emp_Name	strCSRName,
		eh.Emp_Email	strCSREmail,
		st.City	strCSRSite,
		eh.Sup_ID strCSRSupID,
		eh.Sup_LanID strCSRSup,
		eh.Sup_Name strCSRSupName,
		eh.Sup_Email  strCSRSupEmail,
	CASE 
	     WHEN (cl.[statusId]= 6 AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[Review_SupID]is NOT NULL and cl.[Review_SupID] = cl.[ReassignedToID] and [ReassignCount]= 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_SupID])
		 ELSE ''NA''
	END  strReassignedSupName,	
		eh.Mgr_ID strCSRMgrID,
	CASE 
		 WHEN cl.[strReportCode] like ''LCS%'' 
		 THEN [EC].[fn_strEmpLanIDFromEmpID](cl.[MgrID])
		 ELSE eh.Mgr_LanID 
	END strCSRMgr,
	CASE
		 WHEN cl.[strReportCode] like ''LCS%'' AND cl.[MgrID] <> '''+@nvcMgrID+'''
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE eh.Mgr_Name 
	END strCSRMgrName,
		eh.Mgr_Email strCSRMgrEmail,
	CASE 
	     WHEN (cl.[statusId]= 5 AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[Review_MgrID]is NOT NULL AND cl.[Review_MgrID] = cl.[ReassignedToID]and [ReassignCount]= 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_MgrID])
		 ELSE ''NA''
	END strReassignedMgrName, '
	
	  SET @nvcSQL2 =
		'ISNULL(suph.Emp_Name,''Unknown'') strReviewer,
		cl.ReassignedToID,
        sc.SubCoachingSource	strSource,
        CASE WHEN sc.SubCoachingSource in (''Verint-GDIT'',''Verint-TQC'',''LimeSurvey'',''IQS'',''Verint-GDIT Supervisor'')
		THEN 1 ELSE 0 END 	isIQS,
		cl.isUCID    isUCID,
		cl.UCID	strUCID,
		cl.isVerintID	isVerintMonitor,
		cl.VerintID	strVerintID,
		cl.VerintFormName VerintFormName,
		cl.isAvokeID	isBehaviorAnalyticsMonitor,
		cl.AvokeID	strBehaviorAnalyticsID,
		cl.isNGDActivityID	isNGDActivityID,
		cl.NGDActivityID	strNGDActivityID,
		CASE WHEN cc.CSE = ''Opportunity'' Then 1 ELSE 0 END "Customer Service Escalation",
		CASE WHEN cc.CCI is Not NULL Then 1 ELSE 0 END	"Current Coaching Initiative",
		CASE WHEN cc.OMR is Not NULL AND cc.LCS is NULL AND cc.SDR is NULL AND cc.ODT is NULL Then 1 ELSE 0 END	"OMR / Exceptions",
		CASE WHEN cc.ETSOAE is Not NULL Then 1 ELSE 0 END	"ETS / OAE",
		CASE WHEN cc.ETSOAS is Not NULL Then 1 ELSE 0 END	"ETS / OAS",
		CASE WHEN cc.OMRIAE is Not NULL Then 1 ELSE 0 END	"OMR / IAE",
		CASE WHEN cc.OMRIAT is Not NULL Then 1 ELSE 0 END	"OMR / IAT",
		CASE WHEN cc.OMRISQ is Not NULL Then 1 ELSE 0 END	"OMR / ISQ",
		CASE WHEN cc.LCS is Not NULL Then 1 ELSE 0 END	"LCS",
		CASE WHEN cc.SDR is Not NULL Then 1 ELSE 0 END	"Training / SDR",
	    CASE WHEN cc.ODT is Not NULL Then 1 ELSE 0 END	"Training / ODT",
	  	cl.Description txtDescription,
		cl.CoachingNotes txtCoachingNotes,
		cl.isVerified,
		cl.SubmittedDate,
		cl.StartDate,
		cl.SupReviewedAutoDate,
		cl.isCSE,
		cl.MgrReviewManualDate,
		cl.MgrReviewAutoDate,
		cl.MgrNotes txtMgrNotes,
		cl.isCSRAcknowledged,
		cl.isCoachingRequired,
		cl.CSRReviewAutoDate,
		cl.CSRComments txtCSRComments
	    FROM  [EC].[Coaching_Log] cl JOIN'
	    
SET @nvcSQL3 = '  (SELECT  ccl.FormName,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Customer Service Escalation'' THEN [clr].[Value] ELSE NULL END)	CSE,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Current Coaching Initiative'' THEN [clr].[Value] ELSE NULL END)	CCI,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''OMR / Exceptions'' THEN [clr].[Value] ELSE NULL END)	OMR,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 120 THEN [clr].[Value] ELSE NULL END)	ETSOAE,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 121 THEN [clr].[Value] ELSE NULL END)	ETSOAS,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 29 THEN [clr].[Value] ELSE NULL END)	OMRIAE,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 231 THEN [clr].[Value] ELSE NULL END)	OMRIAT,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 34 THEN [clr].[Value] ELSE NULL END)	LCS,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 23 THEN [clr].[Value] ELSE NULL END)	OMRISQ,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 232 THEN [clr].[Value] ELSE NULL END)	SDR,
     MAX(CASE WHEN [clr].[SubCoachingReasonID] = 233 THEN [clr].[Value] ELSE NULL END)	ODT
 	 FROM [EC].[Coaching_Log_Reason] clr,
	 [EC].[DIM_Coaching_Reason] cr,
	 [EC].[Coaching_Log] ccl 
	 WHERE [ccl].[FormName] = '''+@strFormIDin+'''
	 AND [clr].[CoachingReasonID] = [cr].[CoachingReasonID]
	 AND [ccl].[CoachingID] = [clr].[CoachingID] 
	 GROUP BY ccl.FormName ) cc
ON [cl].[FormName] = [cc].[FormName] JOIN  [EC].[Employee_Hierarchy] eh
	 ON [cl].[EMPID] = [eh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] sh
	 ON [cl].[SubmitterID] = [sh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] suph
	 ON ISNULL([cl].[Review_SupID],''999999'') = [suph].[Emp_ID] JOIN [EC].[Employee_Hierarchy] mgrh
	 ON ISNULL([cl].[Review_MgrID],''999999'') = [mgrh].[Emp_ID]JOIN [EC].[DIM_Status] s
	 ON [cl].[StatusID] = [s].[StatusID] JOIN [EC].[DIM_Source] sc
     ON [cl].[SourceID] = [sc].[SourceID] JOIN [EC].[DIM_Site] st
	 ON [cl].[SiteID] = [st].[SiteID] JOIN [EC].[DIM_Module] m ON [cl].[ModuleID] = [m].[ModuleID]
Order By [cl].[FormName]'
		
SET @nvcSQL =  @nvcSQL1 +  @nvcSQL2 +  @nvcSQL3
EXEC (@nvcSQL)
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log

GO







--***************************************

--26.[EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending] 

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectFrom_Coaching_Log_MGRCSRPending' 
)
   DROP PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	11/16/2011
--	Description: This procedure selects the Pendingd e-Coaching records 
--  for a given Manager's employees in the Manager Dashboard.
--  Last Updated By: Susmitha Palacherla
--  Revision History:
--  Modified per scr 14422 - dashboard redesign - 04/16/2015
--  1. To Replace old style joins.
--  2. Lan ID association by date.
--  Modified per TFS 1709 - Admin tool setup to add non hierarchy sups - 5/4/2016
--	=====================================================================
CREATE PROCEDURE [EC].[sp_SelectFrom_Coaching_Log_MGRCSRPending] 

@strCSRMGRin nvarchar(30),
@strCSRSUPin nvarchar(30),
@strSourcein nvarchar(100),
@strCSRin nvarchar(30) 

AS

BEGIN
DECLARE	
@nvcSQL nvarchar(max),
@nvcMGRID Nvarchar(10),
@dtmDate datetime


SET @dtmDate  = GETDATE()   
SET @nvcMGRID = EC.fn_nvcGetEmpIdFromLanID(@strCSRMGRin,@dtmDate)

SET @nvcSQL = 'SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[eh].[Sup_Name] strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource] strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
[cl].[EmpID] = [eh].[Emp_ID] Join [EC].[DIM_Status] s ON
[cl].[StatusID] = [s].[StatusID] JOIN  [EC].[DIM_Source] sc ON
[cl].[SourceID] = [sc].[SourceID] 
where eh.[Mgr_ID] = '''+@nvcMGRID+''' 
and [S].[Status] like ''Pending%''
and [sc].[SubCoachingSource] Like '''+@strSourcein+'''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [eh].[Sup_Name] Like '''+@strCSRSUPin+'''
and eh.[Mgr_ID] <> ''999999''
AND (cl.[ReassignedToID] IS NULL OR cl.[ReassignedToID] IN 
(SELECT DISTINCT Emp_ID FROM EC.Employee_Hierarchy 
WHERE Sup_ID = '''+@nvcMGRID+'''))

UNION

SELECT [cl].[FormName]	strFormID,
		[eh].[Emp_Name]	strCSRName,
		[rs].[Emp_Name] strCSRSupName, 
		[eh].[Mgr_Name]	strCSRMgrName, 
		[s].[Status]	strFormStatus,
		[sc].[SubCoachingSource] strSource,
		[cl].[SubmittedDate]	SubmittedDate
FROM [EC].[Employee_Hierarchy] eh JOIN [EC].[Coaching_Log] cl WITH(NOLOCK) ON
[cl].[EmpID] = [eh].[Emp_ID] Join [EC].[Employee_Hierarchy] rs
ON rs.Emp_ID = cl.ReassignedToID Join [EC].[DIM_Status] s ON
[cl].[StatusID] = [s].[StatusID] JOIN  [EC].[DIM_Source] sc ON
[cl].[SourceID] = [sc].[SourceID] 
where rs.[Sup_ID] = '''+@nvcMGRID+''' 
and [S].[Status] like ''Pending%''
and [sc].[SubCoachingSource] Like '''+@strSourcein+'''
and [eh].[Emp_Name] Like '''+@strCSRin+'''
and [rs].[Emp_Name] Like '''+@strCSRSUPin+'''
and eh.[Mgr_ID] <> ''999999''
AND cl.[ReassignedToID] IS NOT NULL 

Order By [SubmittedDate] DESC'
		
EXEC (@nvcSQL)
--PRINT 	(@nvcSQL)   
END --sp_SelectFrom_Coaching_Log_MGRCSRPending







GO






--***************************************
--***************************************
	--SECTION 3B - FUNCTIONs--

--***************************************
--***************************************

--1.[EC].[fn_intLastKnownStatusForCoachingID]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_intLastKnownStatusForCoachingID' 
)
   DROP FUNCTION [EC].[fn_intLastKnownStatusForCoachingID]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:           Susmitha Palacherla
-- Create date:      04/21/2015
-- Description:	     Given a CoachingID returns the last known active status from the audit table.
-- Revision History:
-- Initial revision - Created per TFS 1709 Admin tool setup - 4/21/2016
-- =============================================

CREATE FUNCTION [EC].[fn_intLastKnownStatusForCoachingID] (
  @bigintID bigint
)
RETURNS INT
AS
BEGIN
  DECLARE @intLKStatusID INT


  SET @intLKStatusID = 
(SELECT A.[LastKnownStatus] 
FROM [EC].[AT_Coaching_Inactivate_Reactivate_Audit]A
JOIN (SELECT [CoachingID], MAX([ActionTimestamp])AS MaxActionTimestamp
 FROM [EC].[AT_Coaching_Inactivate_Reactivate_Audit]
 WHERE [LastKnownStatus] <> 2
 GROUP BY [CoachingID]) AMax
 ON A.[CoachingID]= AMax.[CoachingID]
 AND A.ActionTimestamp = AMax.MaxActionTimestamp
  WHERE  A.[CoachingID] = @bigintID)
  
         
RETURN @intLKStatusID

END  -- fn_intLastKnownStatusForCoachingID




GO



--***************************************

--2.[EC].[fn_strCheckIfATSysAdmin]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strCheckIfATSysAdmin' 
)
   DROP FUNCTION [EC].[fn_strCheckIfATSysAdmin]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:		Susmitha Palacherla
-- Create date:  5/6/2016
-- Description:	Given an Employee ID returns the number of Admin Tool roles
-- Last Modified By:
-- Revision History:
-- where isSysAdmin = 1
--  Created per TFS 1709 - Initial setup of admin tool - 05/06/2016

-- =============================================
CREATE FUNCTION [EC].[fn_strCheckIfATSysAdmin] 
(
	@strEmpID nvarchar(10) 
)
RETURNS NVARCHAR(10)
AS
BEGIN
	DECLARE 
	@intCountAdminRoles int,
	@strSysAdmin nvarchar(10)
	
		 

 SET @intCountAdminRoles = (SELECT Count(r.[RoleId])
FROM [EC].[AT_Role]r JOIN [EC].[AT_User_Role_Link] ur
ON r.RoleId = ur.RoleId JOIN [EC].[AT_User]u 
ON u.UserId = ur.UserId 
WHERE r.IsSysAdmin = 1
AND u.UserID = @strEmpID )
  
  IF     @intCountAdminRoles > 0
  SET    @strSysAdmin = N'YES'
  ELSE
  SET    @strSysAdmin = N'NO'
  
  RETURN   @strSysAdmin
  
END --fn_strCheckIfATSysAdmin




GO





--***************************************
--3.[EC].[fn_strCheckIfATCoachingAdmin]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strCheckIfATCoachingAdmin' 
)
   DROP FUNCTION [EC].[fn_strCheckIfATCoachingAdmin]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		Susmitha Palacherla
-- Create date:  5/6/2016
-- Description:	Given an Employee ID returns if the user is a Coaching Admin
-- Last Modified By:
-- Revision History:
--  Created per TFS 1709 - Initial setup of admin tool - 05/06/2016

-- =============================================
CREATE FUNCTION [EC].[fn_strCheckIfATCoachingAdmin] 
(
	@strEmpID nvarchar(10) 
)
RETURNS NVARCHAR(10)
AS
BEGIN
	DECLARE 
	@intCountAdminRoles int,
	@strCoachAdmin nvarchar(10)
	
		 

 SET @intCountAdminRoles = (SELECT Count(r.[RoleId])
FROM [EC].[AT_Role]r JOIN [EC].[AT_User_Role_Link] ur
ON r.RoleId = ur.RoleId JOIN [EC].[AT_User]u 
ON u.UserId = ur.UserId 
WHERE r.IsSysAdmin = 1
AND r.RoleDescription like 'Coach%'
AND u.UserID = @strEmpID )
  
  IF     @intCountAdminRoles > 0
  SET    @strCoachAdmin = N'YES'
  ELSE
  SET    @strCoachAdmin = N'NO'
  
  RETURN   @strCoachAdmin
  
END --fn_strCheckIfATCoachingAdmin





GO





--***************************************

--4.[EC].[fn_strCheckIfATWarningAdmin]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strCheckIfATWarningAdmin' 
)
   DROP FUNCTION [EC].[fn_strCheckIfATWarningAdmin]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





-- =============================================
-- Author:		Susmitha Palacherla
-- Create date:  5/6/2016
-- Description:	Given an Employee ID returns if the user is aWarning Admin
-- Last Modified By:
-- Revision History:
--  Created per TFS 1709 - Initial setup of admin tool - 05/06/2016

-- =============================================
CREATE FUNCTION [EC].[fn_strCheckIfATWarningAdmin] 
(
	@strEmpID nvarchar(10) 
)
RETURNS NVARCHAR(10)
AS
BEGIN
	DECLARE 
	@intCountAdminRoles int,
	@strWarnAdmin nvarchar(10)
	
		 

 SET @intCountAdminRoles = (SELECT Count(r.[RoleId])
FROM [EC].[AT_Role]r JOIN [EC].[AT_User_Role_Link] ur
ON r.RoleId = ur.RoleId JOIN [EC].[AT_User]u 
ON u.UserId = ur.UserId 
WHERE r.IsSysAdmin = 1
AND r.RoleDescription like 'Warn%'
AND u.UserID = @strEmpID )
  
  IF     @intCountAdminRoles > 0
  SET    @strWarnAdmin = N'YES'
  ELSE
  SET    @strWarnAdmin = N'NO'
  
  RETURN   @strWarnAdmin
  
END --fn_strCheckIfATWarningAdmin





GO






--***************************************

--5.[EC].[fn_strStatusFromStatusID]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strStatusFromStatusID' 
)
   DROP FUNCTION [EC].[fn_strStatusFromStatusID]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




-- =============================================
-- Author:              Susmitha Palacherla
-- Create date:        06/09/2016
-- Last modified by:    
-- Last modified date:  
-- Description:	 Given a Status ID returns the Status from Status table.
--    
-- =============================================
CREATE FUNCTION [EC].[fn_strStatusFromStatusID]
 (
 @strStatusID INT
)
RETURNS nvarchar(50)
AS
BEGIN
  DECLARE  @strStatus nvarchar(50)
   
  SELECT @strStatus = [Status] FROM [EC].[DIM_Status]
  WHERE [StatusID]= @strStatusID
  
  IF  @strStatus  IS NULL
  SET @strStatus = 'Unknown'
  
  RETURN @strStatus 
  
END  -- fn_strStatusFromStatusID



GO








--***************************************

--5.[EC].[fn_strStatusIDFromStatus]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_strStatusIDFromStatus' 
)
   DROP FUNCTION [EC].[fn_strStatusIDFromStatus]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



-- =============================================
-- Author:              Susmitha Palacherla
-- Create date:         03/06/2014
-- Last modified by:    
-- Last modified date:  
-- Description:	 Given a Status returns the Status id from Status table.
--    
-- =============================================
CREATE FUNCTION [EC].[fn_strStatusIDFromStatus]
 (
 @strStatus NVARCHAR(50)
)
RETURNS INT
AS
BEGIN
  DECLARE  @strStatusID INT 
   
  SELECT @strStatusID = [StatusID] FROM [EC].[DIM_Status]
  WHERE [Status]= @strStatus
  
      
  RETURN @strStatusID
  
END  -- fn_strStatusIDFromStatus()


GO








--***************************************
