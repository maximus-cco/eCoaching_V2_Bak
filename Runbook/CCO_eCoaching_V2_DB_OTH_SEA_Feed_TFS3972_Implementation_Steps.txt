/*


Implement in eCoaching database in target environment.


Dev - eCoahingDev
Test - eCoachingTest
Prod - eCoaching



Implementation Instructions for TFS 3972

sp [EC].[sp_InsertInto_Coaching_Log_Generic]
sp [EC].[sp_SelectReviewFrom_Coaching_Log]
fn [EC].[fn_intSubCoachReasonIDFromRptCode]


--****************************************************************************************************************************
-- COPY ENTIRE CODE FROM HERE ON INTO AN SSMS WINDOW POINTING TO eCOACHING DB AND RUN WITH NOTHING SELECTED.
--****************************************************************************************************************************/




--1. sp [EC].[sp_InsertInto_Coaching_Log_Generic]
IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Coaching_Log_Generic' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic]
GO



SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






-- =============================================
-- Author:		        Susmitha Palacherla
-- Create date:        4/11/2016
--  Created per TFS 2470 to load the Generic feed(s)- 4/11/2016
-- Modified to accomodate Attendance feed for seasonal employees per TFS 3972 - 09/15/2016
-- =============================================
CREATE PROCEDURE [EC].[sp_InsertInto_Coaching_Log_Generic]
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY

      DECLARE @maxnumID INT,
              @dtmDate DATETIME
                        
      -- Fetches the maximum CoachingID before the insert.
      SET @maxnumID = (SELECT IsNULL(MAX([CoachingID]), 0) FROM [EC].[Coaching_Log])  
      -- Fetches the Date of the Insert
      SET @dtmDate  = GETDATE()   
      
-- Inserts records from the Generic_Coaching_Stage table to the Coaching_Log Table

  INSERT INTO [EC].[Coaching_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[EventDate]
           ,[isAvokeID]
		   ,[isNGDActivityID]
           ,[isUCID]
           ,[isVerintID]
           ,[Description]
	       ,[SubmittedDate]
           ,[StartDate]
           ,[isCSRAcknowledged]
           ,[isCSE]
           ,[EmailSent]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )
select  Distinct LOWER(cs.CSR_LANID)	[FormName],
        CASE cs.Program  
        WHEN NULL THEN csr.Emp_Program
        WHEN '' THEN csr.Emp_Program
        ELSE cs.Program  END       [ProgramName],
        [EC].[fn_intSourceIDFromSource](cs.[Form_Type],cs.[Source])[SourceID],
        [EC].[fn_strStatusIDFromStatus](cs.Form_Status)[StatusID],
        [EC].[fn_intGetSiteIDFromLanID](cs.CSR_LANID,@dtmDate)[SiteID],
        LOWER(cs.CSR_LANID)				[EmpLanID],
        cs.CSR_EMPID                    [EmpID],
        [EC].[fn_nvcGetEmpIdFromLanId](LOWER(cs.Submitter_LANID),@dtmDate)[SubmitterID],
		cs.Event_Date			            [EventDate],
		 0			[isAvokeID],
		 0			[isNGDActivityID],
         0			[isUCID],
         0          [isVerintID],
		-- EC.fn_nvcHtmlEncode(cs.TextDescription)		[Description],
		 CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '|'  ,'<br /> <br />')
		 ELSE REPLACE(EC.fn_nvcHtmlEncode(cs.TextDescription), '      '  ,'<br />') END [Description],	-- CHAR(13) + CHAR(10)
		 cs.Submitted_Date			SubmittedDate,
		 cs.Start_Date				[StartDate],
		 0        				    [isCSRAcknowledged],
		 0                          [isCSE],
		 CASE 
		 WHEN cs.[Report_Code] like 'SEA%'
		 THEN 0
		 ELSE 1	END					[EmailSent],
		 cs.Report_ID				[numReportID],
		 cs.Report_Code				[strReportCode],
		 1							[ModuleID],
		 ISNULL(csr.[Sup_ID],'999999')  [SupID],
		 ISNULL(csr.[Mgr_ID],'999999') [MgrID]
	                   
from [EC].[Generic_Coaching_Stage] cs  join EC.Employee_Hierarchy csr on cs.CSR_EMPID = csr.Emp_ID
left outer join EC.Coaching_Log cf on cs.Report_ID = cf.numReportID and cs.Report_Code = cf.strReportCode
where cf.numReportID is Null and cf.strReportCode is null


-- Updates the strFormID value

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Coaching_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,CoachingID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 -- Inserts records into Coaching_Log_reason table for each record inserted into Coaching_log table.


INSERT INTO [EC].[Coaching_Log_Reason]
           ([CoachingID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[CoachingID],
         CASE 
		 WHEN cf.strReportCode like 'SEA%'
		 THEN 3
		 ELSE 5	END,					
         [EC].[fn_intSubCoachReasonIDFromRptCode](SUBSTRING(cf.strReportCode,1,3)),
           os.[CoachReason_Current_Coaching_Initiatives]
    FROM [EC].[Generic_Coaching_Stage] os JOIN  [EC].[Coaching_Log] cf      
    ON os.[Report_ID] = cf.[numReportID] AND  os.[Report_Code] = cf.[strReportCode]
    LEFT OUTER JOIN  [EC].[Coaching_Log_Reason] cr
    ON cf.[CoachingID] = cr.[CoachingID]  
    WHERE cr.[CoachingID] IS NULL 
 OPTION (MAXDOP 1)   
 
                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Coaching_Log_Generic






GO





--*********************************************************


--2. sp [EC].[sp_SelectReviewFrom_Coaching_Log]

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_SelectReviewFrom_Coaching_Log' 
)
   DROP PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

--	====================================================================
--	Author:			Susmitha Palacherla
--	Create Date:	08/26/2014
--	Description: 	This procedure displays the Coaching Log attributes for given Form Name.
-- SQL split into 3 parts to overcome sql string size restriction.

-- Last Updated By: Susmitha Palacherla
-- 1. TFS 1877 to support OMR Low CSAT logs should be viewable by hierarchy manger - 2/17/2016
-- 2. TFS 1914 to support  OMR Short Calls feed with Manager Review - 2/17/2016
-- 3. TFS 1732 to support SDR Training feed - 3/2/2016
-- 4. TFS 2283 to support ODT Training feed - 3/22/2016
-- 5. TFS 1709 to support Reassigned sups and Mgrs - 5/6/2016
-- 6. TFS 2268 to support CTC Quality Other feed - 6/23/2016
-- 7. TFS 3179 & 3186 to add support HFC & KUD Quality Other feeds - 7/15/2016
-- 8. TFS 3677 to update Quality\KUD Flag - 8/18/2016
-- 9. TFS 3972 to ADD SEA flag - 9/15/2016
--	=====================================================================

CREATE PROCEDURE [EC].[sp_SelectReviewFrom_Coaching_Log] @strFormIDin nvarchar(50)
AS

BEGIN
DECLARE	

@nvcSQL nvarchar(max),
@nvcSQL1 nvarchar(max),
@nvcSQL2 nvarchar(max),
@nvcSQL3 nvarchar(max),
@nvcEmpID nvarchar(10),
@nvcMgrID nvarchar(10)


SET @nvcEmpID = (SELECT [EmpID] From [EC].[Coaching_Log] WHERE [FormName]= @strFormIDin)	 
SET @nvcMgrID = (SELECT [Mgr_ID] From [EC].[Employee_Hierarchy] WHERE [Emp_ID] = @nvcEmpID)

  SET @nvcSQL1 = 'SELECT  cl.CoachingID 	numID,
		cl.FormName	strFormID,
		m.Module,
		sc.CoachingSource	strFormType,
		s.Status	strFormStatus,
		cl.EventDate	EventDate,
		cl.CoachingDate	CoachingDate,
		cl.SubmitterID strSubmitterID,
		cl.SupID strCLSupID,
		cl.MgrID strCLMgrID,
		sh.Emp_LanID	strSubmitter,		
		sh.Emp_Name	strSubmitterName,
		sh.Emp_Email	strSubmitterEmail,	
		cl.EmpID strEmpID,		
		cl.EmpLanID	strEmpLanID,
		eh.Emp_Name	strCSRName,
		eh.Emp_Email	strCSREmail,
		st.City	strCSRSite,
		eh.Sup_ID strCSRSupID,
		eh.Sup_LanID strCSRSup,
		eh.Sup_Name strCSRSupName,
		eh.Sup_Email  strCSRSupEmail,
	CASE 
	     WHEN (cl.[statusId]in (6,8) AND cl.[ModuleID] in (1,3,4,5) AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[statusId]= 5 AND cl.[ModuleID] = 2 AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[Review_SupID]is NOT NULL and cl.[Review_SupID] = cl.[ReassignedToID] and [ReassignCount]= 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_SupID])
		 ELSE ''NA''
	END  strReassignedSupName,	
		eh.Mgr_ID strCSRMgrID,
	CASE 
		 WHEN cl.[strReportCode] like ''LCS%'' 
		 THEN [EC].[fn_strEmpLanIDFromEmpID](cl.[MgrID])
		 ELSE eh.Mgr_LanID 
	END strCSRMgr,
	CASE
		 WHEN cl.[strReportCode] like ''LCS%'' AND cl.[MgrID] <> '''+@nvcMgrID+'''
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[MgrID])+ '' (Assigned Reviewer)''
		 ELSE eh.Mgr_Name 
	END strCSRMgrName,
		eh.Mgr_Email strCSRMgrEmail,
	CASE 
	     WHEN (cl.[statusId]= 5  AND cl.[ModuleID] in (1,3,4,5) AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[statusId]= 7  AND cl.[ModuleID] = 2 AND cl.[ReassignedToID]is NOT NULL and [ReassignCount]<> 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[ReassignedToID])
		 WHEN (cl.[Review_MgrID]is NOT NULL AND cl.[Review_MgrID] = cl.[ReassignedToID]and [ReassignCount]= 0)
		 THEN [EC].[fn_strEmpNameFromEmpID](cl.[Review_MgrID])
		 ELSE ''NA''
	END strReassignedMgrName, '
	
	  SET @nvcSQL2 = 'CASE
		WHEN cl.[Review_SupID] IS NOT NULL THEN ISNULL(suph.Emp_Name,''Unknown'')
		ELSE ISNULL(mgrh.Emp_Name,''Unknown'')END strReviewer,
		cl.ReassignedToID,
        sc.SubCoachingSource	strSource,
        CASE WHEN sc.SubCoachingSource in (''Verint-GDIT'',''Verint-TQC'',''LimeSurvey'',''IQS'',''Verint-GDIT Supervisor'')
		THEN 1 ELSE 0 END 	isIQS,
		CASE WHEN sc.SubCoachingSource = ''Coach the coach''
		THEN 1 ELSE 0 END 	isCTC,
		cl.isUCID    isUCID,
		cl.UCID	strUCID,
		cl.isVerintID	isVerintMonitor,
		cl.VerintID	strVerintID,
		cl.VerintFormName VerintFormName,
		cl.isAvokeID	isBehaviorAnalyticsMonitor,
		cl.AvokeID	strBehaviorAnalyticsID,
		cl.isNGDActivityID	isNGDActivityID,
		cl.NGDActivityID	strNGDActivityID,
		CASE WHEN cc.CSE = ''Opportunity'' Then 1 ELSE 0 END "Customer Service Escalation",
		CASE WHEN cc.CCI is Not NULL Then 1 ELSE 0 END	"Current Coaching Initiative",
		CASE WHEN cc.OMR is Not NULL AND cc.LCS is NULL AND cc.SDR is NULL AND cc.ODT is NULL Then 1 ELSE 0 END	"OMR / Exceptions",
		CASE WHEN cc.ETSOAE is Not NULL Then 1 ELSE 0 END	"ETS / OAE",
		CASE WHEN cc.ETSOAS is Not NULL Then 1 ELSE 0 END	"ETS / OAS",
		CASE WHEN cc.OMRIAE is Not NULL Then 1 ELSE 0 END	"OMR / IAE",
		CASE WHEN cc.OMRIAT is Not NULL Then 1 ELSE 0 END	"OMR / IAT",
		CASE WHEN cc.OMRISQ is Not NULL Then 1 ELSE 0 END	"OMR / ISQ",
		CASE WHEN cc.LCS is Not NULL Then 1 ELSE 0 END	"LCS",
		CASE WHEN cc.SDR is Not NULL Then 1 ELSE 0 END	"Training / SDR",
	    CASE WHEN cc.ODT is Not NULL Then 1 ELSE 0 END	"Training / ODT",
	    CASE WHEN cc.CTC is Not NULL Then 1 ELSE 0 END	"Quality / CTC",
	    CASE WHEN cc.HFC is Not NULL Then 1 ELSE 0 END	"Quality / HFC",
	    CASE WHEN (cc.KUD is Not NULL AND cl.strReportCode is Not NULL) Then 1 ELSE 0 END	"Quality / KUD",
	    CASE WHEN (cc.SEA is Not NULL AND cl.strReportCode is Not NULL) Then 1 ELSE 0 END	"OTH / SEA",
	  	cl.Description txtDescription,
		cl.CoachingNotes txtCoachingNotes,
		cl.isVerified,
		cl.SubmittedDate,
		cl.StartDate,
		cl.SupReviewedAutoDate,
		cl.isCSE,
		cl.MgrReviewManualDate,
		cl.MgrReviewAutoDate,
		cl.MgrNotes txtMgrNotes,
		cl.isCSRAcknowledged,
		cl.isCoachingRequired,
		cl.CSRReviewAutoDate,
		cl.CSRComments txtCSRComments
	    FROM  [EC].[Coaching_Log] cl JOIN'
	    
SET @nvcSQL3 = '  (SELECT  ccl.FormName,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Customer Service Escalation'' THEN [clr].[Value] ELSE NULL END)	CSE,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''Current Coaching Initiative'' THEN [clr].[Value] ELSE NULL END)	CCI,
	 MAX(CASE WHEN [cr].[CoachingReason] = ''OMR / Exceptions'' THEN [clr].[Value] ELSE NULL END)	OMR,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 120 THEN [clr].[Value] ELSE NULL END)	ETSOAE,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 121 THEN [clr].[Value] ELSE NULL END)	ETSOAS,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 29 THEN [clr].[Value] ELSE NULL END)	OMRIAE,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 231 THEN [clr].[Value] ELSE NULL END)	OMRIAT,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 34 THEN [clr].[Value] ELSE NULL END)	LCS,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 23 THEN [clr].[Value] ELSE NULL END)	OMRISQ,
	 MAX(CASE WHEN [clr].[SubCoachingReasonID] = 232 THEN [clr].[Value] ELSE NULL END)	SDR,
     MAX(CASE WHEN [clr].[SubCoachingReasonID] = 233 THEN [clr].[Value] ELSE NULL END)	ODT,
     MAX(CASE WHEN [clr].[SubCoachingReasonID] = 73 THEN [clr].[Value] ELSE NULL END)	CTC,
     MAX(CASE WHEN [clr].[SubCoachingReasonID] = 12 THEN [clr].[Value] ELSE NULL END)	HFC,
     MAX(CASE WHEN ([CLR].[CoachingreasonID] = 11 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	KUD,
     MAX(CASE WHEN ([CLR].[CoachingreasonID] = 3 AND [clr].[SubCoachingReasonID] = 42) THEN [clr].[Value] ELSE NULL END)	SEA
 	 FROM [EC].[Coaching_Log_Reason] clr,
	 [EC].[DIM_Coaching_Reason] cr,
	 [EC].[Coaching_Log] ccl 
	 WHERE [ccl].[FormName] = '''+@strFormIDin+'''
	 AND [clr].[CoachingReasonID] = [cr].[CoachingReasonID]
	 AND [ccl].[CoachingID] = [clr].[CoachingID] 
	 GROUP BY ccl.FormName ) cc
ON [cl].[FormName] = [cc].[FormName] JOIN  [EC].[Employee_Hierarchy] eh
	 ON [cl].[EMPID] = [eh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] sh
	 ON [cl].[SubmitterID] = [sh].[Emp_ID] JOIN [EC].[Employee_Hierarchy] suph
	 ON ISNULL([cl].[Review_SupID],''999999'') = [suph].[Emp_ID] JOIN [EC].[Employee_Hierarchy] mgrh
	 ON ISNULL([cl].[Review_MgrID],''999999'') = [mgrh].[Emp_ID]JOIN [EC].[DIM_Status] s
	 ON [cl].[StatusID] = [s].[StatusID] JOIN [EC].[DIM_Source] sc
     ON [cl].[SourceID] = [sc].[SourceID] JOIN [EC].[DIM_Site] st
	 ON [cl].[SiteID] = [st].[SiteID] JOIN [EC].[DIM_Module] m ON [cl].[ModuleID] = [m].[ModuleID]
Order By [cl].[FormName]'
		
SET @nvcSQL =  @nvcSQL1 +  @nvcSQL2 +  @nvcSQL3
EXEC (@nvcSQL)
--Print (@nvcSQL)
	    
END --sp_SelectReviewFrom_Coaching_Log
GO






--*********************************************************


--3. fn [EC].[fn_intSubCoachReasonIDFromRptCode]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'fn_intSubCoachReasonIDFromRptCode' 
)
   DROP FUNCTION [EC].[fn_intSubCoachReasonIDFromRptCode]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:              Susmitha Palacherla
-- Create date:         03/05/2014
-- Description:	  Given the 3 letter  Report code returns the Sub coaching reason for the log.
-- Last Modified Date: 6/15/2016
-- last Modified By: Susmitha Palacherla
-- TFS 1732 - To add SDR - 3/02/2016
-- TFS 2282 - To add ODT - 3/22/2016
-- TFS 2470 - To add OTH - 4/11/2016
-- TFS 2268 - To add CTC - 6/15/2016
-- TFS 3179 & 3186 - To add HFC & KUD - 7/14/2016
-- TFS 3972 - To add SEA - 9/15/2016
-- =============================================
CREATE FUNCTION [EC].[fn_intSubCoachReasonIDFromRptCode] (
  @strRptCode NVARCHAR(10)
)
RETURNS INT
AS
BEGIN
  DECLARE @intSubCoachReasonID INT
  
  IF @strRptCode IS NOT NULL
    SET @intSubCoachReasonID =
      CASE @strRptCode 
			WHEN N'CAN' THEN 20
			WHEN N'DFQ' THEN 21
			WHEN N'OPN' THEN 22
			WHEN N'ISQ' THEN 23
			WHEN N'OSC' THEN 24
			WHEN N'ACW' THEN 25
			WHEN N'AHT' THEN 26
			WHEN N'SPI' THEN 27
			WHEN N'ACO' THEN 28
			WHEN N'IAE' THEN 29
			WHEN N'IDE' THEN 30
			WHEN N'IEE' THEN 31
			WHEN N'INF' THEN 32
			WHEN N'ISG' THEN 33
			WHEN N'LCS' THEN 34
			WHEN N'NIT' THEN 35
			WHEN N'RME' THEN 36
			WHEN N'SLG' THEN 37
			WHEN N'TRN' THEN 38 
			WHEN N'TR2' THEN 109  
			WHEN N'IAT' THEN 231
			WHEN N'SDR' THEN 232
            WHEN N'ODT' THEN 233
            WHEN N'OTH' THEN 42
            WHEN N'CTC' THEN 73
            WHEN N'HFC' THEN 12
            WHEN N'KUD' THEN 42
            WHEN N'SEA' THEN 42
        ELSE -1
      END
    ELSE
    SET @intSubCoachReasonID = -1
        
RETURN @intSubCoachReasonID  

END  -- fn_intSubCoachReasonIDFromRptCode()


GO


--*********************************************************





