/*
Implementation Notes for SCR 13623
Summary

There are 2 sections for the Implementation
Section 1 to stage the ssis package and config file
Section 2 to create the supporting database objects.

Section 1 Summary

1. Stage the SSIS package and config file
2. Setup sql agent job
3. submit ticket for DBA to map config file in job (Ticket details not in this doc).


Section 2 summary

1. Create Staging Table
2. Create Rejected Table
3. Create File List Table
4. Create Procedure to insert into rejected table
5. Create Procedure to Update Staging Table
6. Create procedure to insert  records to Warning log table



*********************************************************************************

--Details: Section 1

************************************************************************************************/
-- Get the following files from VM.
a. Warnings_History.dtsx (VM version 1.1)
b. Prod_Warning_History.dtsConfig (VM version 1.0)

--1. Stage files to following directory
 \\vdenssdbp07\scorecard-ssis\Coaching

--2. Setup sql agent job

Job General tab
 Job Name- CoachingWHLoad
Owner - VNGT\sqlsscorp01


Job Steps Tab
Step 1- Step General Tab
    Step Name - WH feed Load
   Type -SSIS Integration Package
   Run as - BccScrdSQLAgent
Package Source - File System
Package -\\Vdenssdbp07\scorecard-SSIS\Coaching\Warnings_History.dtsx
Configurations Tab - \\Vdenssdbp07\scorecard-SSIS\Coaching\Prod_Warning_History.dtsConfig

Step 1- Step Advanced tab
On success Go to next step
On failure Quit the job reporting failure

No schedule to be set. It will be run on demand.

--*********************************************************************************************




/****************************************************************************************
Details - Section 2
Run steps 1 through 3 to create the tables one at a time. 
Steps 4 through 6 to create procedures can be copied into an ssms window and run at once with nothing selected.

********************************************************************************************/


--1. Create Staging Table

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Warning_History_Stage](
	[EmpID] [nvarchar](20) NULL,
	[EmpLanID] [nvarchar](30) NULL,
	[EmpSite] [nvarchar](20) NULL,
	[EmpProgram] [nvarchar](30) NULL,
	[EmpSupID] [nvarchar](20) NULL,
	[EmpMgrID] [nvarchar](20) NULL,
	[EmpRole] [nvarchar](3) NULL,
	[TypeOfWarning] [nvarchar](30) NULL,
	[CoachingReasonID] [int] NULL,
	[WarningType] [nvarchar](50) NULL,
	[SubCoachingReasonID] [int] NULL,
	[WarningGivenDate] [datetime] NULL,
	[Filename] [nvarchar](260) NULL,
	[ReportCode] [nvarchar](40) NULL,
	[ReportID] [int] NULL,
	[RejectReason] [nvarchar](200) NULL
) ON [PRIMARY]

GO





--*******************************************

--2. Create Rejected Table

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Warning_History_Rejected](
	[EmpID] [nvarchar](20) NULL,
	[EmpSupID] [nvarchar](20) NULL,
	[EmpRole] [nvarchar](3) NULL,
	[TypeOfWarning] [nvarchar](30) NULL,
	[WarningType] [nvarchar](50) NULL,
	[WarningGivenDate] [datetime] NULL,
	[Filename] [nvarchar](260) NULL,
	[Reject_Reason] [nvarchar](200) NULL,
	[Reject_Date] [datetime] NULL
) ON [PRIMARY]

GO

--*******************************************

--3. Create File List Table

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [EC].[Warning_History_FileList](
	[File_SeqNum] [int] IDENTITY(1,1) NOT NULL,
	[File_Name] [nvarchar](260) NULL,
	[File_LoadDate] [datetime] NULL,
	[Count_Staged] [int] NULL,
	[Count_Loaded] [int] NULL,
	[Count_Rejected] [int] NULL
) ON [PRIMARY]

GO



--***********************************************************************************
FROM HERE ON YOU CAN COPY INTO SSMS FILE AND RUN ONCE WITH NOTHING SELECTED
--***********************************************************************************

--4. Create SP [EC].[sp_InsertInto_Warning_History_Rejected]


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Warning_History_Rejected' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Warning_History_Rejected]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 11/19/14
-- Description:	Determines rejection Reason for Warning_History logs.
-- Populates the records with reject reasons to the Reject table.

-- =============================================
ALTER PROCEDURE [EC].[sp_InsertInto_Warning_History_Rejected] 

AS
BEGIN
-- reject records for Employees with missing lan IDs

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Employee Lan ID is missing.'
WHERE EmpLanID is NULL

	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records that dont belong to CSR or Supervisor

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Record does not belong to CSR or Superviosr.'
WHERE EmpRole  not in ('C', 'S') and [RejectReason] is NULL

	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms


-- reject records for Employee not in Hierarchy table

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Employee Not found in Hierarchy table.'
WHERE EMPID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy])
AND [RejectReason]is NULL
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for Employee not in Hierarchy table

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Employee Not found in Hierarchy table.'
WHERE EMPID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy])
AND [RejectReason]is NULL
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for Supervisor not in Hierarchy table

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Supervisor Not found in Hierarchy table.'
WHERE EmpSupID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy])
AND [RejectReason]is NULL
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for Manager not in Hierarchy table

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Manager Not found in Hierarchy table.'
WHERE EmpMgrID NOT IN 
(SELECT DISTINCT EMP_ID FROM [EC].[Employee_Hierarchy])
AND [RejectReason]is NULL
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for unexpected Type Of warning values

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Type of warning value invalid.'
WHERE [TypeOfWarning] NOT IN 
('Verbal Warning', 'Written Warning', 'Final Written Warning')
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for unexpected WarningType values

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Warning type value invalid.'
WHERE [WarningType] NOT IN 
('ETS',
'Attendance',
'Conduct (including Call Avoidance)',
'Quality/Performance',
'Security or Privacy Issue',
'Other Policy (non-Security/Privacy)')
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- reject records for future warning given dates

BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [RejectReason]= N'Warning given date is in the future.'
WHERE [WarningGivenDate]> GETDATE()
	
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 5 ms

-- Write rejected records to Rejected table.

BEGIN
INSERT INTO [EC].[Warning_History_Rejected]
           ([EmpID]
      ,[EmpSupID]
      ,[EmpRole]
      ,[TypeOfWarning]
      ,[WarningType]
      ,[WarningGivenDate]
      ,[Filename]
      ,[Reject_Reason]
      ,[Reject_Date])
SELECT S.[EmpID]
      ,S.[EmpSupID]
     , S.[EmpRole]
     , S.[TypeOfWarning]
     , S.[WarningType]
     , S.[WarningGivenDate]
     , S.[Filename]
     , S.[RejectReason]
      ,GETDATE()
           FROM [EC].[Warning_History_Stage] S
           WHERE S.[RejectReason] is not NULL
      

OPTION (MAXDOP 1)
END

END  -- [EC].[sp_InsertInto_Warning_History_Rejected]
GO







--*******************************************




--5. Create Procedure sp_Update_Warning_History_Stage


IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_Update_Warning_History_Stage' 
)
   DROP PROCEDURE [EC].[sp_Update_Warning_History_Stage]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

-- =============================================
-- Author:		   Susmitha Palacherla
-- Create date: 12/4/2014
-- Description:	Performs the following actions.
-- Removes Alpha characters from first 2 positions of Emp_ID
-- Populate Employee and Hierarchy attributes from Employee Table
-- Inserts into Rejected table and Deletes rejected records.


-- =============================================
ALTER PROCEDURE [EC].[sp_Update_Warning_History_Stage] 
@Count INT OUTPUT
AS
BEGIN



BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [EmpID]= [EC].[RemoveAlphaCharacters]([EmpID])  
OPTION (MAXDOP 1)
END  
    
    
WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms
    
-- Populate Attributes from Employee Table
BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [EmpLanID] = EMP.[Emp_LanID]
    ,[EmpSite]= EMP.[Emp_Site]
    ,[EmpProgram]= EMP.[Emp_Program]
    ,[EmpRole]= 
    CASE WHEN EMP.[Emp_Job_Code]in ('WACS01', 'WACS02','WACS03') THEN 'C'
    WHEN EMP.[Emp_Job_Code] = 'WACS40' THEN 'S'
    ELSE 'O' END
   ,[CoachingReasonID]= CASE [TypeOfWarning]
    WHEN 'Verbal Warning' THEN 28
    WHEN 'Written warning' THEN 29
    WHEN 'Final Written warning' THEN 30 ELSE -1 END
   ,[SubCoachingReasonID]= CASE [WarningType]
   WHEN 'ETS' THEN 48
   WHEN 'Attendance' THEN 92
   WHEN 'Conduct (including Call Avoidance)' THEN 93
   WHEN 'Quality/Performance' THEN 94
   WHEN 'Security or Privacy Issue' THEN 95
   WHEN 'Other Policy (non-Security/Privacy)' THEN 96 ELSE -1 END
   ,[ReportCode] = RIGHT(Filename,CHARINDEX('\',REVERSE(Filename))-1)
FROM [EC].[Warning_History_Stage] STAGE JOIN [EC].[Employee_Hierarchy]EMP
ON LTRIM(STAGE.EmpID) = LTRIM(EMP.Emp_ID)

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Populate Sup Emp ID if Missing
BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [EmpSupID] =  H.SupID 
FROM [EC].[Warning_History_Stage] STAGE JOIN [EC].[CSR_Hierarchy]H
ON LTRIM(STAGE.EmpID) = LTRIM(H.EmpID)
AND STAGE.[WarningGivenDate]BETWEEN H.[StartDate] and H.[EndDate]
WHERE ([EmpSupID] IS NULL OR [EmpSupID]= ' ')

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



-- Populate Mgr Emp ID if Missing
BEGIN
UPDATE [EC].[Warning_History_Stage]
SET [EmpMgrID] = H.MgrID
FROM [EC].[Warning_History_Stage] STAGE JOIN [EC].[CSR_Hierarchy]H
ON LTRIM(STAGE.EmpID) = LTRIM(H.EmpID)
AND STAGE.[WarningGivenDate]BETWEEN H.[StartDate] and H.[EndDate]


OPTION (MAXDOP 1)
END



WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms



-- Reject records not belonging to CSRs and Supervisors
BEGIN
EXEC [EC].[sp_InsertInto_Warning_History_Rejected] 
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


-- Delete rejected records

BEGIN
DELETE FROM [EC].[Warning_History_Stage]
WHERE [RejectReason]is not NULL

SELECT @Count =@@ROWCOUNT

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms

-- Assign Record ID
BEGIN

DECLARE @id INT 
SET @id = 0 
UPDATE [EC].[Warning_History_Stage]
SET @id = [ReportID] = @id + 1 

OPTION (MAXDOP 1)
END

WAITFOR DELAY '00:00:00.03' -- Wait for 3 ms


END  -- [EC].[sp_Update_Warning_History_Stage]
GO








--*******************************************

--6. Create Procedure sp_InsertInto_Warning_History

IF EXISTS (
  SELECT * 
    FROM INFORMATION_SCHEMA.ROUTINES 
   WHERE SPECIFIC_SCHEMA = N'EC'
     AND SPECIFIC_NAME = N'sp_InsertInto_Warning_History' 
)
   DROP PROCEDURE [EC].[sp_InsertInto_Warning_History]
GO


SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
--    ====================================================================
--    Author:           Susmitha Palacherla
--    Create Date:      12/5/2014
--    Description:     This procedure inserts the warnings historical records into the Warning_Log table. 
--                     The main attributes of the eCL are written to the Warning_Log table.
--                     The Coaching Reasons are written to the Warning_Reasons Table.


--    =====================================================================
CREATE PROCEDURE [EC].[sp_InsertInto_Warning_History]
@Count INT OUTPUT
  
AS
BEGIN

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ
BEGIN TRANSACTION
BEGIN TRY
      
      DECLARE @maxnumID INT
       -- Fetches the maximum WarningID before the insert.
      SET @maxnumID = (SELECT IsNUll(MAX([WarningID]), 0) FROM [EC].[Warning_Log])    
      
      
      -- Inserts records from the Warning_History_Stage table to the Warning_Log Table

         INSERT INTO [EC].[Warning_Log]
           ([FormName]
           ,[ProgramName]
           ,[SourceID]
           ,[StatusID]
           ,[SiteID]
           ,[EmpLanID]
           ,[EmpID]
           ,[SubmitterID]
           ,[SubmittedDate]
           ,[WarningGivendate]
           ,[numReportID]
           ,[strReportCode]
           ,[ModuleID]
           ,[SupID]
           ,[MgrID]
           )

            SELECT DISTINCT
            lower(wh.EmpLanID)	[FormName],
            wh.EmpProgram   [ProgramName],
            120             [SourceID],
            1               [StatusID],
            [EC].[fn_intSiteIDFromEmpID](LTRIM(wh.EMPID))[SiteID],
            lower(wh.EmpLanID)	[EmpLanID],
            wh.EMPID [EmpID],
            ISNULL(NULLIF(wh.EMPSupID, ' '), '999999')	 [SubmitterID],
            GetDate()  [SubmittedDate],   
            wh.WarningGivenDate [WarningGivenDate],
            wh.ReportID     [numReportID],
            wh.ReportCode   [strReportCode],
		    CASE wh.EmpRole when 'C' THEN 1
            WHEN 'S' THEN 2 ELSE -1 END [ModuleID],
            ISNULL(NULLIF(wh.EmpSupID,' '), '999999') [SupID],
            ISNULL(NULLIF(wh.EmpMgrID,' '), '999999') [MgrID]     

            FROM [EC].[Warning_History_Stage] wh 
left outer join EC.Warning_Log cf on wh.empid = cf.empid
and wh.ReportCode = cf.strReportCode and wh.ReportID = cf.numReportID
and wh.WarningGivenDate = cf.WarningGivenDate
where cf.empid is null and cf.WarningGivenDate is NULL and cf.strReportCode is NULL and cf.numReportID is NULL
OPTION (MAXDOP 1)

SELECT @Count =@@ROWCOUNT

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

UPDATE [EC].[Warning_Log]
SET [FormName] = 'eCL-'+[FormName] +'-'+ convert(varchar,WarningID)
where [FormName] not like 'eCL%'    
OPTION (MAXDOP 1)

WAITFOR DELAY '00:00:00:05'  -- Wait for 5 ms

 
  -- Inserts records into Warning_Log_reason table for each record inserted into Warning_log table.

INSERT INTO [EC].[Warning_Log_Reason]
           ([WarningID]
           ,[CoachingReasonID]
           ,[SubCoachingReasonID]
           ,[Value])
    SELECT cf.[WarningID],
           wh.[CoachingReasonID],
           wh.[SubCoachingReasonID],
           'Opportunity' 
    FROM [EC].[Warning_History_Stage] wh  INNER JOIN  [EC].[Warning_Log] cf      
       ON (wh.[ReportCode] = cf.[strReportCode]
   and wh.WarningGivenDate = cf.WarningGivenDate and wh.EmpID = cf.EmpID and wh.ReportID = cf.numReportID)
    LEFT OUTER JOIN  [EC].[Warning_Log_Reason] cr
    ON cf.[WarningID] = cr.[WarningID]  
    WHERE cr.[WarningID] IS NULL 
 OPTION (MAXDOP 1) 

                  
COMMIT TRANSACTION
END TRY

      
      BEGIN CATCH
      IF @@TRANCOUNT > 0
      ROLLBACK TRANSACTION


    DECLARE @ErrorMessage NVARCHAR(4000)
    DECLARE @ErrorSeverity INT
    DECLARE @ErrorState INT

    SELECT @ErrorMessage = ERROR_MESSAGE(),
           @ErrorSeverity = ERROR_SEVERITY(),
           @ErrorState = ERROR_STATE()

    RAISERROR (@ErrorMessage, -- Message text.
               @ErrorSeverity, -- Severity.
               @ErrorState -- State.
               )
      
    IF ERROR_NUMBER() IS NULL
      RETURN 1
    ELSE IF ERROR_NUMBER() <> 0 
      RETURN ERROR_NUMBER()
    ELSE
      RETURN 1
  END CATCH  
END -- sp_InsertInto_Warning_History

GO

--*******************************************

