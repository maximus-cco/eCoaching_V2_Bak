@model eCoachingLog.Models.Common.CoachingReason
@{
    Layout = null;
    var rIndex = ViewData["index"];
    var reasonId = "CoachingReasons[" + rIndex + "].IsChecked";
    // opportunity/reinforcement/research required: 3
    var type = "CoachingReasons[" + rIndex + "].Type";
     var subReasonIds = "CoachingReasons[" + rIndex + "].SubReasonIds";
}
@Html.CheckBoxFor(m => m.IsChecked, new { @class = "reason-checkbox", @Name = reasonId, id = @rIndex})
<input type="hidden" name="reasonIndex" class="reasonIndex" value="@rIndex"/>
<label class="control-label">
	@Html.DisplayTextFor(m => m.Text)
</label>

@if (Model.IsChecked)
{
	<!-- values -->
	<div class='col-sm-12 coaching-values'>
		@if (Model.OpportunityOption)
		{
			@Html.RadioButtonFor(m => m.Type, "Opportunity", new { @class = "value-radio", @Name= type }) @:Opportunity&nbsp;&nbsp;
		}
		@if (Model.ReinforcementOption)
		{
			@Html.RadioButtonFor(m => m.Type, "Reinforcement", new { @class = "value-radio", @Name = type }) @:Reinforcement&nbsp;&nbsp;
		}
        @if (Model.ResearchOption)
        {
            @Html.RadioButtonFor(m => m.Type, "Research Required", new { @class = "value-radio", @Name = type }) @:Research Required
    	}
	</div>
	<div class="col-sm-12 validation-value">
		@Html.ValidationMessageFor(m => m.Type, "", new { @class = "field-validation-error" })
	</div>

	<!-- sub reasons -->
	<div class='col-sm-12 fixed-width wrap-items coaching-subreasons'>
        @Html.HiddenFor(m => m.AllowMultiSubReason)
        @if (Model.AllowMultiSubReason)
        {
            @Html.ListBoxFor(m => m.SubReasonIds,
                new MultiSelectList(Model.SubReasons, "ID", "Text", Model.SubReasonIds),
                new { @class = "listbox-multiselect", @Name = subReasonIds, id = subReasonIds })
        }
        else
        {
            @Html.ListBoxFor(m => m.SubReasonIds,
                new MultiSelectList(Model.SubReasons, "ID", "Text", Model.SubReasonIds),
                new { @class = "listbox-singleselect", @Name = subReasonIds, id = subReasonIds })
        }

		@Html.ValidationMessageFor(m => m.SubReasonIds)
	</div>
}

<script>
	$(function () {
	    $('.listbox-multiselect').multiselect({
            includeSelectAllOption: true,
            buttonWidth: '100%'
	    });

	    $('.listbox-singleselect').multiselect({
	        includeSelectAllOption: false,
	        buttonWidth: '100%',
	        onChange: function (option, checked) {
	            if ($('.listbox-singleselect option:selected').length == 1) {
	                // Disable others.
	                $('.listbox-singleselect option').filter(function () {
	                    return !$(this).is(':selected');
	                }).each(function () {
	                    var chkbox = $('.multiselect-container input[value="' + $(this).val() + '"]');
	                    chkbox.prop('disabled', true);
	                    chkbox.parent('li').addClass('disabled');
	                });
	            } else {
	                // Enable all.
	                $('.listbox-singleselect option').each(function() {
	                    var chkbox = $('.multiselect-container input[value="' + $(this).val() + '"]');
	                    chkbox.prop('disabled', false);
	                    chkbox.parent('li').addClass('disabled');
	                });
	            }
	        }
	    });
	})

</script>
